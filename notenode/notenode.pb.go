// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: notenode.proto

package notenode

import (
	common "github.com/heegspace/heegproto/common"
	rescode "github.com/heegspace/heegproto/rescode"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NoteItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid      int64    `protobuf:"varint,1,opt,name=nid,proto3" json:"nid,omitempty"`
	Data     string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Html     string   `protobuf:"bytes,3,opt,name=html,proto3" json:"html,omitempty"`
	Tag      []string `protobuf:"bytes,4,rep,name=tag,proto3" json:"tag,omitempty"`
	Bgcolor  string   `protobuf:"bytes,5,opt,name=bgcolor,proto3" json:"bgcolor,omitempty"`
	NoteType int64    `protobuf:"varint,6,opt,name=note_type,json=noteType,proto3" json:"note_type,omitempty"`
}

func (x *NoteItem) Reset() {
	*x = NoteItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteItem) ProtoMessage() {}

func (x *NoteItem) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteItem.ProtoReflect.Descriptor instead.
func (*NoteItem) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{0}
}

func (x *NoteItem) GetNid() int64 {
	if x != nil {
		return x.Nid
	}
	return 0
}

func (x *NoteItem) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *NoteItem) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

func (x *NoteItem) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *NoteItem) GetBgcolor() string {
	if x != nil {
		return x.Bgcolor
	}
	return ""
}

func (x *NoteItem) GetNoteType() int64 {
	if x != nil {
		return x.NoteType
	}
	return 0
}

type UpdateNoteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Note  *NoteItem         `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateNoteReq) Reset() {
	*x = UpdateNoteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNoteReq) ProtoMessage() {}

func (x *UpdateNoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNoteReq.ProtoReflect.Descriptor instead.
func (*UpdateNoteReq) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateNoteReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *UpdateNoteReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UpdateNoteReq) GetNote() *NoteItem {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *UpdateNoteReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteMetaRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Meta    *common.NoteMeta  `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteMetaRes) Reset() {
	*x = NoteMetaRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteMetaRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteMetaRes) ProtoMessage() {}

func (x *NoteMetaRes) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteMetaRes.ProtoReflect.Descriptor instead.
func (*NoteMetaRes) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{2}
}

func (x *NoteMetaRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteMetaRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteMetaRes) GetMeta() *common.NoteMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *NoteMetaRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteMetaListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid      int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Userid   int64             `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Tag      string            `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	Status   int64             `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Page     int32             `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Size     int32             `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	NoteType int64             `protobuf:"varint,8,opt,name=note_type,json=noteType,proto3" json:"note_type,omitempty"`
	Extra    map[string]string `protobuf:"bytes,10,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteMetaListReq) Reset() {
	*x = NoteMetaListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteMetaListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteMetaListReq) ProtoMessage() {}

func (x *NoteMetaListReq) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteMetaListReq.ProtoReflect.Descriptor instead.
func (*NoteMetaListReq) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{3}
}

func (x *NoteMetaListReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *NoteMetaListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *NoteMetaListReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *NoteMetaListReq) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *NoteMetaListReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NoteMetaListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *NoteMetaListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *NoteMetaListReq) GetNoteType() int64 {
	if x != nil {
		return x.NoteType
	}
	return 0
}

func (x *NoteMetaListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteMetaListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Meta    []*common.NoteMeta `protobuf:"bytes,3,rep,name=meta,proto3" json:"meta,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteMetaListRes) Reset() {
	*x = NoteMetaListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteMetaListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteMetaListRes) ProtoMessage() {}

func (x *NoteMetaListRes) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteMetaListRes.ProtoReflect.Descriptor instead.
func (*NoteMetaListRes) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{4}
}

func (x *NoteMetaListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteMetaListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteMetaListRes) GetMeta() []*common.NoteMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *NoteMetaListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteListCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid      int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Userid   int64             `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Tag      string            `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	Status   int64             `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	NoteType int64             `protobuf:"varint,6,opt,name=note_type,json=noteType,proto3" json:"note_type,omitempty"`
	Extra    map[string]string `protobuf:"bytes,7,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteListCountReq) Reset() {
	*x = NoteListCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteListCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteListCountReq) ProtoMessage() {}

func (x *NoteListCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteListCountReq.ProtoReflect.Descriptor instead.
func (*NoteListCountReq) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{5}
}

func (x *NoteListCountReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *NoteListCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *NoteListCountReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *NoteListCountReq) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *NoteListCountReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NoteListCountReq) GetNoteType() int64 {
	if x != nil {
		return x.NoteType
	}
	return 0
}

func (x *NoteListCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteListCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteListCountRes) Reset() {
	*x = NoteListCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteListCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteListCountRes) ProtoMessage() {}

func (x *NoteListCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteListCountRes.ProtoReflect.Descriptor instead.
func (*NoteListCountRes) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{6}
}

func (x *NoteListCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteListCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteListCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NoteListCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Nid   int64             `protobuf:"varint,3,opt,name=nid,proto3" json:"nid,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteDataReq) Reset() {
	*x = NoteDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteDataReq) ProtoMessage() {}

func (x *NoteDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteDataReq.ProtoReflect.Descriptor instead.
func (*NoteDataReq) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{7}
}

func (x *NoteDataReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *NoteDataReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *NoteDataReq) GetNid() int64 {
	if x != nil {
		return x.Nid
	}
	return 0
}

func (x *NoteDataReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Data    string            `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteDataRes) Reset() {
	*x = NoteDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteDataRes) ProtoMessage() {}

func (x *NoteDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteDataRes.ProtoReflect.Descriptor instead.
func (*NoteDataRes) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{8}
}

func (x *NoteDataRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteDataRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteDataRes) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *NoteDataRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteHtmlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Nid   int64             `protobuf:"varint,3,opt,name=nid,proto3" json:"nid,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteHtmlReq) Reset() {
	*x = NoteHtmlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteHtmlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteHtmlReq) ProtoMessage() {}

func (x *NoteHtmlReq) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteHtmlReq.ProtoReflect.Descriptor instead.
func (*NoteHtmlReq) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{9}
}

func (x *NoteHtmlReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *NoteHtmlReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *NoteHtmlReq) GetNid() int64 {
	if x != nil {
		return x.Nid
	}
	return 0
}

func (x *NoteHtmlReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteHtmlRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Data    string            `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteHtmlRes) Reset() {
	*x = NoteHtmlRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteHtmlRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteHtmlRes) ProtoMessage() {}

func (x *NoteHtmlRes) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteHtmlRes.ProtoReflect.Descriptor instead.
func (*NoteHtmlRes) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{10}
}

func (x *NoteHtmlRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteHtmlRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteHtmlRes) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *NoteHtmlRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteCooperReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Nid    int64             `protobuf:"varint,2,opt,name=nid,proto3" json:"nid,omitempty"`
	Userid int64             `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	User   []string          `protobuf:"bytes,4,rep,name=user,proto3" json:"user,omitempty"`
	Extra  map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteCooperReq) Reset() {
	*x = NoteCooperReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteCooperReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteCooperReq) ProtoMessage() {}

func (x *NoteCooperReq) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteCooperReq.ProtoReflect.Descriptor instead.
func (*NoteCooperReq) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{11}
}

func (x *NoteCooperReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *NoteCooperReq) GetNid() int64 {
	if x != nil {
		return x.Nid
	}
	return 0
}

func (x *NoteCooperReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *NoteCooperReq) GetUser() []string {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *NoteCooperReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteCooperRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	User    []*common.UserInfo `protobuf:"bytes,3,rep,name=user,proto3" json:"user,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteCooperRes) Reset() {
	*x = NoteCooperRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteCooperRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteCooperRes) ProtoMessage() {}

func (x *NoteCooperRes) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteCooperRes.ProtoReflect.Descriptor instead.
func (*NoteCooperRes) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{12}
}

func (x *NoteCooperRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteCooperRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteCooperRes) GetUser() []*common.UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *NoteCooperRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Nid    int64             `protobuf:"varint,2,opt,name=nid,proto3" json:"nid,omitempty"`
	Userid int64             `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Tags   []string          `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Extra  map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteTagReq) Reset() {
	*x = NoteTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTagReq) ProtoMessage() {}

func (x *NoteTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTagReq.ProtoReflect.Descriptor instead.
func (*NoteTagReq) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{13}
}

func (x *NoteTagReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *NoteTagReq) GetNid() int64 {
	if x != nil {
		return x.Nid
	}
	return 0
}

func (x *NoteTagReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *NoteTagReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NoteTagReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteTagRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Tags    []string          `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteTagRes) Reset() {
	*x = NoteTagRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTagRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTagRes) ProtoMessage() {}

func (x *NoteTagRes) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTagRes.ProtoReflect.Descriptor instead.
func (*NoteTagRes) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{14}
}

func (x *NoteTagRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteTagRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteTagRes) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NoteTagRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteBgcolorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Nid     int64             `protobuf:"varint,2,opt,name=nid,proto3" json:"nid,omitempty"`
	Userid  int64             `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Bgcolor string            `protobuf:"bytes,4,opt,name=bgcolor,proto3" json:"bgcolor,omitempty"`
	Extra   map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteBgcolorReq) Reset() {
	*x = NoteBgcolorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteBgcolorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteBgcolorReq) ProtoMessage() {}

func (x *NoteBgcolorReq) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteBgcolorReq.ProtoReflect.Descriptor instead.
func (*NoteBgcolorReq) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{15}
}

func (x *NoteBgcolorReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *NoteBgcolorReq) GetNid() int64 {
	if x != nil {
		return x.Nid
	}
	return 0
}

func (x *NoteBgcolorReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *NoteBgcolorReq) GetBgcolor() string {
	if x != nil {
		return x.Bgcolor
	}
	return ""
}

func (x *NoteBgcolorReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteBgcolorRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Bgcolor string            `protobuf:"bytes,3,opt,name=bgcolor,proto3" json:"bgcolor,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteBgcolorRes) Reset() {
	*x = NoteBgcolorRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteBgcolorRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteBgcolorRes) ProtoMessage() {}

func (x *NoteBgcolorRes) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteBgcolorRes.ProtoReflect.Descriptor instead.
func (*NoteBgcolorRes) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{16}
}

func (x *NoteBgcolorRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteBgcolorRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteBgcolorRes) GetBgcolor() string {
	if x != nil {
		return x.Bgcolor
	}
	return ""
}

func (x *NoteBgcolorRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteTagAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Userid int64             `protobuf:"varint,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Cn     string            `protobuf:"bytes,3,opt,name=cn,proto3" json:"cn,omitempty"`
	Eg     string            `protobuf:"bytes,4,opt,name=eg,proto3" json:"eg,omitempty"`
	Extra  map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteTagAddReq) Reset() {
	*x = NoteTagAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTagAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTagAddReq) ProtoMessage() {}

func (x *NoteTagAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTagAddReq.ProtoReflect.Descriptor instead.
func (*NoteTagAddReq) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{17}
}

func (x *NoteTagAddReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *NoteTagAddReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *NoteTagAddReq) GetCn() string {
	if x != nil {
		return x.Cn
	}
	return ""
}

func (x *NoteTagAddReq) GetEg() string {
	if x != nil {
		return x.Eg
	}
	return ""
}

func (x *NoteTagAddReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteTagAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteTagAddRes) Reset() {
	*x = NoteTagAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTagAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTagAddRes) ProtoMessage() {}

func (x *NoteTagAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTagAddRes.ProtoReflect.Descriptor instead.
func (*NoteTagAddRes) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{18}
}

func (x *NoteTagAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteTagAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteTagAddRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteTagListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	UserId int64             `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Lang   string            `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	Status int64             `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Page   int32             `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32             `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Extra  map[string]string `protobuf:"bytes,7,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteTagListReq) Reset() {
	*x = NoteTagListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTagListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTagListReq) ProtoMessage() {}

func (x *NoteTagListReq) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTagListReq.ProtoReflect.Descriptor instead.
func (*NoteTagListReq) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{19}
}

func (x *NoteTagListReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *NoteTagListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NoteTagListReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *NoteTagListReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NoteTagListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *NoteTagListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *NoteTagListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteTagListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Tags    []*common.NoteTag `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteTagListRes) Reset() {
	*x = NoteTagListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notenode_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTagListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTagListRes) ProtoMessage() {}

func (x *NoteTagListRes) ProtoReflect() protoreflect.Message {
	mi := &file_notenode_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTagListRes.ProtoReflect.Descriptor instead.
func (*NoteTagListRes) Descriptor() ([]byte, []int) {
	return file_notenode_proto_rawDescGZIP(), []int{20}
}

func (x *NoteTagListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteTagListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteTagListRes) GetTags() []*common.NoteTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NoteTagListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_notenode_proto protoreflect.FileDescriptor

var file_notenode_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x15, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x74, 0x6d,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01,
	0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x24,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x02, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xee, 0x01, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x6f, 0x74,
	0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa1, 0x02, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x4e, 0x6f, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6e, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x01, 0x0a,
	0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x4e, 0x6f,
	0x74, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x74, 0x6d,
	0x6c, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe8, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x0d,
	0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x24,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd2, 0x01,
	0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xf0, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x67, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x42,
	0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x67,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x67, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x42, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x67, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01,
	0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x02, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x74,
	0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xeb, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xa3,
	0x05, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x17, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x4e, 0x6f,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x15, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x15, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x74, 0x6d,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x14, 0x2e, 0x6e, 0x6f, 0x74,
	0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65,
	0x42, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x42, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x12, 0x17, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_notenode_proto_rawDescOnce sync.Once
	file_notenode_proto_rawDescData = file_notenode_proto_rawDesc
)

func file_notenode_proto_rawDescGZIP() []byte {
	file_notenode_proto_rawDescOnce.Do(func() {
		file_notenode_proto_rawDescData = protoimpl.X.CompressGZIP(file_notenode_proto_rawDescData)
	})
	return file_notenode_proto_rawDescData
}

var file_notenode_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_notenode_proto_goTypes = []interface{}{
	(*NoteItem)(nil),         // 0: notenode.NoteItem
	(*UpdateNoteReq)(nil),    // 1: notenode.UpdateNoteReq
	(*NoteMetaRes)(nil),      // 2: notenode.NoteMetaRes
	(*NoteMetaListReq)(nil),  // 3: notenode.NoteMetaListReq
	(*NoteMetaListRes)(nil),  // 4: notenode.NoteMetaListRes
	(*NoteListCountReq)(nil), // 5: notenode.NoteListCountReq
	(*NoteListCountRes)(nil), // 6: notenode.NoteListCountRes
	(*NoteDataReq)(nil),      // 7: notenode.NoteDataReq
	(*NoteDataRes)(nil),      // 8: notenode.NoteDataRes
	(*NoteHtmlReq)(nil),      // 9: notenode.NoteHtmlReq
	(*NoteHtmlRes)(nil),      // 10: notenode.NoteHtmlRes
	(*NoteCooperReq)(nil),    // 11: notenode.NoteCooperReq
	(*NoteCooperRes)(nil),    // 12: notenode.NoteCooperRes
	(*NoteTagReq)(nil),       // 13: notenode.NoteTagReq
	(*NoteTagRes)(nil),       // 14: notenode.NoteTagRes
	(*NoteBgcolorReq)(nil),   // 15: notenode.NoteBgcolorReq
	(*NoteBgcolorRes)(nil),   // 16: notenode.NoteBgcolorRes
	(*NoteTagAddReq)(nil),    // 17: notenode.NoteTagAddReq
	(*NoteTagAddRes)(nil),    // 18: notenode.NoteTagAddRes
	(*NoteTagListReq)(nil),   // 19: notenode.NoteTagListReq
	(*NoteTagListRes)(nil),   // 20: notenode.NoteTagListRes
	nil,                      // 21: notenode.UpdateNoteReq.ExtraEntry
	nil,                      // 22: notenode.NoteMetaRes.ExtraEntry
	nil,                      // 23: notenode.NoteMetaListReq.ExtraEntry
	nil,                      // 24: notenode.NoteMetaListRes.ExtraEntry
	nil,                      // 25: notenode.NoteListCountReq.ExtraEntry
	nil,                      // 26: notenode.NoteListCountRes.ExtraEntry
	nil,                      // 27: notenode.NoteDataReq.ExtraEntry
	nil,                      // 28: notenode.NoteDataRes.ExtraEntry
	nil,                      // 29: notenode.NoteHtmlReq.ExtraEntry
	nil,                      // 30: notenode.NoteHtmlRes.ExtraEntry
	nil,                      // 31: notenode.NoteCooperReq.ExtraEntry
	nil,                      // 32: notenode.NoteCooperRes.ExtraEntry
	nil,                      // 33: notenode.NoteTagReq.ExtraEntry
	nil,                      // 34: notenode.NoteTagRes.ExtraEntry
	nil,                      // 35: notenode.NoteBgcolorReq.ExtraEntry
	nil,                      // 36: notenode.NoteBgcolorRes.ExtraEntry
	nil,                      // 37: notenode.NoteTagAddReq.ExtraEntry
	nil,                      // 38: notenode.NoteTagAddRes.ExtraEntry
	nil,                      // 39: notenode.NoteTagListReq.ExtraEntry
	nil,                      // 40: notenode.NoteTagListRes.ExtraEntry
	(*common.Authorize)(nil), // 41: common.Authorize
	(rescode.Code)(0),        // 42: rescode.Code
	(*common.NoteMeta)(nil),  // 43: common.NoteMeta
	(*common.UserInfo)(nil),  // 44: common.UserInfo
	(*common.NoteTag)(nil),   // 45: common.NoteTag
}
var file_notenode_proto_depIdxs = []int32{
	41, // 0: notenode.UpdateNoteReq.auth:type_name -> common.Authorize
	0,  // 1: notenode.UpdateNoteReq.note:type_name -> notenode.NoteItem
	21, // 2: notenode.UpdateNoteReq.extra:type_name -> notenode.UpdateNoteReq.ExtraEntry
	42, // 3: notenode.NoteMetaRes.rescode:type_name -> rescode.Code
	43, // 4: notenode.NoteMetaRes.meta:type_name -> common.NoteMeta
	22, // 5: notenode.NoteMetaRes.extra:type_name -> notenode.NoteMetaRes.ExtraEntry
	41, // 6: notenode.NoteMetaListReq.auth:type_name -> common.Authorize
	23, // 7: notenode.NoteMetaListReq.extra:type_name -> notenode.NoteMetaListReq.ExtraEntry
	42, // 8: notenode.NoteMetaListRes.rescode:type_name -> rescode.Code
	43, // 9: notenode.NoteMetaListRes.meta:type_name -> common.NoteMeta
	24, // 10: notenode.NoteMetaListRes.extra:type_name -> notenode.NoteMetaListRes.ExtraEntry
	41, // 11: notenode.NoteListCountReq.auth:type_name -> common.Authorize
	25, // 12: notenode.NoteListCountReq.extra:type_name -> notenode.NoteListCountReq.ExtraEntry
	42, // 13: notenode.NoteListCountRes.rescode:type_name -> rescode.Code
	26, // 14: notenode.NoteListCountRes.extra:type_name -> notenode.NoteListCountRes.ExtraEntry
	41, // 15: notenode.NoteDataReq.auth:type_name -> common.Authorize
	27, // 16: notenode.NoteDataReq.extra:type_name -> notenode.NoteDataReq.ExtraEntry
	42, // 17: notenode.NoteDataRes.rescode:type_name -> rescode.Code
	28, // 18: notenode.NoteDataRes.extra:type_name -> notenode.NoteDataRes.ExtraEntry
	41, // 19: notenode.NoteHtmlReq.auth:type_name -> common.Authorize
	29, // 20: notenode.NoteHtmlReq.extra:type_name -> notenode.NoteHtmlReq.ExtraEntry
	42, // 21: notenode.NoteHtmlRes.rescode:type_name -> rescode.Code
	30, // 22: notenode.NoteHtmlRes.extra:type_name -> notenode.NoteHtmlRes.ExtraEntry
	41, // 23: notenode.NoteCooperReq.auth:type_name -> common.Authorize
	31, // 24: notenode.NoteCooperReq.extra:type_name -> notenode.NoteCooperReq.ExtraEntry
	42, // 25: notenode.NoteCooperRes.rescode:type_name -> rescode.Code
	44, // 26: notenode.NoteCooperRes.user:type_name -> common.UserInfo
	32, // 27: notenode.NoteCooperRes.extra:type_name -> notenode.NoteCooperRes.ExtraEntry
	41, // 28: notenode.NoteTagReq.auth:type_name -> common.Authorize
	33, // 29: notenode.NoteTagReq.extra:type_name -> notenode.NoteTagReq.ExtraEntry
	42, // 30: notenode.NoteTagRes.rescode:type_name -> rescode.Code
	34, // 31: notenode.NoteTagRes.extra:type_name -> notenode.NoteTagRes.ExtraEntry
	41, // 32: notenode.NoteBgcolorReq.auth:type_name -> common.Authorize
	35, // 33: notenode.NoteBgcolorReq.extra:type_name -> notenode.NoteBgcolorReq.ExtraEntry
	42, // 34: notenode.NoteBgcolorRes.rescode:type_name -> rescode.Code
	36, // 35: notenode.NoteBgcolorRes.extra:type_name -> notenode.NoteBgcolorRes.ExtraEntry
	41, // 36: notenode.NoteTagAddReq.auth:type_name -> common.Authorize
	37, // 37: notenode.NoteTagAddReq.extra:type_name -> notenode.NoteTagAddReq.ExtraEntry
	42, // 38: notenode.NoteTagAddRes.rescode:type_name -> rescode.Code
	38, // 39: notenode.NoteTagAddRes.extra:type_name -> notenode.NoteTagAddRes.ExtraEntry
	41, // 40: notenode.NoteTagListReq.auth:type_name -> common.Authorize
	39, // 41: notenode.NoteTagListReq.extra:type_name -> notenode.NoteTagListReq.ExtraEntry
	42, // 42: notenode.NoteTagListRes.rescode:type_name -> rescode.Code
	45, // 43: notenode.NoteTagListRes.tags:type_name -> common.NoteTag
	40, // 44: notenode.NoteTagListRes.extra:type_name -> notenode.NoteTagListRes.ExtraEntry
	1,  // 45: notenode.NotenodeService.UpdateNote:input_type -> notenode.UpdateNoteReq
	3,  // 46: notenode.NotenodeService.NoteMetaList:input_type -> notenode.NoteMetaListReq
	5,  // 47: notenode.NotenodeService.NoteListCount:input_type -> notenode.NoteListCountReq
	7,  // 48: notenode.NotenodeService.NoteData:input_type -> notenode.NoteDataReq
	9,  // 49: notenode.NotenodeService.NoteHtml:input_type -> notenode.NoteHtmlReq
	11, // 50: notenode.NotenodeService.NoteCooper:input_type -> notenode.NoteCooperReq
	13, // 51: notenode.NotenodeService.NoteTag:input_type -> notenode.NoteTagReq
	15, // 52: notenode.NotenodeService.NoteBgcolor:input_type -> notenode.NoteBgcolorReq
	17, // 53: notenode.NotenodeService.NoteTagAdd:input_type -> notenode.NoteTagAddReq
	19, // 54: notenode.NotenodeService.NoteTagList:input_type -> notenode.NoteTagListReq
	2,  // 55: notenode.NotenodeService.UpdateNote:output_type -> notenode.NoteMetaRes
	4,  // 56: notenode.NotenodeService.NoteMetaList:output_type -> notenode.NoteMetaListRes
	6,  // 57: notenode.NotenodeService.NoteListCount:output_type -> notenode.NoteListCountRes
	8,  // 58: notenode.NotenodeService.NoteData:output_type -> notenode.NoteDataRes
	10, // 59: notenode.NotenodeService.NoteHtml:output_type -> notenode.NoteHtmlRes
	12, // 60: notenode.NotenodeService.NoteCooper:output_type -> notenode.NoteCooperRes
	14, // 61: notenode.NotenodeService.NoteTag:output_type -> notenode.NoteTagRes
	16, // 62: notenode.NotenodeService.NoteBgcolor:output_type -> notenode.NoteBgcolorRes
	18, // 63: notenode.NotenodeService.NoteTagAdd:output_type -> notenode.NoteTagAddRes
	20, // 64: notenode.NotenodeService.NoteTagList:output_type -> notenode.NoteTagListRes
	55, // [55:65] is the sub-list for method output_type
	45, // [45:55] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_notenode_proto_init() }
func file_notenode_proto_init() {
	if File_notenode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_notenode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNoteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteMetaRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteMetaListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteMetaListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteListCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteListCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteHtmlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteHtmlRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteCooperReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteCooperRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTagRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteBgcolorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteBgcolorRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTagAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTagAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTagListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notenode_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTagListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notenode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_notenode_proto_goTypes,
		DependencyIndexes: file_notenode_proto_depIdxs,
		MessageInfos:      file_notenode_proto_msgTypes,
	}.Build()
	File_notenode_proto = out.File
	file_notenode_proto_rawDesc = nil
	file_notenode_proto_goTypes = nil
	file_notenode_proto_depIdxs = nil
}
