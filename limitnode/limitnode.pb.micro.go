// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: limitnode.proto

package limitnode

import (
	_ "common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	_ "rescode"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LimitnodeService service

func NewLimitnodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LimitnodeService service

type LimitnodeService interface {
	// 检查修改试题是否受限
	ModifyTimuLimit(ctx context.Context, in *ModifyTimuLimitReq, opts ...client.CallOption) (*ModifyTimuLimitRes, error)
	// 检查添加试题是否受限
	AddTimuLimit(ctx context.Context, in *AddTimuLimitReq, opts ...client.CallOption) (*AddTimuLimitRes, error)
}

type limitnodeService struct {
	c    client.Client
	name string
}

func NewLimitnodeService(name string, c client.Client) LimitnodeService {
	return &limitnodeService{
		c:    c,
		name: name,
	}
}

func (c *limitnodeService) ModifyTimuLimit(ctx context.Context, in *ModifyTimuLimitReq, opts ...client.CallOption) (*ModifyTimuLimitRes, error) {
	req := c.c.NewRequest(c.name, "LimitnodeService.modify_timu_limit", in)
	out := new(ModifyTimuLimitRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitnodeService) AddTimuLimit(ctx context.Context, in *AddTimuLimitReq, opts ...client.CallOption) (*AddTimuLimitRes, error) {
	req := c.c.NewRequest(c.name, "LimitnodeService.add_timu_limit", in)
	out := new(AddTimuLimitRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LimitnodeService service

type LimitnodeServiceHandler interface {
	// 检查修改试题是否受限
	ModifyTimuLimit(context.Context, *ModifyTimuLimitReq, *ModifyTimuLimitRes) error
	// 检查添加试题是否受限
	AddTimuLimit(context.Context, *AddTimuLimitReq, *AddTimuLimitRes) error
}

func RegisterLimitnodeServiceHandler(s server.Server, hdlr LimitnodeServiceHandler, opts ...server.HandlerOption) error {
	type limitnodeService interface {
		ModifyTimuLimit(ctx context.Context, in *ModifyTimuLimitReq, out *ModifyTimuLimitRes) error
		AddTimuLimit(ctx context.Context, in *AddTimuLimitReq, out *AddTimuLimitRes) error
	}
	type LimitnodeService struct {
		limitnodeService
	}
	h := &limitnodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LimitnodeService{h}, opts...))
}

type limitnodeServiceHandler struct {
	LimitnodeServiceHandler
}

func (h *limitnodeServiceHandler) ModifyTimuLimit(ctx context.Context, in *ModifyTimuLimitReq, out *ModifyTimuLimitRes) error {
	return h.LimitnodeServiceHandler.ModifyTimuLimit(ctx, in, out)
}

func (h *limitnodeServiceHandler) AddTimuLimit(ctx context.Context, in *AddTimuLimitReq, out *AddTimuLimitRes) error {
	return h.LimitnodeServiceHandler.AddTimuLimit(ctx, in, out)
}
