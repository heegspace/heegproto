// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: friendnode.proto

package friendnode

import (
	common "github.com/heegspace/heegproto/common"
	rescode "github.com/heegspace/heegproto/rescode"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Phone string            `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddFriendReq) Reset() {
	*x = AddFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendReq) ProtoMessage() {}

func (x *AddFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendReq.ProtoReflect.Descriptor instead.
func (*AddFriendReq) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{0}
}

func (x *AddFriendReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *AddFriendReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddFriendReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *AddFriendReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddFriendRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddFriendRes) Reset() {
	*x = AddFriendRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendRes) ProtoMessage() {}

func (x *AddFriendRes) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendRes.ProtoReflect.Descriptor instead.
func (*AddFriendRes) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{1}
}

func (x *AddFriendRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddFriendRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddFriendRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AgreeFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Suid  int64             `protobuf:"varint,2,opt,name=suid,proto3" json:"suid,omitempty"` // 用户id
	Uid   int64             `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AgreeFriendReq) Reset() {
	*x = AgreeFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgreeFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgreeFriendReq) ProtoMessage() {}

func (x *AgreeFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgreeFriendReq.ProtoReflect.Descriptor instead.
func (*AgreeFriendReq) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{2}
}

func (x *AgreeFriendReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *AgreeFriendReq) GetSuid() int64 {
	if x != nil {
		return x.Suid
	}
	return 0
}

func (x *AgreeFriendReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AgreeFriendReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AgreeFriendRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AgreeFriendRes) Reset() {
	*x = AgreeFriendRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgreeFriendRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgreeFriendRes) ProtoMessage() {}

func (x *AgreeFriendRes) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgreeFriendRes.ProtoReflect.Descriptor instead.
func (*AgreeFriendRes) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{3}
}

func (x *AgreeFriendRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AgreeFriendRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AgreeFriendRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FriendListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FriendListReq) Reset() {
	*x = FriendListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendListReq) ProtoMessage() {}

func (x *FriendListReq) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendListReq.ProtoReflect.Descriptor instead.
func (*FriendListReq) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{4}
}

func (x *FriendListReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *FriendListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FriendListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FriendItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Note     string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	Account  string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	NickName string `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Avatar   string `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Brithday string `protobuf:"bytes,6,opt,name=brithday,proto3" json:"brithday,omitempty"`
	JoinAt   int64  `protobuf:"varint,7,opt,name=join_at,json=joinAt,proto3" json:"join_at,omitempty"`
}

func (x *FriendItem) Reset() {
	*x = FriendItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendItem) ProtoMessage() {}

func (x *FriendItem) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendItem.ProtoReflect.Descriptor instead.
func (*FriendItem) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{5}
}

func (x *FriendItem) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FriendItem) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *FriendItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *FriendItem) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *FriendItem) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *FriendItem) GetBrithday() string {
	if x != nil {
		return x.Brithday
	}
	return ""
}

func (x *FriendItem) GetJoinAt() int64 {
	if x != nil {
		return x.JoinAt
	}
	return 0
}

type Fgroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort  int64         `protobuf:"varint,1,opt,name=sort,proto3" json:"sort,omitempty"`
	Name  string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Lists []*FriendItem `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
}

func (x *Fgroup) Reset() {
	*x = Fgroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fgroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fgroup) ProtoMessage() {}

func (x *Fgroup) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fgroup.ProtoReflect.Descriptor instead.
func (*Fgroup) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{6}
}

func (x *Fgroup) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Fgroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fgroup) GetLists() []*FriendItem {
	if x != nil {
		return x.Lists
	}
	return nil
}

type Friend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data   []*Fgroup     `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Invite []*FriendItem `protobuf:"bytes,3,rep,name=invite,proto3" json:"invite,omitempty"`
	Blacks []*FriendItem `protobuf:"bytes,4,rep,name=blacks,proto3" json:"blacks,omitempty"`
}

func (x *Friend) Reset() {
	*x = Friend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Friend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Friend) ProtoMessage() {}

func (x *Friend) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Friend.ProtoReflect.Descriptor instead.
func (*Friend) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{7}
}

func (x *Friend) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Friend) GetData() []*Fgroup {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Friend) GetInvite() []*FriendItem {
	if x != nil {
		return x.Invite
	}
	return nil
}

func (x *Friend) GetBlacks() []*FriendItem {
	if x != nil {
		return x.Blacks
	}
	return nil
}

type FriendListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Friends *Friend           `protobuf:"bytes,3,opt,name=friends,proto3" json:"friends,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FriendListRes) Reset() {
	*x = FriendListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendListRes) ProtoMessage() {}

func (x *FriendListRes) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendListRes.ProtoReflect.Descriptor instead.
func (*FriendListRes) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{8}
}

func (x *FriendListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *FriendListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *FriendListRes) GetFriends() *Friend {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *FriendListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CreateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Name  string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateGroupReq) Reset() {
	*x = CreateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReq) ProtoMessage() {}

func (x *CreateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReq.ProtoReflect.Descriptor instead.
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{9}
}

func (x *CreateGroupReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CreateGroupReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CreateGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGroupReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CreateGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateGroupRes) Reset() {
	*x = CreateGroupRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRes) ProtoMessage() {}

func (x *CreateGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRes.ProtoReflect.Descriptor instead.
func (*CreateGroupRes) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{10}
}

func (x *CreateGroupRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CreateGroupRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CreateGroupRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RenameGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid     int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	OldName string            `protobuf:"bytes,3,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	NewName string            `protobuf:"bytes,4,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	Extra   map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RenameGroupReq) Reset() {
	*x = RenameGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameGroupReq) ProtoMessage() {}

func (x *RenameGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameGroupReq.ProtoReflect.Descriptor instead.
func (*RenameGroupReq) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{11}
}

func (x *RenameGroupReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *RenameGroupReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *RenameGroupReq) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *RenameGroupReq) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *RenameGroupReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RenameGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RenameGroupRes) Reset() {
	*x = RenameGroupRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameGroupRes) ProtoMessage() {}

func (x *RenameGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameGroupRes.ProtoReflect.Descriptor instead.
func (*RenameGroupRes) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{12}
}

func (x *RenameGroupRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *RenameGroupRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *RenameGroupRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddFriendNoteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Suid  int64             `protobuf:"varint,2,opt,name=suid,proto3" json:"suid,omitempty"`
	Uid   int64             `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Note  string            `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddFriendNoteReq) Reset() {
	*x = AddFriendNoteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendNoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendNoteReq) ProtoMessage() {}

func (x *AddFriendNoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendNoteReq.ProtoReflect.Descriptor instead.
func (*AddFriendNoteReq) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{13}
}

func (x *AddFriendNoteReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *AddFriendNoteReq) GetSuid() int64 {
	if x != nil {
		return x.Suid
	}
	return 0
}

func (x *AddFriendNoteReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddFriendNoteReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *AddFriendNoteReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddFriendNoteRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddFriendNoteRes) Reset() {
	*x = AddFriendNoteRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendNoteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendNoteRes) ProtoMessage() {}

func (x *AddFriendNoteRes) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendNoteRes.ProtoReflect.Descriptor instead.
func (*AddFriendNoteRes) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{14}
}

func (x *AddFriendNoteRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddFriendNoteRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddFriendNoteRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MoveGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Suid  int64             `protobuf:"varint,2,opt,name=suid,proto3" json:"suid,omitempty"`
	Uid   int64             `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Group string            `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MoveGroupReq) Reset() {
	*x = MoveGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveGroupReq) ProtoMessage() {}

func (x *MoveGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveGroupReq.ProtoReflect.Descriptor instead.
func (*MoveGroupReq) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{15}
}

func (x *MoveGroupReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *MoveGroupReq) GetSuid() int64 {
	if x != nil {
		return x.Suid
	}
	return 0
}

func (x *MoveGroupReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MoveGroupReq) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *MoveGroupReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MoveGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MoveGroupRes) Reset() {
	*x = MoveGroupRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveGroupRes) ProtoMessage() {}

func (x *MoveGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveGroupRes.ProtoReflect.Descriptor instead.
func (*MoveGroupRes) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{16}
}

func (x *MoveGroupRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *MoveGroupRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *MoveGroupRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RemoveFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Suid  int64             `protobuf:"varint,2,opt,name=suid,proto3" json:"suid,omitempty"`
	Uid   int64             `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RemoveFriendReq) Reset() {
	*x = RemoveFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFriendReq) ProtoMessage() {}

func (x *RemoveFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFriendReq.ProtoReflect.Descriptor instead.
func (*RemoveFriendReq) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{17}
}

func (x *RemoveFriendReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *RemoveFriendReq) GetSuid() int64 {
	if x != nil {
		return x.Suid
	}
	return 0
}

func (x *RemoveFriendReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *RemoveFriendReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RemoveFriendRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RemoveFriendRes) Reset() {
	*x = RemoveFriendRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFriendRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFriendRes) ProtoMessage() {}

func (x *RemoveFriendRes) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFriendRes.ProtoReflect.Descriptor instead.
func (*RemoveFriendRes) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveFriendRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *RemoveFriendRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *RemoveFriendRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ShareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid     int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Type    common.ShareType  `protobuf:"varint,3,opt,name=type,proto3,enum=common.ShareType" json:"type,omitempty"` // 共享的类型
	Payload string            `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`                  // 共享元信息
	Extra   map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShareReq) Reset() {
	*x = ShareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareReq) ProtoMessage() {}

func (x *ShareReq) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareReq.ProtoReflect.Descriptor instead.
func (*ShareReq) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{19}
}

func (x *ShareReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ShareReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ShareReq) GetType() common.ShareType {
	if x != nil {
		return x.Type
	}
	return common.ShareType_ShareType_NONE
}

func (x *ShareReq) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *ShareReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ShareRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Meta    string            `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"` // 共享返回数据，如共享的缓存key、有效期等等的组合
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShareRes) Reset() {
	*x = ShareRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareRes) ProtoMessage() {}

func (x *ShareRes) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareRes.ProtoReflect.Descriptor instead.
func (*ShareRes) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{20}
}

func (x *ShareRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *ShareRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ShareRes) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

func (x *ShareRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetShareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid     int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Type    common.ShareType  `protobuf:"varint,3,opt,name=type,proto3,enum=common.ShareType" json:"type,omitempty"` // 共享的类型
	Payload string            `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`                  // 共享元信息
	Extra   map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetShareReq) Reset() {
	*x = GetShareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareReq) ProtoMessage() {}

func (x *GetShareReq) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareReq.ProtoReflect.Descriptor instead.
func (*GetShareReq) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{21}
}

func (x *GetShareReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *GetShareReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetShareReq) GetType() common.ShareType {
	if x != nil {
		return x.Type
	}
	return common.ShareType_ShareType_NONE
}

func (x *GetShareReq) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *GetShareReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetShareRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Type    common.ShareType  `protobuf:"varint,3,opt,name=type,proto3,enum=common.ShareType" json:"type,omitempty"` // 共享的类型
	Payload string            `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`                  // 共享返回数据，如共享的缓存key、有效期等等的组合
	Extra   map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetShareRes) Reset() {
	*x = GetShareRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friendnode_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareRes) ProtoMessage() {}

func (x *GetShareRes) ProtoReflect() protoreflect.Message {
	mi := &file_friendnode_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareRes.ProtoReflect.Descriptor instead.
func (*GetShareRes) Descriptor() ([]byte, []int) {
	return file_friendnode_proto_rawDescGZIP(), []int{22}
}

func (x *GetShareRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GetShareRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetShareRes) GetType() common.ShareType {
	if x != nil {
		return x.Type
	}
	return common.ShareType_ShareType_NONE
}

func (x *GetShareRes) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *GetShareRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_friendnode_proto protoreflect.FileDescriptor

var file_friendnode_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x15,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x01, 0x0a, 0x0c, 0x41,
	0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc4, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01,
	0x0a, 0x0e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x01, 0x0a, 0x0d, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x0a, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x72, 0x69, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x72, 0x69, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e,
	0x41, 0x74, 0x22, 0x5e, 0x0a, 0x06, 0x46, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x06, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x0d,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2c,
	0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3b, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf6, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3d,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3d, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x75,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc4, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xca, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5, 0x01, 0x0a,
	0x08, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x08, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x02, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xd4, 0x05, 0x0a, 0x11,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x42, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12,
	0x18, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x0b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19,
	0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a,
	0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4e,
	0x6f, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x54,
	0x6f, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x4a, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12,
	0x1b, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x05, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x14, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x17,
	0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6e, 0x6f,
	0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_friendnode_proto_rawDescOnce sync.Once
	file_friendnode_proto_rawDescData = file_friendnode_proto_rawDesc
)

func file_friendnode_proto_rawDescGZIP() []byte {
	file_friendnode_proto_rawDescOnce.Do(func() {
		file_friendnode_proto_rawDescData = protoimpl.X.CompressGZIP(file_friendnode_proto_rawDescData)
	})
	return file_friendnode_proto_rawDescData
}

var file_friendnode_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_friendnode_proto_goTypes = []interface{}{
	(*AddFriendReq)(nil),     // 0: friendnode.AddFriendReq
	(*AddFriendRes)(nil),     // 1: friendnode.AddFriendRes
	(*AgreeFriendReq)(nil),   // 2: friendnode.AgreeFriendReq
	(*AgreeFriendRes)(nil),   // 3: friendnode.AgreeFriendRes
	(*FriendListReq)(nil),    // 4: friendnode.FriendListReq
	(*FriendItem)(nil),       // 5: friendnode.FriendItem
	(*Fgroup)(nil),           // 6: friendnode.Fgroup
	(*Friend)(nil),           // 7: friendnode.friend
	(*FriendListRes)(nil),    // 8: friendnode.FriendListRes
	(*CreateGroupReq)(nil),   // 9: friendnode.CreateGroupReq
	(*CreateGroupRes)(nil),   // 10: friendnode.CreateGroupRes
	(*RenameGroupReq)(nil),   // 11: friendnode.RenameGroupReq
	(*RenameGroupRes)(nil),   // 12: friendnode.RenameGroupRes
	(*AddFriendNoteReq)(nil), // 13: friendnode.AddFriendNoteReq
	(*AddFriendNoteRes)(nil), // 14: friendnode.AddFriendNoteRes
	(*MoveGroupReq)(nil),     // 15: friendnode.MoveGroupReq
	(*MoveGroupRes)(nil),     // 16: friendnode.MoveGroupRes
	(*RemoveFriendReq)(nil),  // 17: friendnode.RemoveFriendReq
	(*RemoveFriendRes)(nil),  // 18: friendnode.RemoveFriendRes
	(*ShareReq)(nil),         // 19: friendnode.ShareReq
	(*ShareRes)(nil),         // 20: friendnode.ShareRes
	(*GetShareReq)(nil),      // 21: friendnode.GetShareReq
	(*GetShareRes)(nil),      // 22: friendnode.GetShareRes
	nil,                      // 23: friendnode.AddFriendReq.ExtraEntry
	nil,                      // 24: friendnode.AddFriendRes.ExtraEntry
	nil,                      // 25: friendnode.AgreeFriendReq.ExtraEntry
	nil,                      // 26: friendnode.AgreeFriendRes.ExtraEntry
	nil,                      // 27: friendnode.FriendListReq.ExtraEntry
	nil,                      // 28: friendnode.FriendListRes.ExtraEntry
	nil,                      // 29: friendnode.CreateGroupReq.ExtraEntry
	nil,                      // 30: friendnode.CreateGroupRes.ExtraEntry
	nil,                      // 31: friendnode.RenameGroupReq.ExtraEntry
	nil,                      // 32: friendnode.RenameGroupRes.ExtraEntry
	nil,                      // 33: friendnode.AddFriendNoteReq.ExtraEntry
	nil,                      // 34: friendnode.AddFriendNoteRes.ExtraEntry
	nil,                      // 35: friendnode.MoveGroupReq.ExtraEntry
	nil,                      // 36: friendnode.MoveGroupRes.ExtraEntry
	nil,                      // 37: friendnode.RemoveFriendReq.ExtraEntry
	nil,                      // 38: friendnode.RemoveFriendRes.ExtraEntry
	nil,                      // 39: friendnode.ShareReq.ExtraEntry
	nil,                      // 40: friendnode.ShareRes.ExtraEntry
	nil,                      // 41: friendnode.GetShareReq.ExtraEntry
	nil,                      // 42: friendnode.GetShareRes.ExtraEntry
	(*common.Authorize)(nil), // 43: common.Authorize
	(rescode.Code)(0),        // 44: rescode.Code
	(common.ShareType)(0),    // 45: common.ShareType
}
var file_friendnode_proto_depIdxs = []int32{
	43, // 0: friendnode.AddFriendReq.auth:type_name -> common.Authorize
	23, // 1: friendnode.AddFriendReq.extra:type_name -> friendnode.AddFriendReq.ExtraEntry
	44, // 2: friendnode.AddFriendRes.rescode:type_name -> rescode.Code
	24, // 3: friendnode.AddFriendRes.extra:type_name -> friendnode.AddFriendRes.ExtraEntry
	43, // 4: friendnode.AgreeFriendReq.auth:type_name -> common.Authorize
	25, // 5: friendnode.AgreeFriendReq.extra:type_name -> friendnode.AgreeFriendReq.ExtraEntry
	44, // 6: friendnode.AgreeFriendRes.rescode:type_name -> rescode.Code
	26, // 7: friendnode.AgreeFriendRes.extra:type_name -> friendnode.AgreeFriendRes.ExtraEntry
	43, // 8: friendnode.FriendListReq.auth:type_name -> common.Authorize
	27, // 9: friendnode.FriendListReq.extra:type_name -> friendnode.FriendListReq.ExtraEntry
	5,  // 10: friendnode.Fgroup.lists:type_name -> friendnode.FriendItem
	6,  // 11: friendnode.friend.data:type_name -> friendnode.Fgroup
	5,  // 12: friendnode.friend.invite:type_name -> friendnode.FriendItem
	5,  // 13: friendnode.friend.blacks:type_name -> friendnode.FriendItem
	44, // 14: friendnode.FriendListRes.rescode:type_name -> rescode.Code
	7,  // 15: friendnode.FriendListRes.friends:type_name -> friendnode.friend
	28, // 16: friendnode.FriendListRes.extra:type_name -> friendnode.FriendListRes.ExtraEntry
	43, // 17: friendnode.CreateGroupReq.auth:type_name -> common.Authorize
	29, // 18: friendnode.CreateGroupReq.extra:type_name -> friendnode.CreateGroupReq.ExtraEntry
	44, // 19: friendnode.CreateGroupRes.rescode:type_name -> rescode.Code
	30, // 20: friendnode.CreateGroupRes.extra:type_name -> friendnode.CreateGroupRes.ExtraEntry
	43, // 21: friendnode.RenameGroupReq.auth:type_name -> common.Authorize
	31, // 22: friendnode.RenameGroupReq.extra:type_name -> friendnode.RenameGroupReq.ExtraEntry
	44, // 23: friendnode.RenameGroupRes.rescode:type_name -> rescode.Code
	32, // 24: friendnode.RenameGroupRes.extra:type_name -> friendnode.RenameGroupRes.ExtraEntry
	43, // 25: friendnode.AddFriendNoteReq.auth:type_name -> common.Authorize
	33, // 26: friendnode.AddFriendNoteReq.extra:type_name -> friendnode.AddFriendNoteReq.ExtraEntry
	44, // 27: friendnode.AddFriendNoteRes.rescode:type_name -> rescode.Code
	34, // 28: friendnode.AddFriendNoteRes.extra:type_name -> friendnode.AddFriendNoteRes.ExtraEntry
	43, // 29: friendnode.MoveGroupReq.auth:type_name -> common.Authorize
	35, // 30: friendnode.MoveGroupReq.extra:type_name -> friendnode.MoveGroupReq.ExtraEntry
	44, // 31: friendnode.MoveGroupRes.rescode:type_name -> rescode.Code
	36, // 32: friendnode.MoveGroupRes.extra:type_name -> friendnode.MoveGroupRes.ExtraEntry
	43, // 33: friendnode.RemoveFriendReq.auth:type_name -> common.Authorize
	37, // 34: friendnode.RemoveFriendReq.extra:type_name -> friendnode.RemoveFriendReq.ExtraEntry
	44, // 35: friendnode.RemoveFriendRes.rescode:type_name -> rescode.Code
	38, // 36: friendnode.RemoveFriendRes.extra:type_name -> friendnode.RemoveFriendRes.ExtraEntry
	43, // 37: friendnode.ShareReq.auth:type_name -> common.Authorize
	45, // 38: friendnode.ShareReq.type:type_name -> common.ShareType
	39, // 39: friendnode.ShareReq.extra:type_name -> friendnode.ShareReq.ExtraEntry
	44, // 40: friendnode.ShareRes.rescode:type_name -> rescode.Code
	40, // 41: friendnode.ShareRes.extra:type_name -> friendnode.ShareRes.ExtraEntry
	43, // 42: friendnode.GetShareReq.auth:type_name -> common.Authorize
	45, // 43: friendnode.GetShareReq.type:type_name -> common.ShareType
	41, // 44: friendnode.GetShareReq.extra:type_name -> friendnode.GetShareReq.ExtraEntry
	44, // 45: friendnode.GetShareRes.rescode:type_name -> rescode.Code
	45, // 46: friendnode.GetShareRes.type:type_name -> common.ShareType
	42, // 47: friendnode.GetShareRes.extra:type_name -> friendnode.GetShareRes.ExtraEntry
	0,  // 48: friendnode.FriendnodeService.AddFriends:input_type -> friendnode.AddFriendReq
	2,  // 49: friendnode.FriendnodeService.AgreeFriends:input_type -> friendnode.AgreeFriendReq
	4,  // 50: friendnode.FriendnodeService.FriendsList:input_type -> friendnode.FriendListReq
	9,  // 51: friendnode.FriendnodeService.CreateGroup:input_type -> friendnode.CreateGroupReq
	11, // 52: friendnode.FriendnodeService.RenameGroup:input_type -> friendnode.RenameGroupReq
	13, // 53: friendnode.FriendnodeService.AddNoteFriend:input_type -> friendnode.AddFriendNoteReq
	15, // 54: friendnode.FriendnodeService.MoveToNewGroup:input_type -> friendnode.MoveGroupReq
	17, // 55: friendnode.FriendnodeService.RemoveFriend:input_type -> friendnode.RemoveFriendReq
	19, // 56: friendnode.FriendnodeService.Share:input_type -> friendnode.ShareReq
	21, // 57: friendnode.FriendnodeService.GetShare:input_type -> friendnode.GetShareReq
	1,  // 58: friendnode.FriendnodeService.AddFriends:output_type -> friendnode.AddFriendRes
	3,  // 59: friendnode.FriendnodeService.AgreeFriends:output_type -> friendnode.AgreeFriendRes
	8,  // 60: friendnode.FriendnodeService.FriendsList:output_type -> friendnode.FriendListRes
	10, // 61: friendnode.FriendnodeService.CreateGroup:output_type -> friendnode.CreateGroupRes
	12, // 62: friendnode.FriendnodeService.RenameGroup:output_type -> friendnode.RenameGroupRes
	14, // 63: friendnode.FriendnodeService.AddNoteFriend:output_type -> friendnode.AddFriendNoteRes
	16, // 64: friendnode.FriendnodeService.MoveToNewGroup:output_type -> friendnode.MoveGroupRes
	18, // 65: friendnode.FriendnodeService.RemoveFriend:output_type -> friendnode.RemoveFriendRes
	20, // 66: friendnode.FriendnodeService.Share:output_type -> friendnode.ShareRes
	22, // 67: friendnode.FriendnodeService.GetShare:output_type -> friendnode.GetShareRes
	58, // [58:68] is the sub-list for method output_type
	48, // [48:58] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_friendnode_proto_init() }
func file_friendnode_proto_init() {
	if File_friendnode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_friendnode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgreeFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgreeFriendRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fgroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Friend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameGroupRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendNoteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendNoteRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveGroupRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFriendRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friendnode_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_friendnode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_friendnode_proto_goTypes,
		DependencyIndexes: file_friendnode_proto_depIdxs,
		MessageInfos:      file_friendnode_proto_msgTypes,
	}.Build()
	File_friendnode_proto = out.File
	file_friendnode_proto_rawDesc = nil
	file_friendnode_proto_goTypes = nil
	file_friendnode_proto_depIdxs = nil
}
