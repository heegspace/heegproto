syntax  =  "proto3";
package friendnode;
import "rescode/rescode.proto";
import "common/common.proto";

option go_package="./friendnode";

message AddFriendReq {
    common.Authorize auth = 1;
    int64             uid = 2;
    string            phone = 3;
    map<string,string> extra = 4;
}

message AddFriendRes {
    rescode.Code      rescode = 1;
    string            resmsg = 2;
    map<string,string> extra = 3;
}

message AgreeFriendReq {
    common.Authorize   auth = 1;
    int64              suid = 2; // 用户id
    int64              uid = 3;
    map<string,string> extra = 4;
}

message AgreeFriendRes {
    rescode.Code      rescode = 1;
    string            resmsg = 2;
    map<string,string> extra = 3;
}

message FriendListReq {
    common.Authorize   auth = 1;
    int64              uid = 2;
    map<string,string> extra = 3;
}

message FriendItem {
    int64     uid = 1;
    string    note = 2;
    string    account = 3;
    string    nick_name = 4;
    string    avatar = 5;
    string    brithday = 6;
    int64     join_at = 7;
}

message Fgroup {
    int64             sort = 1;
    string            name = 2;
    repeated FriendItem lists = 3;
}

message friend {
    int64                   total = 1;
    repeated Fgroup         data = 2;
    repeated FriendItem    invite = 3;
    repeated FriendItem    blacks = 4;
}

message FriendListRes {
   rescode.Code          rescode = 1;
   string                resmsg = 2;
   friend                friends = 3;
   map<string,string>    extra = 4;
}

message CreateGroupReq {
    common.Authorize   auth = 1;
    int64              uid = 2;
    string             name = 3;
    map<string,string> extra = 4;
}

message CreateGroupRes {
    rescode.Code      rescode = 1;
    string            resmsg = 2;
    map<string,string> extra = 3;
}

message RenameGroupReq {
    common.Authorize   auth = 1;
    int64              uid = 2;
    string             old_name = 3;
    string             new_name = 4;
    map<string,string> extra = 5;
}

message RenameGroupRes {
    rescode.Code      rescode = 1;
    string            resmsg = 2;
    map<string,string> extra = 3;
}

message AddFriendNoteReq {
    common.Authorize   auth = 1;
    int64              suid = 2;
    int64              uid = 3;
    string             note = 4;
    map<string,string> extra = 5;
}

message AddFriendNoteRes {
    rescode.Code      rescode = 1;
    string            resmsg = 2;
    map<string,string> extra = 3;
}

message MoveGroupReq {
    common.Authorize          auth = 1;
    int64                     suid = 2;
    int64                     uid = 3;
    string                    group = 4;
    map<string,string>        extra = 5;
}

message MoveGroupRes {
    rescode.Code      rescode = 1;
    string            resmsg = 2;
    map<string,string> extra = 3;
}

message RemoveFriendReq {
    common.Authorize   auth = 1;
    int64              suid = 2;
    int64              uid = 3;
    map<string,string> extra = 4;
}

message RemoveFriendRes {
   rescode.Code      rescode = 1;
   string            resmsg = 2;
   map<string,string> extra = 3;
}

message ShareReq {
    common.Authorize    auth = 1;
    int64               uid = 2;
    common.ShareType    type = 3;       // 共享的类型
    string              payload = 4;    // 共享元信息        
    map<string,string>  extra = 5;
}

message ShareRes {
    rescode.Code        rescode = 1;
    string              resmsg = 2;
    string              meta = 3;   // 共享返回数据，如共享的缓存key、有效期等等的组合
    map<string,string>  extra = 4;
}

service FriendnodeService {
	// --------------- 好友接口 ----------- //
	// 添加好友
	rpc  AddFriends(AddFriendReq)  returns (AddFriendRes) {}
	// 同意好友
	rpc  AgreeFriends(AgreeFriendReq)  returns (AgreeFriendRes) {}
	//  请求好友列表
	rpc  FriendsList(FriendListReq)  returns (FriendListRes) {}
	// 添加组
	rpc  CreateGroup(CreateGroupReq)  returns (CreateGroupRes) {}
	// 重命名组
	rpc  RenameGroup(RenameGroupReq)  returns (RenameGroupRes) {}
	// 添加好友备注
	rpc  AddNoteFriend(AddFriendNoteReq)  returns (AddFriendNoteRes) {}  
	// 移动到新的组
	rpc  MoveToNewGroup(MoveGroupReq)  returns (MoveGroupRes) {}
	// 删除好友
	rpc  RemoveFriend(RemoveFriendReq)  returns (RemoveFriendRes) {}
    // 共享
    rpc Share(ShareReq) returns (ShareRes) {}
}