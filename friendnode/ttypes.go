// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package friendnode

import (
	"fmt"
	"math"

	"github.com/heegspace/heegproto/common"
	"github.com/heegspace/heegproto/rescode"
	"github.com/heegspace/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = rescode.GoUnusedProtection__
var _ = common.GoUnusedProtection__
var GoUnusedProtection__ int

type AddFriendReq struct {
	Auth  *common.Authorize `thrift:"auth,1"`
	Uid   int64             `thrift:"uid,2"`
	Phone string            `thrift:"phone,3"`
	Extra map[string]string `thrift:"extra,4"`
}

func NewAddFriendReq() *AddFriendReq {
	return &AddFriendReq{}
}

func (p *AddFriendReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddFriendReq) readField1(iprot thrift.TProtocol) error {
	p.Auth = common.NewAuthorize()
	if err := p.Auth.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Auth)
	}
	return nil
}

func (p *AddFriendReq) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *AddFriendReq) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Phone = v
	}
	return nil
}

func (p *AddFriendReq) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val1 = v
		}
		p.Extra[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *AddFriendReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_friend_req"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Auth != nil {
		if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:auth: %s", p, err)
		}
		if err := p.Auth.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Auth)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:auth: %s", p, err)
		}
	}
	return err
}

func (p *AddFriendReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *AddFriendReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:phone: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return fmt.Errorf("%T.phone (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:phone: %s", p, err)
	}
	return err
}

func (p *AddFriendReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:extra: %s", p, err)
		}
	}
	return err
}

func (p *AddFriendReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendReq(%+v)", *p)
}

type AddFriendRes struct {
	Rescode rescode.Code      `thrift:"rescode,1"`
	Resmsg  string            `thrift:"resmsg,2"`
	Extra   map[string]string `thrift:"extra,3"`
}

func NewAddFriendRes() *AddFriendRes {
	return &AddFriendRes{
		Rescode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *AddFriendRes) IsSetRescode() bool {
	return int64(p.Rescode) != math.MinInt32-1
}

func (p *AddFriendRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddFriendRes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Rescode = rescode.Code(v)
	}
	return nil
}

func (p *AddFriendRes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *AddFriendRes) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val3 = v
		}
		p.Extra[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *AddFriendRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_friend_res"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddFriendRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRescode() {
		if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:rescode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
			return fmt.Errorf("%T.rescode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:rescode: %s", p, err)
		}
	}
	return err
}

func (p *AddFriendRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:resmsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return fmt.Errorf("%T.resmsg (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:resmsg: %s", p, err)
	}
	return err
}

func (p *AddFriendRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:extra: %s", p, err)
		}
	}
	return err
}

func (p *AddFriendRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendRes(%+v)", *p)
}

type AgreeFriendReq struct {
	Auth  *common.Authorize `thrift:"auth,1"`
	Suid  int64             `thrift:"suid,2"`
	Uid   int64             `thrift:"uid,3"`
	Extra map[string]string `thrift:"extra,4"`
}

func NewAgreeFriendReq() *AgreeFriendReq {
	return &AgreeFriendReq{}
}

func (p *AgreeFriendReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AgreeFriendReq) readField1(iprot thrift.TProtocol) error {
	p.Auth = common.NewAuthorize()
	if err := p.Auth.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Auth)
	}
	return nil
}

func (p *AgreeFriendReq) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Suid = v
	}
	return nil
}

func (p *AgreeFriendReq) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *AgreeFriendReq) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val5 = v
		}
		p.Extra[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *AgreeFriendReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("agree_friend_req"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AgreeFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Auth != nil {
		if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:auth: %s", p, err)
		}
		if err := p.Auth.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Auth)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:auth: %s", p, err)
		}
	}
	return err
}

func (p *AgreeFriendReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("suid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:suid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Suid)); err != nil {
		return fmt.Errorf("%T.suid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:suid: %s", p, err)
	}
	return err
}

func (p *AgreeFriendReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:uid: %s", p, err)
	}
	return err
}

func (p *AgreeFriendReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:extra: %s", p, err)
		}
	}
	return err
}

func (p *AgreeFriendReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgreeFriendReq(%+v)", *p)
}

type AgreeFriendRes struct {
	Rescode rescode.Code      `thrift:"rescode,1"`
	Resmsg  string            `thrift:"resmsg,2"`
	Extra   map[string]string `thrift:"extra,3"`
}

func NewAgreeFriendRes() *AgreeFriendRes {
	return &AgreeFriendRes{
		Rescode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *AgreeFriendRes) IsSetRescode() bool {
	return int64(p.Rescode) != math.MinInt32-1
}

func (p *AgreeFriendRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AgreeFriendRes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Rescode = rescode.Code(v)
	}
	return nil
}

func (p *AgreeFriendRes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *AgreeFriendRes) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key6 = v
		}
		var _val7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val7 = v
		}
		p.Extra[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *AgreeFriendRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("agree_friend_res"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AgreeFriendRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRescode() {
		if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:rescode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
			return fmt.Errorf("%T.rescode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:rescode: %s", p, err)
		}
	}
	return err
}

func (p *AgreeFriendRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:resmsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return fmt.Errorf("%T.resmsg (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:resmsg: %s", p, err)
	}
	return err
}

func (p *AgreeFriendRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:extra: %s", p, err)
		}
	}
	return err
}

func (p *AgreeFriendRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgreeFriendRes(%+v)", *p)
}

type FriendListReq struct {
	Auth *common.Authorize `thrift:"auth,1"`
	Uid  int64             `thrift:"uid,2"`
}

func NewFriendListReq() *FriendListReq {
	return &FriendListReq{}
}

func (p *FriendListReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FriendListReq) readField1(iprot thrift.TProtocol) error {
	p.Auth = common.NewAuthorize()
	if err := p.Auth.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Auth)
	}
	return nil
}

func (p *FriendListReq) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *FriendListReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("friend_list_req"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FriendListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Auth != nil {
		if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:auth: %s", p, err)
		}
		if err := p.Auth.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Auth)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:auth: %s", p, err)
		}
	}
	return err
}

func (p *FriendListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *FriendListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendListReq(%+v)", *p)
}

type FriendItem struct {
	Uid      int64  `thrift:"uid,1"`
	Note     string `thrift:"note,2"`
	Account  string `thrift:"account,3"`
	NickName string `thrift:"nick_name,4"`
	Avatar   string `thrift:"avatar,5"`
	Brithday string `thrift:"brithday,6"`
	JoinAt   int64  `thrift:"join_at,7"`
}

func NewFriendItem() *FriendItem {
	return &FriendItem{}
}

func (p *FriendItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FriendItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *FriendItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Note = v
	}
	return nil
}

func (p *FriendItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Account = v
	}
	return nil
}

func (p *FriendItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.NickName = v
	}
	return nil
}

func (p *FriendItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *FriendItem) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Brithday = v
	}
	return nil
}

func (p *FriendItem) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.JoinAt = v
	}
	return nil
}

func (p *FriendItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("friend_item"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FriendItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *FriendItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("note", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:note: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Note)); err != nil {
		return fmt.Errorf("%T.note (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:note: %s", p, err)
	}
	return err
}

func (p *FriendItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("account", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:account: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Account)); err != nil {
		return fmt.Errorf("%T.account (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:account: %s", p, err)
	}
	return err
}

func (p *FriendItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nick_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:nick_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NickName)); err != nil {
		return fmt.Errorf("%T.nick_name (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:nick_name: %s", p, err)
	}
	return err
}

func (p *FriendItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:avatar: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Avatar)); err != nil {
		return fmt.Errorf("%T.avatar (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:avatar: %s", p, err)
	}
	return err
}

func (p *FriendItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("brithday", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:brithday: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Brithday)); err != nil {
		return fmt.Errorf("%T.brithday (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:brithday: %s", p, err)
	}
	return err
}

func (p *FriendItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("join_at", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:join_at: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.JoinAt)); err != nil {
		return fmt.Errorf("%T.join_at (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:join_at: %s", p, err)
	}
	return err
}

func (p *FriendItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendItem(%+v)", *p)
}

type Group struct {
	Sort  int64         `thrift:"sort,1"`
	Name  string        `thrift:"name,2"`
	Lists []*FriendItem `thrift:"lists,3"`
}

func NewGroup() *Group {
	return &Group{}
}

func (p *Group) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Group) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Sort = v
	}
	return nil
}

func (p *Group) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *Group) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Lists = make([]*FriendItem, 0, size)
	for i := 0; i < size; i++ {
		_elem8 := NewFriendItem()
		if err := _elem8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem8)
		}
		p.Lists = append(p.Lists, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Group) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("group"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Group) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sort", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sort: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Sort)); err != nil {
		return fmt.Errorf("%T.sort (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sort: %s", p, err)
	}
	return err
}

func (p *Group) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *Group) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Lists != nil {
		if err := oprot.WriteFieldBegin("lists", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:lists: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lists)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Lists {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:lists: %s", p, err)
		}
	}
	return err
}

func (p *Group) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Group(%+v)", *p)
}

type Friend struct {
	Total  int64         `thrift:"total,1"`
	Data   []*Group      `thrift:"data,2"`
	Invite []*FriendItem `thrift:"invite,3"`
	Blacks []*FriendItem `thrift:"blacks,4"`
}

func NewFriend() *Friend {
	return &Friend{}
}

func (p *Friend) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Friend) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Total = v
	}
	return nil
}

func (p *Friend) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Data = make([]*Group, 0, size)
	for i := 0; i < size; i++ {
		_elem9 := NewGroup()
		if err := _elem9.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem9)
		}
		p.Data = append(p.Data, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Friend) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Invite = make([]*FriendItem, 0, size)
	for i := 0; i < size; i++ {
		_elem10 := NewFriendItem()
		if err := _elem10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem10)
		}
		p.Invite = append(p.Invite, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Friend) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Blacks = make([]*FriendItem, 0, size)
	for i := 0; i < size; i++ {
		_elem11 := NewFriendItem()
		if err := _elem11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem11)
		}
		p.Blacks = append(p.Blacks, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Friend) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("friend"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Friend) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:total: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Total)); err != nil {
		return fmt.Errorf("%T.total (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:total: %s", p, err)
	}
	return err
}

func (p *Friend) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Data != nil {
		if err := oprot.WriteFieldBegin("data", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:data: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Data {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:data: %s", p, err)
		}
	}
	return err
}

func (p *Friend) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Invite != nil {
		if err := oprot.WriteFieldBegin("invite", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:invite: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Invite)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Invite {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:invite: %s", p, err)
		}
	}
	return err
}

func (p *Friend) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Blacks != nil {
		if err := oprot.WriteFieldBegin("blacks", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:blacks: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Blacks)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Blacks {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:blacks: %s", p, err)
		}
	}
	return err
}

func (p *Friend) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Friend(%+v)", *p)
}

type FriendListRes struct {
	Rescode rescode.Code      `thrift:"rescode,1"`
	Resmsg  string            `thrift:"resmsg,2"`
	Friends *Friend           `thrift:"friends,3"`
	Extra   map[string]string `thrift:"extra,4"`
}

func NewFriendListRes() *FriendListRes {
	return &FriendListRes{
		Rescode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *FriendListRes) IsSetRescode() bool {
	return int64(p.Rescode) != math.MinInt32-1
}

func (p *FriendListRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FriendListRes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Rescode = rescode.Code(v)
	}
	return nil
}

func (p *FriendListRes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *FriendListRes) readField3(iprot thrift.TProtocol) error {
	p.Friends = NewFriend()
	if err := p.Friends.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Friends)
	}
	return nil
}

func (p *FriendListRes) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key12 = v
		}
		var _val13 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val13 = v
		}
		p.Extra[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *FriendListRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("friend_list_res"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FriendListRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRescode() {
		if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:rescode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
			return fmt.Errorf("%T.rescode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:rescode: %s", p, err)
		}
	}
	return err
}

func (p *FriendListRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:resmsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return fmt.Errorf("%T.resmsg (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:resmsg: %s", p, err)
	}
	return err
}

func (p *FriendListRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Friends != nil {
		if err := oprot.WriteFieldBegin("friends", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:friends: %s", p, err)
		}
		if err := p.Friends.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Friends)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:friends: %s", p, err)
		}
	}
	return err
}

func (p *FriendListRes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:extra: %s", p, err)
		}
	}
	return err
}

func (p *FriendListRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendListRes(%+v)", *p)
}

type CreateGroupReq struct {
	Auth  *common.Authorize `thrift:"auth,1"`
	Uid   int64             `thrift:"uid,2"`
	Name  string            `thrift:"name,3"`
	Extra map[string]string `thrift:"extra,4"`
}

func NewCreateGroupReq() *CreateGroupReq {
	return &CreateGroupReq{}
}

func (p *CreateGroupReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateGroupReq) readField1(iprot thrift.TProtocol) error {
	p.Auth = common.NewAuthorize()
	if err := p.Auth.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Auth)
	}
	return nil
}

func (p *CreateGroupReq) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *CreateGroupReq) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateGroupReq) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key14 = v
		}
		var _val15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val15 = v
		}
		p.Extra[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *CreateGroupReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_group_req"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateGroupReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Auth != nil {
		if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:auth: %s", p, err)
		}
		if err := p.Auth.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Auth)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:auth: %s", p, err)
		}
	}
	return err
}

func (p *CreateGroupReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *CreateGroupReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:name: %s", p, err)
	}
	return err
}

func (p *CreateGroupReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:extra: %s", p, err)
		}
	}
	return err
}

func (p *CreateGroupReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateGroupReq(%+v)", *p)
}

type CreateGroupRes struct {
	Rescode rescode.Code      `thrift:"rescode,1"`
	Resmsg  string            `thrift:"resmsg,2"`
	Extra   map[string]string `thrift:"extra,3"`
}

func NewCreateGroupRes() *CreateGroupRes {
	return &CreateGroupRes{
		Rescode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *CreateGroupRes) IsSetRescode() bool {
	return int64(p.Rescode) != math.MinInt32-1
}

func (p *CreateGroupRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateGroupRes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Rescode = rescode.Code(v)
	}
	return nil
}

func (p *CreateGroupRes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *CreateGroupRes) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key16 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key16 = v
		}
		var _val17 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val17 = v
		}
		p.Extra[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *CreateGroupRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_group_res"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateGroupRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRescode() {
		if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:rescode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
			return fmt.Errorf("%T.rescode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:rescode: %s", p, err)
		}
	}
	return err
}

func (p *CreateGroupRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:resmsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return fmt.Errorf("%T.resmsg (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:resmsg: %s", p, err)
	}
	return err
}

func (p *CreateGroupRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:extra: %s", p, err)
		}
	}
	return err
}

func (p *CreateGroupRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateGroupRes(%+v)", *p)
}

type RenameGroupReq struct {
	Auth    *common.Authorize `thrift:"auth,1"`
	Uid     int64             `thrift:"uid,2"`
	OldName string            `thrift:"old_name,3"`
	NewName string            `thrift:"new_name,4"`
	Extra   map[string]string `thrift:"extra,5"`
}

func NewRenameGroupReq() *RenameGroupReq {
	return &RenameGroupReq{}
}

func (p *RenameGroupReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenameGroupReq) readField1(iprot thrift.TProtocol) error {
	p.Auth = common.NewAuthorize()
	if err := p.Auth.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Auth)
	}
	return nil
}

func (p *RenameGroupReq) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *RenameGroupReq) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.OldName = v
	}
	return nil
}

func (p *RenameGroupReq) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.NewName = v
	}
	return nil
}

func (p *RenameGroupReq) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key18 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key18 = v
		}
		var _val19 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val19 = v
		}
		p.Extra[_key18] = _val19
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *RenameGroupReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rename_group_req"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RenameGroupReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Auth != nil {
		if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:auth: %s", p, err)
		}
		if err := p.Auth.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Auth)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:auth: %s", p, err)
		}
	}
	return err
}

func (p *RenameGroupReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *RenameGroupReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:old_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OldName)); err != nil {
		return fmt.Errorf("%T.old_name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:old_name: %s", p, err)
	}
	return err
}

func (p *RenameGroupReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:new_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NewName)); err != nil {
		return fmt.Errorf("%T.new_name (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:new_name: %s", p, err)
	}
	return err
}

func (p *RenameGroupReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:extra: %s", p, err)
		}
	}
	return err
}

func (p *RenameGroupReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenameGroupReq(%+v)", *p)
}

type RenameGroupRes struct {
	Rescode rescode.Code      `thrift:"rescode,1"`
	Resmsg  string            `thrift:"resmsg,2"`
	Extra   map[string]string `thrift:"extra,3"`
}

func NewRenameGroupRes() *RenameGroupRes {
	return &RenameGroupRes{
		Rescode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *RenameGroupRes) IsSetRescode() bool {
	return int64(p.Rescode) != math.MinInt32-1
}

func (p *RenameGroupRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenameGroupRes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Rescode = rescode.Code(v)
	}
	return nil
}

func (p *RenameGroupRes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *RenameGroupRes) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key20 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key20 = v
		}
		var _val21 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val21 = v
		}
		p.Extra[_key20] = _val21
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *RenameGroupRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rename_group_res"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RenameGroupRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRescode() {
		if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:rescode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
			return fmt.Errorf("%T.rescode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:rescode: %s", p, err)
		}
	}
	return err
}

func (p *RenameGroupRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:resmsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return fmt.Errorf("%T.resmsg (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:resmsg: %s", p, err)
	}
	return err
}

func (p *RenameGroupRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:extra: %s", p, err)
		}
	}
	return err
}

func (p *RenameGroupRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenameGroupRes(%+v)", *p)
}

type AddFriendNoteReq struct {
	Auth  *common.Authorize `thrift:"auth,1"`
	Suid  int64             `thrift:"suid,2"`
	Uid   int64             `thrift:"uid,3"`
	Note  string            `thrift:"note,4"`
	Extra map[string]string `thrift:"extra,5"`
}

func NewAddFriendNoteReq() *AddFriendNoteReq {
	return &AddFriendNoteReq{}
}

func (p *AddFriendNoteReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddFriendNoteReq) readField1(iprot thrift.TProtocol) error {
	p.Auth = common.NewAuthorize()
	if err := p.Auth.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Auth)
	}
	return nil
}

func (p *AddFriendNoteReq) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Suid = v
	}
	return nil
}

func (p *AddFriendNoteReq) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *AddFriendNoteReq) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Note = v
	}
	return nil
}

func (p *AddFriendNoteReq) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key22 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key22 = v
		}
		var _val23 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val23 = v
		}
		p.Extra[_key22] = _val23
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *AddFriendNoteReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_friend_note_req"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddFriendNoteReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Auth != nil {
		if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:auth: %s", p, err)
		}
		if err := p.Auth.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Auth)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:auth: %s", p, err)
		}
	}
	return err
}

func (p *AddFriendNoteReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("suid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:suid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Suid)); err != nil {
		return fmt.Errorf("%T.suid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:suid: %s", p, err)
	}
	return err
}

func (p *AddFriendNoteReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:uid: %s", p, err)
	}
	return err
}

func (p *AddFriendNoteReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("note", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:note: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Note)); err != nil {
		return fmt.Errorf("%T.note (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:note: %s", p, err)
	}
	return err
}

func (p *AddFriendNoteReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:extra: %s", p, err)
		}
	}
	return err
}

func (p *AddFriendNoteReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendNoteReq(%+v)", *p)
}

type AddFriendNoteRes struct {
	Rescode rescode.Code      `thrift:"rescode,1"`
	Resmsg  string            `thrift:"resmsg,2"`
	Extra   map[string]string `thrift:"extra,3"`
}

func NewAddFriendNoteRes() *AddFriendNoteRes {
	return &AddFriendNoteRes{
		Rescode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *AddFriendNoteRes) IsSetRescode() bool {
	return int64(p.Rescode) != math.MinInt32-1
}

func (p *AddFriendNoteRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddFriendNoteRes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Rescode = rescode.Code(v)
	}
	return nil
}

func (p *AddFriendNoteRes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *AddFriendNoteRes) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key24 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key24 = v
		}
		var _val25 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val25 = v
		}
		p.Extra[_key24] = _val25
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *AddFriendNoteRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_friend_note_res"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddFriendNoteRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRescode() {
		if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:rescode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
			return fmt.Errorf("%T.rescode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:rescode: %s", p, err)
		}
	}
	return err
}

func (p *AddFriendNoteRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:resmsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return fmt.Errorf("%T.resmsg (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:resmsg: %s", p, err)
	}
	return err
}

func (p *AddFriendNoteRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:extra: %s", p, err)
		}
	}
	return err
}

func (p *AddFriendNoteRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendNoteRes(%+v)", *p)
}

type MoveGroupReq struct {
	Auth  *common.Authorize `thrift:"auth,1"`
	Suid  int64             `thrift:"suid,2"`
	Uid   int64             `thrift:"uid,3"`
	Group string            `thrift:"group,4"`
	Extra map[string]string `thrift:"extra,5"`
}

func NewMoveGroupReq() *MoveGroupReq {
	return &MoveGroupReq{}
}

func (p *MoveGroupReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MoveGroupReq) readField1(iprot thrift.TProtocol) error {
	p.Auth = common.NewAuthorize()
	if err := p.Auth.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Auth)
	}
	return nil
}

func (p *MoveGroupReq) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Suid = v
	}
	return nil
}

func (p *MoveGroupReq) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *MoveGroupReq) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Group = v
	}
	return nil
}

func (p *MoveGroupReq) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key26 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key26 = v
		}
		var _val27 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val27 = v
		}
		p.Extra[_key26] = _val27
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *MoveGroupReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("move_group_req"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MoveGroupReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Auth != nil {
		if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:auth: %s", p, err)
		}
		if err := p.Auth.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Auth)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:auth: %s", p, err)
		}
	}
	return err
}

func (p *MoveGroupReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("suid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:suid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Suid)); err != nil {
		return fmt.Errorf("%T.suid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:suid: %s", p, err)
	}
	return err
}

func (p *MoveGroupReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:uid: %s", p, err)
	}
	return err
}

func (p *MoveGroupReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:group: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Group)); err != nil {
		return fmt.Errorf("%T.group (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:group: %s", p, err)
	}
	return err
}

func (p *MoveGroupReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:extra: %s", p, err)
		}
	}
	return err
}

func (p *MoveGroupReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MoveGroupReq(%+v)", *p)
}

type MoveGroupRes struct {
	Rescode rescode.Code      `thrift:"rescode,1"`
	Resmsg  string            `thrift:"resmsg,2"`
	Extra   map[string]string `thrift:"extra,3"`
}

func NewMoveGroupRes() *MoveGroupRes {
	return &MoveGroupRes{
		Rescode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *MoveGroupRes) IsSetRescode() bool {
	return int64(p.Rescode) != math.MinInt32-1
}

func (p *MoveGroupRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MoveGroupRes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Rescode = rescode.Code(v)
	}
	return nil
}

func (p *MoveGroupRes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *MoveGroupRes) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key28 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key28 = v
		}
		var _val29 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val29 = v
		}
		p.Extra[_key28] = _val29
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *MoveGroupRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("move_group_res"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MoveGroupRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRescode() {
		if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:rescode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
			return fmt.Errorf("%T.rescode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:rescode: %s", p, err)
		}
	}
	return err
}

func (p *MoveGroupRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:resmsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return fmt.Errorf("%T.resmsg (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:resmsg: %s", p, err)
	}
	return err
}

func (p *MoveGroupRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:extra: %s", p, err)
		}
	}
	return err
}

func (p *MoveGroupRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MoveGroupRes(%+v)", *p)
}

type RemoveFriendReq struct {
	Auth  *common.Authorize `thrift:"auth,1"`
	Suid  int64             `thrift:"suid,2"`
	Uid   int64             `thrift:"uid,3"`
	Extra map[string]string `thrift:"extra,4"`
}

func NewRemoveFriendReq() *RemoveFriendReq {
	return &RemoveFriendReq{}
}

func (p *RemoveFriendReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveFriendReq) readField1(iprot thrift.TProtocol) error {
	p.Auth = common.NewAuthorize()
	if err := p.Auth.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Auth)
	}
	return nil
}

func (p *RemoveFriendReq) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Suid = v
	}
	return nil
}

func (p *RemoveFriendReq) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *RemoveFriendReq) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key30 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key30 = v
		}
		var _val31 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val31 = v
		}
		p.Extra[_key30] = _val31
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *RemoveFriendReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remove_friend_req"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Auth != nil {
		if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:auth: %s", p, err)
		}
		if err := p.Auth.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Auth)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:auth: %s", p, err)
		}
	}
	return err
}

func (p *RemoveFriendReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("suid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:suid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Suid)); err != nil {
		return fmt.Errorf("%T.suid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:suid: %s", p, err)
	}
	return err
}

func (p *RemoveFriendReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:uid: %s", p, err)
	}
	return err
}

func (p *RemoveFriendReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:extra: %s", p, err)
		}
	}
	return err
}

func (p *RemoveFriendReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveFriendReq(%+v)", *p)
}

type RemoveFriendRes struct {
	Rescode rescode.Code      `thrift:"rescode,1"`
	Resmsg  string            `thrift:"resmsg,2"`
	Extra   map[string]string `thrift:"extra,3"`
}

func NewRemoveFriendRes() *RemoveFriendRes {
	return &RemoveFriendRes{
		Rescode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *RemoveFriendRes) IsSetRescode() bool {
	return int64(p.Rescode) != math.MinInt32-1
}

func (p *RemoveFriendRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RemoveFriendRes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Rescode = rescode.Code(v)
	}
	return nil
}

func (p *RemoveFriendRes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *RemoveFriendRes) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key32 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key32 = v
		}
		var _val33 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val33 = v
		}
		p.Extra[_key32] = _val33
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *RemoveFriendRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remove_friend_res"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RemoveFriendRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRescode() {
		if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:rescode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
			return fmt.Errorf("%T.rescode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:rescode: %s", p, err)
		}
	}
	return err
}

func (p *RemoveFriendRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:resmsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return fmt.Errorf("%T.resmsg (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:resmsg: %s", p, err)
	}
	return err
}

func (p *RemoveFriendRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:extra: %s", p, err)
		}
	}
	return err
}

func (p *RemoveFriendRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveFriendRes(%+v)", *p)
}
