// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: footnode.proto

package protoc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FootnodeService service

func NewFootnodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FootnodeService service

type FootnodeService interface {
	RPCFoot(ctx context.Context, in *RPCFootReq, opts ...client.CallOption) (*RPCFootRes, error)
	HTTPFoot(ctx context.Context, in *HTTPFootReq, opts ...client.CallOption) (*HTTPFootRes, error)
}

type footnodeService struct {
	c    client.Client
	name string
}

func NewFootnodeService(name string, c client.Client) FootnodeService {
	return &footnodeService{
		c:    c,
		name: name,
	}
}

func (c *footnodeService) RPCFoot(ctx context.Context, in *RPCFootReq, opts ...client.CallOption) (*RPCFootRes, error) {
	req := c.c.NewRequest(c.name, "FootnodeService.RPCFoot", in)
	out := new(RPCFootRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *footnodeService) HTTPFoot(ctx context.Context, in *HTTPFootReq, opts ...client.CallOption) (*HTTPFootRes, error) {
	req := c.c.NewRequest(c.name, "FootnodeService.HTTPFoot", in)
	out := new(HTTPFootRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FootnodeService service

type FootnodeServiceHandler interface {
	RPCFoot(context.Context, *RPCFootReq, *RPCFootRes) error
	HTTPFoot(context.Context, *HTTPFootReq, *HTTPFootRes) error
}

func RegisterFootnodeServiceHandler(s server.Server, hdlr FootnodeServiceHandler, opts ...server.HandlerOption) error {
	type footnodeService interface {
		RPCFoot(ctx context.Context, in *RPCFootReq, out *RPCFootRes) error
		HTTPFoot(ctx context.Context, in *HTTPFootReq, out *HTTPFootRes) error
	}
	type FootnodeService struct {
		footnodeService
	}
	h := &footnodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FootnodeService{h}, opts...))
}

type footnodeServiceHandler struct {
	FootnodeServiceHandler
}

func (h *footnodeServiceHandler) RPCFoot(ctx context.Context, in *RPCFootReq, out *RPCFootRes) error {
	return h.FootnodeServiceHandler.RPCFoot(ctx, in, out)
}

func (h *footnodeServiceHandler) HTTPFoot(ctx context.Context, in *HTTPFootReq, out *HTTPFootRes) error {
	return h.FootnodeServiceHandler.HTTPFoot(ctx, in, out)
}
