// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package sensinode

import (
	"bytes"
	"context"
	"fmt"
	"github.com/heegspace/heegproto/common"
	"github.com/heegspace/heegproto/rescode"
	"github.com/heegspace/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = rescode.GoUnusedProtection__
var _ = common.GoUnusedProtection__

// Attributes:
//  - Auth
//  - ID
//  - Reward
//  - Extra
type RefreshModifyRewardReq struct {
	Auth   *common.Authorize `thrift:"auth,1" db:"auth" json:"auth"`
	ID     int64             `thrift:"id,2" db:"id" json:"id"`
	Reward float64           `thrift:"reward,3" db:"reward" json:"reward"`
	Extra  map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshModifyRewardReq() *RefreshModifyRewardReq {
	return &RefreshModifyRewardReq{}
}

var RefreshModifyRewardReq_Auth_DEFAULT *common.Authorize

func (p *RefreshModifyRewardReq) GetAuth() *common.Authorize {
	if !p.IsSetAuth() {
		return RefreshModifyRewardReq_Auth_DEFAULT
	}
	return p.Auth
}

func (p *RefreshModifyRewardReq) GetID() int64 {
	return p.ID
}

func (p *RefreshModifyRewardReq) GetReward() float64 {
	return p.Reward
}

func (p *RefreshModifyRewardReq) GetExtra() map[string]string {
	return p.Extra
}
func (p *RefreshModifyRewardReq) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *RefreshModifyRewardReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RefreshModifyRewardReq) ReadField1(iprot thrift.TProtocol) error {
	p.Auth = &common.Authorize{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *RefreshModifyRewardReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *RefreshModifyRewardReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reward = v
	}
	return nil
}

func (p *RefreshModifyRewardReq) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.Extra[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RefreshModifyRewardReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_modify_reward_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RefreshModifyRewardReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth: ", p), err)
	}
	return err
}

func (p *RefreshModifyRewardReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *RefreshModifyRewardReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reward", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reward: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Reward)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reward (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reward: ", p), err)
	}
	return err
}

func (p *RefreshModifyRewardReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *RefreshModifyRewardReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshModifyRewardReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Code
//  - Extra
type RefreshModifyRewardRes struct {
	Rescode rescode.Code      `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string            `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
	Code    string            `thrift:"code,3" db:"code" json:"code"`
	Extra   map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshModifyRewardRes() *RefreshModifyRewardRes {
	return &RefreshModifyRewardRes{}
}

func (p *RefreshModifyRewardRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *RefreshModifyRewardRes) GetResmsg() string {
	return p.Resmsg
}

func (p *RefreshModifyRewardRes) GetCode() string {
	return p.Code
}

func (p *RefreshModifyRewardRes) GetExtra() map[string]string {
	return p.Extra
}
func (p *RefreshModifyRewardRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RefreshModifyRewardRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *RefreshModifyRewardRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *RefreshModifyRewardRes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *RefreshModifyRewardRes) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val3 = v
		}
		p.Extra[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RefreshModifyRewardRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_modify_reward_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RefreshModifyRewardRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *RefreshModifyRewardRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *RefreshModifyRewardRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err)
	}
	return err
}

func (p *RefreshModifyRewardRes) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *RefreshModifyRewardRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshModifyRewardRes(%+v)", *p)
}

// Attributes:
//  - Auth
//  - Userid
//  - Coin
//  - Extra
type RefreshUserCoinReq struct {
	Auth   *common.Authorize `thrift:"auth,1" db:"auth" json:"auth"`
	Userid int64             `thrift:"userid,2" db:"userid" json:"userid"`
	Coin   float64           `thrift:"coin,3" db:"coin" json:"coin"`
	Extra  map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshUserCoinReq() *RefreshUserCoinReq {
	return &RefreshUserCoinReq{}
}

var RefreshUserCoinReq_Auth_DEFAULT *common.Authorize

func (p *RefreshUserCoinReq) GetAuth() *common.Authorize {
	if !p.IsSetAuth() {
		return RefreshUserCoinReq_Auth_DEFAULT
	}
	return p.Auth
}

func (p *RefreshUserCoinReq) GetUserid() int64 {
	return p.Userid
}

func (p *RefreshUserCoinReq) GetCoin() float64 {
	return p.Coin
}

func (p *RefreshUserCoinReq) GetExtra() map[string]string {
	return p.Extra
}
func (p *RefreshUserCoinReq) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *RefreshUserCoinReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RefreshUserCoinReq) ReadField1(iprot thrift.TProtocol) error {
	p.Auth = &common.Authorize{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *RefreshUserCoinReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *RefreshUserCoinReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Coin = v
	}
	return nil
}

func (p *RefreshUserCoinReq) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val5 = v
		}
		p.Extra[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RefreshUserCoinReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_user_coin_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RefreshUserCoinReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth: ", p), err)
	}
	return err
}

func (p *RefreshUserCoinReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Userid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userid: ", p), err)
	}
	return err
}

func (p *RefreshUserCoinReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("coin", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:coin: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Coin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.coin (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:coin: ", p), err)
	}
	return err
}

func (p *RefreshUserCoinReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *RefreshUserCoinReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshUserCoinReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Code
//  - Extra
type RefreshUserCoinRes struct {
	Rescode rescode.Code      `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string            `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
	Code    string            `thrift:"code,3" db:"code" json:"code"`
	Extra   map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshUserCoinRes() *RefreshUserCoinRes {
	return &RefreshUserCoinRes{}
}

func (p *RefreshUserCoinRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *RefreshUserCoinRes) GetResmsg() string {
	return p.Resmsg
}

func (p *RefreshUserCoinRes) GetCode() string {
	return p.Code
}

func (p *RefreshUserCoinRes) GetExtra() map[string]string {
	return p.Extra
}
func (p *RefreshUserCoinRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RefreshUserCoinRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *RefreshUserCoinRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *RefreshUserCoinRes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *RefreshUserCoinRes) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key6 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key6 = v
		}
		var _val7 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val7 = v
		}
		p.Extra[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RefreshUserCoinRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_user_coin_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RefreshUserCoinRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *RefreshUserCoinRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *RefreshUserCoinRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err)
	}
	return err
}

func (p *RefreshUserCoinRes) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *RefreshUserCoinRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshUserCoinRes(%+v)", *p)
}

// Attributes:
//  - Auth
//  - ID
//  - Reward
//  - Extra
type RefreshAddRewardReq struct {
	Auth   *common.Authorize `thrift:"auth,1" db:"auth" json:"auth"`
	ID     int64             `thrift:"id,2" db:"id" json:"id"`
	Reward float64           `thrift:"reward,3" db:"reward" json:"reward"`
	Extra  map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshAddRewardReq() *RefreshAddRewardReq {
	return &RefreshAddRewardReq{}
}

var RefreshAddRewardReq_Auth_DEFAULT *common.Authorize

func (p *RefreshAddRewardReq) GetAuth() *common.Authorize {
	if !p.IsSetAuth() {
		return RefreshAddRewardReq_Auth_DEFAULT
	}
	return p.Auth
}

func (p *RefreshAddRewardReq) GetID() int64 {
	return p.ID
}

func (p *RefreshAddRewardReq) GetReward() float64 {
	return p.Reward
}

func (p *RefreshAddRewardReq) GetExtra() map[string]string {
	return p.Extra
}
func (p *RefreshAddRewardReq) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *RefreshAddRewardReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RefreshAddRewardReq) ReadField1(iprot thrift.TProtocol) error {
	p.Auth = &common.Authorize{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *RefreshAddRewardReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *RefreshAddRewardReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reward = v
	}
	return nil
}

func (p *RefreshAddRewardReq) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key8 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key8 = v
		}
		var _val9 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val9 = v
		}
		p.Extra[_key8] = _val9
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RefreshAddRewardReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_add_reward_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RefreshAddRewardReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth: ", p), err)
	}
	return err
}

func (p *RefreshAddRewardReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *RefreshAddRewardReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reward", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reward: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Reward)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reward (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reward: ", p), err)
	}
	return err
}

func (p *RefreshAddRewardReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *RefreshAddRewardReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshAddRewardReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Code
//  - Extra
type RefreshAddRewardRes struct {
	Rescode rescode.Code      `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string            `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
	Code    string            `thrift:"code,3" db:"code" json:"code"`
	Extra   map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshAddRewardRes() *RefreshAddRewardRes {
	return &RefreshAddRewardRes{}
}

func (p *RefreshAddRewardRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *RefreshAddRewardRes) GetResmsg() string {
	return p.Resmsg
}

func (p *RefreshAddRewardRes) GetCode() string {
	return p.Code
}

func (p *RefreshAddRewardRes) GetExtra() map[string]string {
	return p.Extra
}
func (p *RefreshAddRewardRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RefreshAddRewardRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *RefreshAddRewardRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *RefreshAddRewardRes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *RefreshAddRewardRes) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key10 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key10 = v
		}
		var _val11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val11 = v
		}
		p.Extra[_key10] = _val11
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RefreshAddRewardRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_add_reward_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RefreshAddRewardRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *RefreshAddRewardRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *RefreshAddRewardRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err)
	}
	return err
}

func (p *RefreshAddRewardRes) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *RefreshAddRewardRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshAddRewardRes(%+v)", *p)
}

// Attributes:
//  - Auth
//  - Iid
//  - Reward
//  - Extra
type RefreshIdentRewardReq struct {
	Auth   *common.Authorize `thrift:"auth,1" db:"auth" json:"auth"`
	Iid    string            `thrift:"iid,2" db:"iid" json:"iid"`
	Reward float64           `thrift:"reward,3" db:"reward" json:"reward"`
	Extra  map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshIdentRewardReq() *RefreshIdentRewardReq {
	return &RefreshIdentRewardReq{}
}

var RefreshIdentRewardReq_Auth_DEFAULT *common.Authorize

func (p *RefreshIdentRewardReq) GetAuth() *common.Authorize {
	if !p.IsSetAuth() {
		return RefreshIdentRewardReq_Auth_DEFAULT
	}
	return p.Auth
}

func (p *RefreshIdentRewardReq) GetIid() string {
	return p.Iid
}

func (p *RefreshIdentRewardReq) GetReward() float64 {
	return p.Reward
}

func (p *RefreshIdentRewardReq) GetExtra() map[string]string {
	return p.Extra
}
func (p *RefreshIdentRewardReq) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *RefreshIdentRewardReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RefreshIdentRewardReq) ReadField1(iprot thrift.TProtocol) error {
	p.Auth = &common.Authorize{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *RefreshIdentRewardReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Iid = v
	}
	return nil
}

func (p *RefreshIdentRewardReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reward = v
	}
	return nil
}

func (p *RefreshIdentRewardReq) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key12 = v
		}
		var _val13 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val13 = v
		}
		p.Extra[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RefreshIdentRewardReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_ident_reward_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RefreshIdentRewardReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth: ", p), err)
	}
	return err
}

func (p *RefreshIdentRewardReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:iid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Iid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:iid: ", p), err)
	}
	return err
}

func (p *RefreshIdentRewardReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reward", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reward: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Reward)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reward (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reward: ", p), err)
	}
	return err
}

func (p *RefreshIdentRewardReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *RefreshIdentRewardReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshIdentRewardReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Code
//  - Extra
type RefreshIdentRewardRes struct {
	Rescode rescode.Code      `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string            `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
	Code    string            `thrift:"code,3" db:"code" json:"code"`
	Extra   map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshIdentRewardRes() *RefreshIdentRewardRes {
	return &RefreshIdentRewardRes{}
}

func (p *RefreshIdentRewardRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *RefreshIdentRewardRes) GetResmsg() string {
	return p.Resmsg
}

func (p *RefreshIdentRewardRes) GetCode() string {
	return p.Code
}

func (p *RefreshIdentRewardRes) GetExtra() map[string]string {
	return p.Extra
}
func (p *RefreshIdentRewardRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RefreshIdentRewardRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *RefreshIdentRewardRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *RefreshIdentRewardRes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *RefreshIdentRewardRes) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key14 = v
		}
		var _val15 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val15 = v
		}
		p.Extra[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RefreshIdentRewardRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_ident_reward_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RefreshIdentRewardRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *RefreshIdentRewardRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *RefreshIdentRewardRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err)
	}
	return err
}

func (p *RefreshIdentRewardRes) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *RefreshIdentRewardRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshIdentRewardRes(%+v)", *p)
}

// Attributes:
//  - Auth
//  - Userid
//  - Level
//  - Extra
type RefreshUserVipReq struct {
	Auth   *common.Authorize `thrift:"auth,1" db:"auth" json:"auth"`
	Userid int64             `thrift:"userid,2" db:"userid" json:"userid"`
	Level  common.VipLevel   `thrift:"level,3" db:"level" json:"level"`
	Extra  map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshUserVipReq() *RefreshUserVipReq {
	return &RefreshUserVipReq{}
}

var RefreshUserVipReq_Auth_DEFAULT *common.Authorize

func (p *RefreshUserVipReq) GetAuth() *common.Authorize {
	if !p.IsSetAuth() {
		return RefreshUserVipReq_Auth_DEFAULT
	}
	return p.Auth
}

func (p *RefreshUserVipReq) GetUserid() int64 {
	return p.Userid
}

func (p *RefreshUserVipReq) GetLevel() common.VipLevel {
	return p.Level
}

func (p *RefreshUserVipReq) GetExtra() map[string]string {
	return p.Extra
}
func (p *RefreshUserVipReq) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *RefreshUserVipReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RefreshUserVipReq) ReadField1(iprot thrift.TProtocol) error {
	p.Auth = &common.Authorize{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *RefreshUserVipReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Userid = v
	}
	return nil
}

func (p *RefreshUserVipReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := common.VipLevel(v)
		p.Level = temp
	}
	return nil
}

func (p *RefreshUserVipReq) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key16 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key16 = v
		}
		var _val17 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val17 = v
		}
		p.Extra[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RefreshUserVipReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_user_vip_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RefreshUserVipReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth: ", p), err)
	}
	return err
}

func (p *RefreshUserVipReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Userid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userid: ", p), err)
	}
	return err
}

func (p *RefreshUserVipReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("level", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.level (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:level: ", p), err)
	}
	return err
}

func (p *RefreshUserVipReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *RefreshUserVipReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshUserVipReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Code
//  - Extra
type RefreshUserVipRes struct {
	Rescode rescode.Code      `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string            `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
	Code    string            `thrift:"code,3" db:"code" json:"code"`
	Extra   map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshUserVipRes() *RefreshUserVipRes {
	return &RefreshUserVipRes{}
}

func (p *RefreshUserVipRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *RefreshUserVipRes) GetResmsg() string {
	return p.Resmsg
}

func (p *RefreshUserVipRes) GetCode() string {
	return p.Code
}

func (p *RefreshUserVipRes) GetExtra() map[string]string {
	return p.Extra
}
func (p *RefreshUserVipRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RefreshUserVipRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *RefreshUserVipRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *RefreshUserVipRes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *RefreshUserVipRes) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key18 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key18 = v
		}
		var _val19 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val19 = v
		}
		p.Extra[_key18] = _val19
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RefreshUserVipRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_user_vip_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RefreshUserVipRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *RefreshUserVipRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *RefreshUserVipRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err)
	}
	return err
}

func (p *RefreshUserVipRes) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *RefreshUserVipRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefreshUserVipRes(%+v)", *p)
}

type SensinodeService interface {
	// Parameters:
	//  - Req
	RefreshModifyReward(ctx context.Context, req *RefreshModifyRewardReq) (r *RefreshModifyRewardRes, err error)
	// Parameters:
	//  - Req
	RefreshAddReward(ctx context.Context, req *RefreshAddRewardReq) (r *RefreshAddRewardRes, err error)
	// Parameters:
	//  - Req
	RefreshUserCoin(ctx context.Context, req *RefreshUserCoinReq) (r *RefreshUserCoinRes, err error)
	// Parameters:
	//  - Req
	RefreshIdentReward(ctx context.Context, req *RefreshIdentRewardReq) (r *RefreshIdentRewardRes, err error)
	// Parameters:
	//  - Req
	RefreshUserVip(ctx context.Context, req *RefreshUserVipReq) (r *RefreshUserVipRes, err error)
}

type SensinodeServiceClient struct {
	c thrift.TClient
}

func NewSensinodeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SensinodeServiceClient {
	return &SensinodeServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSensinodeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SensinodeServiceClient {
	return &SensinodeServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSensinodeServiceClient(c thrift.TClient) *SensinodeServiceClient {
	return &SensinodeServiceClient{
		c: c,
	}
}

func (p *SensinodeServiceClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Req
func (p *SensinodeServiceClient) RefreshModifyReward(ctx context.Context, req *RefreshModifyRewardReq) (r *RefreshModifyRewardRes, err error) {
	var _args20 SensinodeServiceRefreshModifyRewardArgs
	_args20.Req = req
	var _result21 SensinodeServiceRefreshModifyRewardResult
	if err = p.Client_().Call(ctx, "refresh_modify_reward", &_args20, &_result21); err != nil {
		return
	}
	return _result21.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *SensinodeServiceClient) RefreshAddReward(ctx context.Context, req *RefreshAddRewardReq) (r *RefreshAddRewardRes, err error) {
	var _args22 SensinodeServiceRefreshAddRewardArgs
	_args22.Req = req
	var _result23 SensinodeServiceRefreshAddRewardResult
	if err = p.Client_().Call(ctx, "refresh_add_reward", &_args22, &_result23); err != nil {
		return
	}
	return _result23.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *SensinodeServiceClient) RefreshUserCoin(ctx context.Context, req *RefreshUserCoinReq) (r *RefreshUserCoinRes, err error) {
	var _args24 SensinodeServiceRefreshUserCoinArgs
	_args24.Req = req
	var _result25 SensinodeServiceRefreshUserCoinResult
	if err = p.Client_().Call(ctx, "refresh_user_coin", &_args24, &_result25); err != nil {
		return
	}
	return _result25.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *SensinodeServiceClient) RefreshIdentReward(ctx context.Context, req *RefreshIdentRewardReq) (r *RefreshIdentRewardRes, err error) {
	var _args26 SensinodeServiceRefreshIdentRewardArgs
	_args26.Req = req
	var _result27 SensinodeServiceRefreshIdentRewardResult
	if err = p.Client_().Call(ctx, "refresh_ident_reward", &_args26, &_result27); err != nil {
		return
	}
	return _result27.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *SensinodeServiceClient) RefreshUserVip(ctx context.Context, req *RefreshUserVipReq) (r *RefreshUserVipRes, err error) {
	var _args28 SensinodeServiceRefreshUserVipArgs
	_args28.Req = req
	var _result29 SensinodeServiceRefreshUserVipResult
	if err = p.Client_().Call(ctx, "refresh_user_vip", &_args28, &_result29); err != nil {
		return
	}
	return _result29.GetSuccess(), nil
}

type SensinodeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SensinodeService
}

func (p *SensinodeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SensinodeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SensinodeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSensinodeServiceProcessor(handler SensinodeService) *SensinodeServiceProcessor {

	self30 := &SensinodeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self30.processorMap["refresh_modify_reward"] = &sensinodeServiceProcessorRefreshModifyReward{handler: handler}
	self30.processorMap["refresh_add_reward"] = &sensinodeServiceProcessorRefreshAddReward{handler: handler}
	self30.processorMap["refresh_user_coin"] = &sensinodeServiceProcessorRefreshUserCoin{handler: handler}
	self30.processorMap["refresh_ident_reward"] = &sensinodeServiceProcessorRefreshIdentReward{handler: handler}
	self30.processorMap["refresh_user_vip"] = &sensinodeServiceProcessorRefreshUserVip{handler: handler}
	return self30
}

func (p *SensinodeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x31 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x31.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x31

}

type sensinodeServiceProcessorRefreshModifyReward struct {
	handler SensinodeService
}

func (p *sensinodeServiceProcessorRefreshModifyReward) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SensinodeServiceRefreshModifyRewardArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("refresh_modify_reward", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SensinodeServiceRefreshModifyRewardResult{}
	var retval *RefreshModifyRewardRes
	var err2 error
	if retval, err2 = p.handler.RefreshModifyReward(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing refresh_modify_reward: "+err2.Error())
		oprot.WriteMessageBegin("refresh_modify_reward", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("refresh_modify_reward", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sensinodeServiceProcessorRefreshAddReward struct {
	handler SensinodeService
}

func (p *sensinodeServiceProcessorRefreshAddReward) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SensinodeServiceRefreshAddRewardArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("refresh_add_reward", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SensinodeServiceRefreshAddRewardResult{}
	var retval *RefreshAddRewardRes
	var err2 error
	if retval, err2 = p.handler.RefreshAddReward(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing refresh_add_reward: "+err2.Error())
		oprot.WriteMessageBegin("refresh_add_reward", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("refresh_add_reward", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sensinodeServiceProcessorRefreshUserCoin struct {
	handler SensinodeService
}

func (p *sensinodeServiceProcessorRefreshUserCoin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SensinodeServiceRefreshUserCoinArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("refresh_user_coin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SensinodeServiceRefreshUserCoinResult{}
	var retval *RefreshUserCoinRes
	var err2 error
	if retval, err2 = p.handler.RefreshUserCoin(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing refresh_user_coin: "+err2.Error())
		oprot.WriteMessageBegin("refresh_user_coin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("refresh_user_coin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sensinodeServiceProcessorRefreshIdentReward struct {
	handler SensinodeService
}

func (p *sensinodeServiceProcessorRefreshIdentReward) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SensinodeServiceRefreshIdentRewardArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("refresh_ident_reward", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SensinodeServiceRefreshIdentRewardResult{}
	var retval *RefreshIdentRewardRes
	var err2 error
	if retval, err2 = p.handler.RefreshIdentReward(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing refresh_ident_reward: "+err2.Error())
		oprot.WriteMessageBegin("refresh_ident_reward", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("refresh_ident_reward", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sensinodeServiceProcessorRefreshUserVip struct {
	handler SensinodeService
}

func (p *sensinodeServiceProcessorRefreshUserVip) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SensinodeServiceRefreshUserVipArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("refresh_user_vip", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SensinodeServiceRefreshUserVipResult{}
	var retval *RefreshUserVipRes
	var err2 error
	if retval, err2 = p.handler.RefreshUserVip(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing refresh_user_vip: "+err2.Error())
		oprot.WriteMessageBegin("refresh_user_vip", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("refresh_user_vip", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type SensinodeServiceRefreshModifyRewardArgs struct {
	Req *RefreshModifyRewardReq `thrift:"req,1" db:"req" json:"req"`
}

func NewSensinodeServiceRefreshModifyRewardArgs() *SensinodeServiceRefreshModifyRewardArgs {
	return &SensinodeServiceRefreshModifyRewardArgs{}
}

var SensinodeServiceRefreshModifyRewardArgs_Req_DEFAULT *RefreshModifyRewardReq

func (p *SensinodeServiceRefreshModifyRewardArgs) GetReq() *RefreshModifyRewardReq {
	if !p.IsSetReq() {
		return SensinodeServiceRefreshModifyRewardArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SensinodeServiceRefreshModifyRewardArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SensinodeServiceRefreshModifyRewardArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshModifyRewardArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &RefreshModifyRewardReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshModifyRewardArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_modify_reward_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SensinodeServiceRefreshModifyRewardArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *SensinodeServiceRefreshModifyRewardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SensinodeServiceRefreshModifyRewardArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SensinodeServiceRefreshModifyRewardResult struct {
	Success *RefreshModifyRewardRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSensinodeServiceRefreshModifyRewardResult() *SensinodeServiceRefreshModifyRewardResult {
	return &SensinodeServiceRefreshModifyRewardResult{}
}

var SensinodeServiceRefreshModifyRewardResult_Success_DEFAULT *RefreshModifyRewardRes

func (p *SensinodeServiceRefreshModifyRewardResult) GetSuccess() *RefreshModifyRewardRes {
	if !p.IsSetSuccess() {
		return SensinodeServiceRefreshModifyRewardResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SensinodeServiceRefreshModifyRewardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SensinodeServiceRefreshModifyRewardResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshModifyRewardResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RefreshModifyRewardRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshModifyRewardResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_modify_reward_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SensinodeServiceRefreshModifyRewardResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SensinodeServiceRefreshModifyRewardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SensinodeServiceRefreshModifyRewardResult(%+v)", *p)
}

// Attributes:
//  - Req
type SensinodeServiceRefreshAddRewardArgs struct {
	Req *RefreshAddRewardReq `thrift:"req,1" db:"req" json:"req"`
}

func NewSensinodeServiceRefreshAddRewardArgs() *SensinodeServiceRefreshAddRewardArgs {
	return &SensinodeServiceRefreshAddRewardArgs{}
}

var SensinodeServiceRefreshAddRewardArgs_Req_DEFAULT *RefreshAddRewardReq

func (p *SensinodeServiceRefreshAddRewardArgs) GetReq() *RefreshAddRewardReq {
	if !p.IsSetReq() {
		return SensinodeServiceRefreshAddRewardArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SensinodeServiceRefreshAddRewardArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SensinodeServiceRefreshAddRewardArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshAddRewardArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &RefreshAddRewardReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshAddRewardArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_add_reward_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SensinodeServiceRefreshAddRewardArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *SensinodeServiceRefreshAddRewardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SensinodeServiceRefreshAddRewardArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SensinodeServiceRefreshAddRewardResult struct {
	Success *RefreshAddRewardRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSensinodeServiceRefreshAddRewardResult() *SensinodeServiceRefreshAddRewardResult {
	return &SensinodeServiceRefreshAddRewardResult{}
}

var SensinodeServiceRefreshAddRewardResult_Success_DEFAULT *RefreshAddRewardRes

func (p *SensinodeServiceRefreshAddRewardResult) GetSuccess() *RefreshAddRewardRes {
	if !p.IsSetSuccess() {
		return SensinodeServiceRefreshAddRewardResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SensinodeServiceRefreshAddRewardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SensinodeServiceRefreshAddRewardResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshAddRewardResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RefreshAddRewardRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshAddRewardResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_add_reward_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SensinodeServiceRefreshAddRewardResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SensinodeServiceRefreshAddRewardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SensinodeServiceRefreshAddRewardResult(%+v)", *p)
}

// Attributes:
//  - Req
type SensinodeServiceRefreshUserCoinArgs struct {
	Req *RefreshUserCoinReq `thrift:"req,1" db:"req" json:"req"`
}

func NewSensinodeServiceRefreshUserCoinArgs() *SensinodeServiceRefreshUserCoinArgs {
	return &SensinodeServiceRefreshUserCoinArgs{}
}

var SensinodeServiceRefreshUserCoinArgs_Req_DEFAULT *RefreshUserCoinReq

func (p *SensinodeServiceRefreshUserCoinArgs) GetReq() *RefreshUserCoinReq {
	if !p.IsSetReq() {
		return SensinodeServiceRefreshUserCoinArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SensinodeServiceRefreshUserCoinArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SensinodeServiceRefreshUserCoinArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshUserCoinArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &RefreshUserCoinReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshUserCoinArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_user_coin_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SensinodeServiceRefreshUserCoinArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *SensinodeServiceRefreshUserCoinArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SensinodeServiceRefreshUserCoinArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SensinodeServiceRefreshUserCoinResult struct {
	Success *RefreshUserCoinRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSensinodeServiceRefreshUserCoinResult() *SensinodeServiceRefreshUserCoinResult {
	return &SensinodeServiceRefreshUserCoinResult{}
}

var SensinodeServiceRefreshUserCoinResult_Success_DEFAULT *RefreshUserCoinRes

func (p *SensinodeServiceRefreshUserCoinResult) GetSuccess() *RefreshUserCoinRes {
	if !p.IsSetSuccess() {
		return SensinodeServiceRefreshUserCoinResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SensinodeServiceRefreshUserCoinResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SensinodeServiceRefreshUserCoinResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshUserCoinResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RefreshUserCoinRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshUserCoinResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_user_coin_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SensinodeServiceRefreshUserCoinResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SensinodeServiceRefreshUserCoinResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SensinodeServiceRefreshUserCoinResult(%+v)", *p)
}

// Attributes:
//  - Req
type SensinodeServiceRefreshIdentRewardArgs struct {
	Req *RefreshIdentRewardReq `thrift:"req,1" db:"req" json:"req"`
}

func NewSensinodeServiceRefreshIdentRewardArgs() *SensinodeServiceRefreshIdentRewardArgs {
	return &SensinodeServiceRefreshIdentRewardArgs{}
}

var SensinodeServiceRefreshIdentRewardArgs_Req_DEFAULT *RefreshIdentRewardReq

func (p *SensinodeServiceRefreshIdentRewardArgs) GetReq() *RefreshIdentRewardReq {
	if !p.IsSetReq() {
		return SensinodeServiceRefreshIdentRewardArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SensinodeServiceRefreshIdentRewardArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SensinodeServiceRefreshIdentRewardArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshIdentRewardArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &RefreshIdentRewardReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshIdentRewardArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_ident_reward_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SensinodeServiceRefreshIdentRewardArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *SensinodeServiceRefreshIdentRewardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SensinodeServiceRefreshIdentRewardArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SensinodeServiceRefreshIdentRewardResult struct {
	Success *RefreshIdentRewardRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSensinodeServiceRefreshIdentRewardResult() *SensinodeServiceRefreshIdentRewardResult {
	return &SensinodeServiceRefreshIdentRewardResult{}
}

var SensinodeServiceRefreshIdentRewardResult_Success_DEFAULT *RefreshIdentRewardRes

func (p *SensinodeServiceRefreshIdentRewardResult) GetSuccess() *RefreshIdentRewardRes {
	if !p.IsSetSuccess() {
		return SensinodeServiceRefreshIdentRewardResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SensinodeServiceRefreshIdentRewardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SensinodeServiceRefreshIdentRewardResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshIdentRewardResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RefreshIdentRewardRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshIdentRewardResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_ident_reward_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SensinodeServiceRefreshIdentRewardResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SensinodeServiceRefreshIdentRewardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SensinodeServiceRefreshIdentRewardResult(%+v)", *p)
}

// Attributes:
//  - Req
type SensinodeServiceRefreshUserVipArgs struct {
	Req *RefreshUserVipReq `thrift:"req,1" db:"req" json:"req"`
}

func NewSensinodeServiceRefreshUserVipArgs() *SensinodeServiceRefreshUserVipArgs {
	return &SensinodeServiceRefreshUserVipArgs{}
}

var SensinodeServiceRefreshUserVipArgs_Req_DEFAULT *RefreshUserVipReq

func (p *SensinodeServiceRefreshUserVipArgs) GetReq() *RefreshUserVipReq {
	if !p.IsSetReq() {
		return SensinodeServiceRefreshUserVipArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SensinodeServiceRefreshUserVipArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SensinodeServiceRefreshUserVipArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshUserVipArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &RefreshUserVipReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshUserVipArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_user_vip_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SensinodeServiceRefreshUserVipArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *SensinodeServiceRefreshUserVipArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SensinodeServiceRefreshUserVipArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SensinodeServiceRefreshUserVipResult struct {
	Success *RefreshUserVipRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSensinodeServiceRefreshUserVipResult() *SensinodeServiceRefreshUserVipResult {
	return &SensinodeServiceRefreshUserVipResult{}
}

var SensinodeServiceRefreshUserVipResult_Success_DEFAULT *RefreshUserVipRes

func (p *SensinodeServiceRefreshUserVipResult) GetSuccess() *RefreshUserVipRes {
	if !p.IsSetSuccess() {
		return SensinodeServiceRefreshUserVipResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SensinodeServiceRefreshUserVipResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SensinodeServiceRefreshUserVipResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshUserVipResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RefreshUserVipRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SensinodeServiceRefreshUserVipResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("refresh_user_vip_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SensinodeServiceRefreshUserVipResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SensinodeServiceRefreshUserVipResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SensinodeServiceRefreshUserVipResult(%+v)", *p)
}
