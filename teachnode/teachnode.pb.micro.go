// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: teachnode.proto

package teachnode

import (
	_ "github.com/heegspace/heegproto/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	_ "github.com/heegspace/heegproto/rescode"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TeachnodeService service

func NewTeachnodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TeachnodeService service

type TeachnodeService interface {
	// 添加或者根据教师信息
	UpdateTeacher(ctx context.Context, in *UpdateTeacherReq, opts ...client.CallOption) (*UpdateTeacherRes, error)
	// 查询教师信息
	GetTeacher(ctx context.Context, in *FindTeacherReq, opts ...client.CallOption) (*FindTeacherRes, error)
	// 关注/取消关注教师
	FocusTeacher(ctx context.Context, in *FocusTeacherReq, opts ...client.CallOption) (*FocusTeacherRes, error)
}

type teachnodeService struct {
	c    client.Client
	name string
}

func NewTeachnodeService(name string, c client.Client) TeachnodeService {
	return &teachnodeService{
		c:    c,
		name: name,
	}
}

func (c *teachnodeService) UpdateTeacher(ctx context.Context, in *UpdateTeacherReq, opts ...client.CallOption) (*UpdateTeacherRes, error) {
	req := c.c.NewRequest(c.name, "TeachnodeService.update_teacher", in)
	out := new(UpdateTeacherRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachnodeService) GetTeacher(ctx context.Context, in *FindTeacherReq, opts ...client.CallOption) (*FindTeacherRes, error) {
	req := c.c.NewRequest(c.name, "TeachnodeService.get_teacher", in)
	out := new(FindTeacherRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachnodeService) FocusTeacher(ctx context.Context, in *FocusTeacherReq, opts ...client.CallOption) (*FocusTeacherRes, error) {
	req := c.c.NewRequest(c.name, "TeachnodeService.focus_teacher", in)
	out := new(FocusTeacherRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TeachnodeService service

type TeachnodeServiceHandler interface {
	// 添加或者根据教师信息
	UpdateTeacher(context.Context, *UpdateTeacherReq, *UpdateTeacherRes) error
	// 查询教师信息
	GetTeacher(context.Context, *FindTeacherReq, *FindTeacherRes) error
	// 关注/取消关注教师
	FocusTeacher(context.Context, *FocusTeacherReq, *FocusTeacherRes) error
}

func RegisterTeachnodeServiceHandler(s server.Server, hdlr TeachnodeServiceHandler, opts ...server.HandlerOption) error {
	type teachnodeService interface {
		UpdateTeacher(ctx context.Context, in *UpdateTeacherReq, out *UpdateTeacherRes) error
		GetTeacher(ctx context.Context, in *FindTeacherReq, out *FindTeacherRes) error
		FocusTeacher(ctx context.Context, in *FocusTeacherReq, out *FocusTeacherRes) error
	}
	type TeachnodeService struct {
		teachnodeService
	}
	h := &teachnodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TeachnodeService{h}, opts...))
}

type teachnodeServiceHandler struct {
	TeachnodeServiceHandler
}

func (h *teachnodeServiceHandler) UpdateTeacher(ctx context.Context, in *UpdateTeacherReq, out *UpdateTeacherRes) error {
	return h.TeachnodeServiceHandler.UpdateTeacher(ctx, in, out)
}

func (h *teachnodeServiceHandler) GetTeacher(ctx context.Context, in *FindTeacherReq, out *FindTeacherRes) error {
	return h.TeachnodeServiceHandler.GetTeacher(ctx, in, out)
}

func (h *teachnodeServiceHandler) FocusTeacher(ctx context.Context, in *FocusTeacherReq, out *FocusTeacherRes) error {
	return h.TeachnodeServiceHandler.FocusTeacher(ctx, in, out)
}
