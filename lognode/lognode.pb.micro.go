// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: lognode.proto

package lognode

import (
	common "github.com/heegspace/heegproto/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	_ "github.com/heegspace/heegproto/rescode"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LognodeService service

func NewLognodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LognodeService service

type LognodeService interface {
	Log(ctx context.Context, in *LogReq, opts ...client.CallOption) (*common.Response, error)
	CallLog(ctx context.Context, in *CallLogReq, opts ...client.CallOption) (*common.Response, error)
	// 获取日志
	QueryUserLog(ctx context.Context, in *QueryUserLogReq, opts ...client.CallOption) (*QueryUserLogRes, error)
	// 日志数量
	UserLogCount(ctx context.Context, in *UserLogCountReq, opts ...client.CallOption) (*UserLogCountRes, error)
}

type lognodeService struct {
	c    client.Client
	name string
}

func NewLognodeService(name string, c client.Client) LognodeService {
	return &lognodeService{
		c:    c,
		name: name,
	}
}

func (c *lognodeService) Log(ctx context.Context, in *LogReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "LognodeService.log", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lognodeService) CallLog(ctx context.Context, in *CallLogReq, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "LognodeService.call_log", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lognodeService) QueryUserLog(ctx context.Context, in *QueryUserLogReq, opts ...client.CallOption) (*QueryUserLogRes, error) {
	req := c.c.NewRequest(c.name, "LognodeService.query_user_log", in)
	out := new(QueryUserLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lognodeService) UserLogCount(ctx context.Context, in *UserLogCountReq, opts ...client.CallOption) (*UserLogCountRes, error) {
	req := c.c.NewRequest(c.name, "LognodeService.user_log_count", in)
	out := new(UserLogCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LognodeService service

type LognodeServiceHandler interface {
	Log(context.Context, *LogReq, *common.Response) error
	CallLog(context.Context, *CallLogReq, *common.Response) error
	// 获取日志
	QueryUserLog(context.Context, *QueryUserLogReq, *QueryUserLogRes) error
	// 日志数量
	UserLogCount(context.Context, *UserLogCountReq, *UserLogCountRes) error
}

func RegisterLognodeServiceHandler(s server.Server, hdlr LognodeServiceHandler, opts ...server.HandlerOption) error {
	type lognodeService interface {
		Log(ctx context.Context, in *LogReq, out *common.Response) error
		CallLog(ctx context.Context, in *CallLogReq, out *common.Response) error
		QueryUserLog(ctx context.Context, in *QueryUserLogReq, out *QueryUserLogRes) error
		UserLogCount(ctx context.Context, in *UserLogCountReq, out *UserLogCountRes) error
	}
	type LognodeService struct {
		lognodeService
	}
	h := &lognodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LognodeService{h}, opts...))
}

type lognodeServiceHandler struct {
	LognodeServiceHandler
}

func (h *lognodeServiceHandler) Log(ctx context.Context, in *LogReq, out *common.Response) error {
	return h.LognodeServiceHandler.Log(ctx, in, out)
}

func (h *lognodeServiceHandler) CallLog(ctx context.Context, in *CallLogReq, out *common.Response) error {
	return h.LognodeServiceHandler.CallLog(ctx, in, out)
}

func (h *lognodeServiceHandler) QueryUserLog(ctx context.Context, in *QueryUserLogReq, out *QueryUserLogRes) error {
	return h.LognodeServiceHandler.QueryUserLog(ctx, in, out)
}

func (h *lognodeServiceHandler) UserLogCount(ctx context.Context, in *UserLogCountReq, out *UserLogCountRes) error {
	return h.LognodeServiceHandler.UserLogCount(ctx, in, out)
}
