// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package lognode

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/heegspace/heegproto/common"
	"github.com/heegspace/heegproto/rescode"
	"github.com/heegspace/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = rescode.GoUnusedProtection__
var _ = common.GoUnusedProtection__

type LogLevel int64

const (
	LogLevel_INFO  LogLevel = 0
	LogLevel_DEBUG LogLevel = 1
	LogLevel_WARN  LogLevel = 2
	LogLevel_ERROR LogLevel = 3
)

func (p LogLevel) String() string {
	switch p {
	case LogLevel_INFO:
		return "INFO"
	case LogLevel_DEBUG:
		return "DEBUG"
	case LogLevel_WARN:
		return "WARN"
	case LogLevel_ERROR:
		return "ERROR"
	}
	return "<UNSET>"
}

func LogLevelFromString(s string) (LogLevel, error) {
	switch s {
	case "INFO":
		return LogLevel_INFO, nil
	case "DEBUG":
		return LogLevel_DEBUG, nil
	case "WARN":
		return LogLevel_WARN, nil
	case "ERROR":
		return LogLevel_ERROR, nil
	}
	return LogLevel(0), fmt.Errorf("not a valid LogLevel string")
}

func LogLevelPtr(v LogLevel) *LogLevel { return &v }

func (p LogLevel) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *LogLevel) UnmarshalText(text []byte) error {
	q, err := LogLevelFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *LogLevel) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = LogLevel(v)
	return nil
}

func (p *LogLevel) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type LogDesc int64

const (
	LogDesc_CONSOLE LogDesc = 0
	LogDesc_FILE    LogDesc = 1
	LogDesc_DB      LogDesc = 2
)

func (p LogDesc) String() string {
	switch p {
	case LogDesc_CONSOLE:
		return "CONSOLE"
	case LogDesc_FILE:
		return "FILE"
	case LogDesc_DB:
		return "DB"
	}
	return "<UNSET>"
}

func LogDescFromString(s string) (LogDesc, error) {
	switch s {
	case "CONSOLE":
		return LogDesc_CONSOLE, nil
	case "FILE":
		return LogDesc_FILE, nil
	case "DB":
		return LogDesc_DB, nil
	}
	return LogDesc(0), fmt.Errorf("not a valid LogDesc string")
}

func LogDescPtr(v LogDesc) *LogDesc { return &v }

func (p LogDesc) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *LogDesc) UnmarshalText(text []byte) error {
	q, err := LogDescFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *LogDesc) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = LogDesc(v)
	return nil
}

func (p *LogDesc) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - Level
//  - Desc
//  - ServerName
//  - IP
//  - Func
//  - Timestamp
//  - Status
//  - Req
//  - Res
//  - Extra
type CallLogReq struct {
	Level      LogLevel          `thrift:"level,1" db:"level" json:"level"`
	Desc       LogDesc           `thrift:"desc,2" db:"desc" json:"desc"`
	ServerName string            `thrift:"server_name,3" db:"server_name" json:"server_name"`
	IP         string            `thrift:"ip,4" db:"ip" json:"ip"`
	Func       string            `thrift:"func,5" db:"func" json:"func"`
	Timestamp  string            `thrift:"timestamp,6" db:"timestamp" json:"timestamp"`
	Status     string            `thrift:"status,7" db:"status" json:"status"`
	Req        string            `thrift:"req,8" db:"req" json:"req"`
	Res        string            `thrift:"res,9" db:"res" json:"res"`
	Extra      map[string]string `thrift:"extra,10" db:"extra" json:"extra"`
}

func NewCallLogReq() *CallLogReq {
	return &CallLogReq{}
}

func (p *CallLogReq) GetLevel() LogLevel {
	return p.Level
}

func (p *CallLogReq) GetDesc() LogDesc {
	return p.Desc
}

func (p *CallLogReq) GetServerName() string {
	return p.ServerName
}

func (p *CallLogReq) GetIP() string {
	return p.IP
}

func (p *CallLogReq) GetFunc() string {
	return p.Func
}

func (p *CallLogReq) GetTimestamp() string {
	return p.Timestamp
}

func (p *CallLogReq) GetStatus() string {
	return p.Status
}

func (p *CallLogReq) GetReq() string {
	return p.Req
}

func (p *CallLogReq) GetRes() string {
	return p.Res
}

func (p *CallLogReq) GetExtra() map[string]string {
	return p.Extra
}
func (p *CallLogReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CallLogReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := LogLevel(v)
		p.Level = temp
	}
	return nil
}

func (p *CallLogReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := LogDesc(v)
		p.Desc = temp
	}
	return nil
}

func (p *CallLogReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ServerName = v
	}
	return nil
}

func (p *CallLogReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *CallLogReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Func = v
	}
	return nil
}

func (p *CallLogReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *CallLogReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *CallLogReq) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Req = v
	}
	return nil
}

func (p *CallLogReq) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Res = v
	}
	return nil
}

func (p *CallLogReq) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.Extra[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *CallLogReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("call_log_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CallLogReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("level", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.level (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:level: ", p), err)
	}
	return err
}

func (p *CallLogReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("desc", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:desc: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Desc)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.desc (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:desc: ", p), err)
	}
	return err
}

func (p *CallLogReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("server_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:server_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServerName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.server_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:server_name: ", p), err)
	}
	return err
}

func (p *CallLogReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ip: ", p), err)
	}
	return err
}

func (p *CallLogReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("func", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:func: ", p), err)
	}
	if err := oprot.WriteString(string(p.Func)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.func (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:func: ", p), err)
	}
	return err
}

func (p *CallLogReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timestamp: ", p), err)
	}
	if err := oprot.WriteString(string(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timestamp: ", p), err)
	}
	return err
}

func (p *CallLogReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err)
	}
	return err
}

func (p *CallLogReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:req: ", p), err)
	}
	if err := oprot.WriteString(string(p.Req)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.req (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:req: ", p), err)
	}
	return err
}

func (p *CallLogReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("res", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:res: ", p), err)
	}
	if err := oprot.WriteString(string(p.Res)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.res (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:res: ", p), err)
	}
	return err
}

func (p *CallLogReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extra: ", p), err)
	}
	return err
}

func (p *CallLogReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallLogReq(%+v)", *p)
}

// Attributes:
//  - Level
//  - Desc
//  - ServerName
//  - IP
//  - Timestamp
//  - Func
//  - Info
//  - Extra
type LogReq struct {
	Level      LogLevel          `thrift:"level,1" db:"level" json:"level"`
	Desc       LogDesc           `thrift:"desc,2" db:"desc" json:"desc"`
	ServerName string            `thrift:"server_name,3" db:"server_name" json:"server_name"`
	IP         string            `thrift:"ip,4" db:"ip" json:"ip"`
	Timestamp  string            `thrift:"timestamp,5" db:"timestamp" json:"timestamp"`
	Func       string            `thrift:"func,6" db:"func" json:"func"`
	Info       string            `thrift:"info,7" db:"info" json:"info"`
	Extra      map[string]string `thrift:"extra,8" db:"extra" json:"extra"`
}

func NewLogReq() *LogReq {
	return &LogReq{}
}

func (p *LogReq) GetLevel() LogLevel {
	return p.Level
}

func (p *LogReq) GetDesc() LogDesc {
	return p.Desc
}

func (p *LogReq) GetServerName() string {
	return p.ServerName
}

func (p *LogReq) GetIP() string {
	return p.IP
}

func (p *LogReq) GetTimestamp() string {
	return p.Timestamp
}

func (p *LogReq) GetFunc() string {
	return p.Func
}

func (p *LogReq) GetInfo() string {
	return p.Info
}

func (p *LogReq) GetExtra() map[string]string {
	return p.Extra
}
func (p *LogReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LogReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := LogLevel(v)
		p.Level = temp
	}
	return nil
}

func (p *LogReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := LogDesc(v)
		p.Desc = temp
	}
	return nil
}

func (p *LogReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ServerName = v
	}
	return nil
}

func (p *LogReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *LogReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *LogReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Func = v
	}
	return nil
}

func (p *LogReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *LogReq) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val3 = v
		}
		p.Extra[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *LogReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("log_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LogReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("level", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.level (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:level: ", p), err)
	}
	return err
}

func (p *LogReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("desc", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:desc: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Desc)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.desc (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:desc: ", p), err)
	}
	return err
}

func (p *LogReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("server_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:server_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServerName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.server_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:server_name: ", p), err)
	}
	return err
}

func (p *LogReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ip: ", p), err)
	}
	return err
}

func (p *LogReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamp: ", p), err)
	}
	if err := oprot.WriteString(string(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamp: ", p), err)
	}
	return err
}

func (p *LogReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("func", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:func: ", p), err)
	}
	if err := oprot.WriteString(string(p.Func)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.func (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:func: ", p), err)
	}
	return err
}

func (p *LogReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:info: ", p), err)
	}
	return err
}

func (p *LogReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extra: ", p), err)
	}
	return err
}

func (p *LogReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogReq(%+v)", *p)
}

// Attributes:
//  - ID
//  - UID
//  - Username
//  - IP
//  - Country
//  - Province
//  - City
//  - District
//  - Platom
//  - Appid
//  - Info
//  - OldInfo
//  - NewInfo_
//  - Mark
//  - CreateAt
//  - LogType
//  - TypeInfo
type UserLogItem struct {
	ID       int64  `thrift:"id,1" db:"id" json:"id"`
	UID      int64  `thrift:"uid,2" db:"uid" json:"uid"`
	Username string `thrift:"username,3" db:"username" json:"username"`
	IP       string `thrift:"ip,4" db:"ip" json:"ip"`
	Country  string `thrift:"country,5" db:"country" json:"country"`
	Province string `thrift:"province,6" db:"province" json:"province"`
	City     string `thrift:"city,7" db:"city" json:"city"`
	District string `thrift:"district,8" db:"district" json:"district"`
	Platom   string `thrift:"platom,9" db:"platom" json:"platom"`
	Appid    string `thrift:"appid,10" db:"appid" json:"appid"`
	Info     string `thrift:"info,11" db:"info" json:"info"`
	OldInfo  string `thrift:"old_info,12" db:"old_info" json:"old_info"`
	NewInfo_ string `thrift:"new_info,13" db:"new_info" json:"new_info"`
	Mark     string `thrift:"mark,14" db:"mark" json:"mark"`
	CreateAt string `thrift:"create_at,15" db:"create_at" json:"create_at"`
	LogType  int64  `thrift:"log_type,16" db:"log_type" json:"log_type"`
	TypeInfo string `thrift:"type_info,17" db:"type_info" json:"type_info"`
}

func NewUserLogItem() *UserLogItem {
	return &UserLogItem{}
}

func (p *UserLogItem) GetID() int64 {
	return p.ID
}

func (p *UserLogItem) GetUID() int64 {
	return p.UID
}

func (p *UserLogItem) GetUsername() string {
	return p.Username
}

func (p *UserLogItem) GetIP() string {
	return p.IP
}

func (p *UserLogItem) GetCountry() string {
	return p.Country
}

func (p *UserLogItem) GetProvince() string {
	return p.Province
}

func (p *UserLogItem) GetCity() string {
	return p.City
}

func (p *UserLogItem) GetDistrict() string {
	return p.District
}

func (p *UserLogItem) GetPlatom() string {
	return p.Platom
}

func (p *UserLogItem) GetAppid() string {
	return p.Appid
}

func (p *UserLogItem) GetInfo() string {
	return p.Info
}

func (p *UserLogItem) GetOldInfo() string {
	return p.OldInfo
}

func (p *UserLogItem) GetNewInfo_() string {
	return p.NewInfo_
}

func (p *UserLogItem) GetMark() string {
	return p.Mark
}

func (p *UserLogItem) GetCreateAt() string {
	return p.CreateAt
}

func (p *UserLogItem) GetLogType() int64 {
	return p.LogType
}

func (p *UserLogItem) GetTypeInfo() string {
	return p.TypeInfo
}
func (p *UserLogItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField16(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField17(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserLogItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserLogItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *UserLogItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *UserLogItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *UserLogItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Country = v
	}
	return nil
}

func (p *UserLogItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Province = v
	}
	return nil
}

func (p *UserLogItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.City = v
	}
	return nil
}

func (p *UserLogItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.District = v
	}
	return nil
}

func (p *UserLogItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Platom = v
	}
	return nil
}

func (p *UserLogItem) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Appid = v
	}
	return nil
}

func (p *UserLogItem) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *UserLogItem) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.OldInfo = v
	}
	return nil
}

func (p *UserLogItem) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.NewInfo_ = v
	}
	return nil
}

func (p *UserLogItem) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Mark = v
	}
	return nil
}

func (p *UserLogItem) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.CreateAt = v
	}
	return nil
}

func (p *UserLogItem) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.LogType = v
	}
	return nil
}

func (p *UserLogItem) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.TypeInfo = v
	}
	return nil
}

func (p *UserLogItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("user_log_item"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserLogItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:username: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ip: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:country: ", p), err)
	}
	if err := oprot.WriteString(string(p.Country)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.country (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:country: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("province", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:province: ", p), err)
	}
	if err := oprot.WriteString(string(p.Province)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.province (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:province: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("city", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:city: ", p), err)
	}
	if err := oprot.WriteString(string(p.City)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.city (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:city: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("district", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:district: ", p), err)
	}
	if err := oprot.WriteString(string(p.District)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.district (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:district: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("platom", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:platom: ", p), err)
	}
	if err := oprot.WriteString(string(p.Platom)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.platom (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:platom: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appid", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:appid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Appid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appid (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:appid: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:info: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_info", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:old_info: ", p), err)
	}
	if err := oprot.WriteString(string(p.OldInfo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.old_info (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:old_info: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_info", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:new_info: ", p), err)
	}
	if err := oprot.WriteString(string(p.NewInfo_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.new_info (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:new_info: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mark", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:mark: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mark)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mark (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:mark: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_at", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:create_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.CreateAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.create_at (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:create_at: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("log_type", thrift.I64, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:log_type: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LogType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.log_type (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:log_type: ", p), err)
	}
	return err
}

func (p *UserLogItem) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type_info", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:type_info: ", p), err)
	}
	if err := oprot.WriteString(string(p.TypeInfo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type_info (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:type_info: ", p), err)
	}
	return err
}

func (p *UserLogItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLogItem(%+v)", *p)
}

// Attributes:
//  - Auth
//  - ID
//  - UID
//  - LogType
//  - Page
//  - Size
//  - Extra
type QueryUserLogReq struct {
	Auth    *common.Authorize `thrift:"auth,1" db:"auth" json:"auth"`
	ID      int64             `thrift:"id,2" db:"id" json:"id"`
	UID     int64             `thrift:"uid,3" db:"uid" json:"uid"`
	LogType int32             `thrift:"log_type,4" db:"log_type" json:"log_type"`
	Page    int32             `thrift:"page,5" db:"page" json:"page"`
	Size    int32             `thrift:"size,6" db:"size" json:"size"`
	Extra   map[string]string `thrift:"extra,7" db:"extra" json:"extra"`
}

func NewQueryUserLogReq() *QueryUserLogReq {
	return &QueryUserLogReq{}
}

var QueryUserLogReq_Auth_DEFAULT *common.Authorize

func (p *QueryUserLogReq) GetAuth() *common.Authorize {
	if !p.IsSetAuth() {
		return QueryUserLogReq_Auth_DEFAULT
	}
	return p.Auth
}

func (p *QueryUserLogReq) GetID() int64 {
	return p.ID
}

func (p *QueryUserLogReq) GetUID() int64 {
	return p.UID
}

func (p *QueryUserLogReq) GetLogType() int32 {
	return p.LogType
}

func (p *QueryUserLogReq) GetPage() int32 {
	return p.Page
}

func (p *QueryUserLogReq) GetSize() int32 {
	return p.Size
}

func (p *QueryUserLogReq) GetExtra() map[string]string {
	return p.Extra
}
func (p *QueryUserLogReq) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *QueryUserLogReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QueryUserLogReq) ReadField1(iprot thrift.TProtocol) error {
	p.Auth = &common.Authorize{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *QueryUserLogReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *QueryUserLogReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *QueryUserLogReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LogType = v
	}
	return nil
}

func (p *QueryUserLogReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Page = v
	}
	return nil
}

func (p *QueryUserLogReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *QueryUserLogReq) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val5 = v
		}
		p.Extra[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *QueryUserLogReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_user_log_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryUserLogReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth: ", p), err)
	}
	return err
}

func (p *QueryUserLogReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *QueryUserLogReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:uid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:uid: ", p), err)
	}
	return err
}

func (p *QueryUserLogReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("log_type", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:log_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LogType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.log_type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:log_type: ", p), err)
	}
	return err
}

func (p *QueryUserLogReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("page", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:page: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Page)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.page (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:page: ", p), err)
	}
	return err
}

func (p *QueryUserLogReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:size: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.size (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:size: ", p), err)
	}
	return err
}

func (p *QueryUserLogReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extra: ", p), err)
	}
	return err
}

func (p *QueryUserLogReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserLogReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Logs
//  - Extra
type QueryUserLogRes struct {
	Rescode rescode.Code      `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string            `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
	Logs    []*UserLogItem    `thrift:"logs,3" db:"logs" json:"logs"`
	Extra   map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewQueryUserLogRes() *QueryUserLogRes {
	return &QueryUserLogRes{}
}

func (p *QueryUserLogRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *QueryUserLogRes) GetResmsg() string {
	return p.Resmsg
}

func (p *QueryUserLogRes) GetLogs() []*UserLogItem {
	return p.Logs
}

func (p *QueryUserLogRes) GetExtra() map[string]string {
	return p.Extra
}
func (p *QueryUserLogRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QueryUserLogRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *QueryUserLogRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *QueryUserLogRes) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*UserLogItem, 0, size)
	p.Logs = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &UserLogItem{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Logs = append(p.Logs, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryUserLogRes) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key7 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key7 = v
		}
		var _val8 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val8 = v
		}
		p.Extra[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *QueryUserLogRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_user_log_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryUserLogRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *QueryUserLogRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *QueryUserLogRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("logs", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:logs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Logs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Logs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:logs: ", p), err)
	}
	return err
}

func (p *QueryUserLogRes) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *QueryUserLogRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserLogRes(%+v)", *p)
}

// Attributes:
//  - Auth
//  - UID
//  - LogType
//  - Extra
type UserLogCountReq struct {
	Auth    *common.Authorize `thrift:"auth,1" db:"auth" json:"auth"`
	UID     int64             `thrift:"uid,2" db:"uid" json:"uid"`
	LogType int32             `thrift:"log_type,3" db:"log_type" json:"log_type"`
	Extra   map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewUserLogCountReq() *UserLogCountReq {
	return &UserLogCountReq{}
}

var UserLogCountReq_Auth_DEFAULT *common.Authorize

func (p *UserLogCountReq) GetAuth() *common.Authorize {
	if !p.IsSetAuth() {
		return UserLogCountReq_Auth_DEFAULT
	}
	return p.Auth
}

func (p *UserLogCountReq) GetUID() int64 {
	return p.UID
}

func (p *UserLogCountReq) GetLogType() int32 {
	return p.LogType
}

func (p *UserLogCountReq) GetExtra() map[string]string {
	return p.Extra
}
func (p *UserLogCountReq) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *UserLogCountReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserLogCountReq) ReadField1(iprot thrift.TProtocol) error {
	p.Auth = &common.Authorize{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *UserLogCountReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *UserLogCountReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LogType = v
	}
	return nil
}

func (p *UserLogCountReq) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key9 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key9 = v
		}
		var _val10 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val10 = v
		}
		p.Extra[_key9] = _val10
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserLogCountReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("user_log_count_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserLogCountReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth: ", p), err)
	}
	return err
}

func (p *UserLogCountReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err)
	}
	return err
}

func (p *UserLogCountReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("log_type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:log_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LogType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.log_type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:log_type: ", p), err)
	}
	return err
}

func (p *UserLogCountReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *UserLogCountReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLogCountReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Count
//  - Extra
type UserLogCountRes struct {
	Rescode rescode.Code      `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string            `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
	Count   int64             `thrift:"count,3" db:"count" json:"count"`
	Extra   map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewUserLogCountRes() *UserLogCountRes {
	return &UserLogCountRes{}
}

func (p *UserLogCountRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *UserLogCountRes) GetResmsg() string {
	return p.Resmsg
}

func (p *UserLogCountRes) GetCount() int64 {
	return p.Count
}

func (p *UserLogCountRes) GetExtra() map[string]string {
	return p.Extra
}
func (p *UserLogCountRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserLogCountRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *UserLogCountRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *UserLogCountRes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *UserLogCountRes) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key11 = v
		}
		var _val12 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val12 = v
		}
		p.Extra[_key11] = _val12
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserLogCountRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("user_log_count_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserLogCountRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *UserLogCountRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *UserLogCountRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *UserLogCountRes) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err)
	}
	return err
}

func (p *UserLogCountRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLogCountRes(%+v)", *p)
}

type LognodeService interface {
	// Parameters:
	//  - Req
	Log(ctx context.Context, req *LogReq) (err error)
	// Parameters:
	//  - Req
	CallLog(ctx context.Context, req *CallLogReq) (err error)
	// Parameters:
	//  - Req
	QueryUserLog(ctx context.Context, req *QueryUserLogReq) (r *QueryUserLogRes, err error)
	// Parameters:
	//  - Req
	UserLogCount(ctx context.Context, req *UserLogCountReq) (r *UserLogCountRes, err error)
}

type LognodeServiceClient struct {
	c thrift.TClient
}

func NewLognodeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LognodeServiceClient {
	return &LognodeServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewLognodeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LognodeServiceClient {
	return &LognodeServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewLognodeServiceClient(c thrift.TClient) *LognodeServiceClient {
	return &LognodeServiceClient{
		c: c,
	}
}

func (p *LognodeServiceClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Req
func (p *LognodeServiceClient) Log(ctx context.Context, req *LogReq) (err error) {
	var _args13 LognodeServiceLogArgs
	_args13.Req = req
	var _result14 LognodeServiceLogResult
	if err = p.Client_().Call(ctx, "log", &_args13, &_result14); err != nil {
		return
	}
	return nil
}

// Parameters:
//  - Req
func (p *LognodeServiceClient) CallLog(ctx context.Context, req *CallLogReq) (err error) {
	var _args15 LognodeServiceCallLogArgs
	_args15.Req = req
	var _result16 LognodeServiceCallLogResult
	if err = p.Client_().Call(ctx, "call_log", &_args15, &_result16); err != nil {
		return
	}
	return nil
}

// Parameters:
//  - Req
func (p *LognodeServiceClient) QueryUserLog(ctx context.Context, req *QueryUserLogReq) (r *QueryUserLogRes, err error) {
	var _args17 LognodeServiceQueryUserLogArgs
	_args17.Req = req
	var _result18 LognodeServiceQueryUserLogResult
	if err = p.Client_().Call(ctx, "query_user_log", &_args17, &_result18); err != nil {
		return
	}
	return _result18.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *LognodeServiceClient) UserLogCount(ctx context.Context, req *UserLogCountReq) (r *UserLogCountRes, err error) {
	var _args19 LognodeServiceUserLogCountArgs
	_args19.Req = req
	var _result20 LognodeServiceUserLogCountResult
	if err = p.Client_().Call(ctx, "user_log_count", &_args19, &_result20); err != nil {
		return
	}
	return _result20.GetSuccess(), nil
}

type LognodeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      LognodeService
}

func (p *LognodeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LognodeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LognodeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLognodeServiceProcessor(handler LognodeService) *LognodeServiceProcessor {

	self21 := &LognodeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self21.processorMap["log"] = &lognodeServiceProcessorLog{handler: handler}
	self21.processorMap["call_log"] = &lognodeServiceProcessorCallLog{handler: handler}
	self21.processorMap["query_user_log"] = &lognodeServiceProcessorQueryUserLog{handler: handler}
	self21.processorMap["user_log_count"] = &lognodeServiceProcessorUserLogCount{handler: handler}
	return self21
}

func (p *LognodeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x22 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x22.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x22

}

type lognodeServiceProcessorLog struct {
	handler LognodeService
}

func (p *lognodeServiceProcessorLog) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LognodeServiceLogArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("log", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LognodeServiceLogResult{}
	var err2 error
	if err2 = p.handler.Log(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing log: "+err2.Error())
		oprot.WriteMessageBegin("log", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("log", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lognodeServiceProcessorCallLog struct {
	handler LognodeService
}

func (p *lognodeServiceProcessorCallLog) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LognodeServiceCallLogArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("call_log", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LognodeServiceCallLogResult{}
	var err2 error
	if err2 = p.handler.CallLog(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing call_log: "+err2.Error())
		oprot.WriteMessageBegin("call_log", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("call_log", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lognodeServiceProcessorQueryUserLog struct {
	handler LognodeService
}

func (p *lognodeServiceProcessorQueryUserLog) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LognodeServiceQueryUserLogArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("query_user_log", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LognodeServiceQueryUserLogResult{}
	var retval *QueryUserLogRes
	var err2 error
	if retval, err2 = p.handler.QueryUserLog(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_user_log: "+err2.Error())
		oprot.WriteMessageBegin("query_user_log", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("query_user_log", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lognodeServiceProcessorUserLogCount struct {
	handler LognodeService
}

func (p *lognodeServiceProcessorUserLogCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LognodeServiceUserLogCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("user_log_count", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LognodeServiceUserLogCountResult{}
	var retval *UserLogCountRes
	var err2 error
	if retval, err2 = p.handler.UserLogCount(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing user_log_count: "+err2.Error())
		oprot.WriteMessageBegin("user_log_count", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("user_log_count", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type LognodeServiceLogArgs struct {
	Req *LogReq `thrift:"req,1" db:"req" json:"req"`
}

func NewLognodeServiceLogArgs() *LognodeServiceLogArgs {
	return &LognodeServiceLogArgs{}
}

var LognodeServiceLogArgs_Req_DEFAULT *LogReq

func (p *LognodeServiceLogArgs) GetReq() *LogReq {
	if !p.IsSetReq() {
		return LognodeServiceLogArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LognodeServiceLogArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LognodeServiceLogArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LognodeServiceLogArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &LogReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *LognodeServiceLogArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("log_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LognodeServiceLogArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *LognodeServiceLogArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LognodeServiceLogArgs(%+v)", *p)
}

type LognodeServiceLogResult struct {
}

func NewLognodeServiceLogResult() *LognodeServiceLogResult {
	return &LognodeServiceLogResult{}
}

func (p *LognodeServiceLogResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LognodeServiceLogResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("log_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LognodeServiceLogResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LognodeServiceLogResult(%+v)", *p)
}

// Attributes:
//  - Req
type LognodeServiceCallLogArgs struct {
	Req *CallLogReq `thrift:"req,1" db:"req" json:"req"`
}

func NewLognodeServiceCallLogArgs() *LognodeServiceCallLogArgs {
	return &LognodeServiceCallLogArgs{}
}

var LognodeServiceCallLogArgs_Req_DEFAULT *CallLogReq

func (p *LognodeServiceCallLogArgs) GetReq() *CallLogReq {
	if !p.IsSetReq() {
		return LognodeServiceCallLogArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LognodeServiceCallLogArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LognodeServiceCallLogArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LognodeServiceCallLogArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &CallLogReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *LognodeServiceCallLogArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("call_log_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LognodeServiceCallLogArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *LognodeServiceCallLogArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LognodeServiceCallLogArgs(%+v)", *p)
}

type LognodeServiceCallLogResult struct {
}

func NewLognodeServiceCallLogResult() *LognodeServiceCallLogResult {
	return &LognodeServiceCallLogResult{}
}

func (p *LognodeServiceCallLogResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LognodeServiceCallLogResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("call_log_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LognodeServiceCallLogResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LognodeServiceCallLogResult(%+v)", *p)
}

// Attributes:
//  - Req
type LognodeServiceQueryUserLogArgs struct {
	Req *QueryUserLogReq `thrift:"req,1" db:"req" json:"req"`
}

func NewLognodeServiceQueryUserLogArgs() *LognodeServiceQueryUserLogArgs {
	return &LognodeServiceQueryUserLogArgs{}
}

var LognodeServiceQueryUserLogArgs_Req_DEFAULT *QueryUserLogReq

func (p *LognodeServiceQueryUserLogArgs) GetReq() *QueryUserLogReq {
	if !p.IsSetReq() {
		return LognodeServiceQueryUserLogArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LognodeServiceQueryUserLogArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LognodeServiceQueryUserLogArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LognodeServiceQueryUserLogArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &QueryUserLogReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *LognodeServiceQueryUserLogArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_user_log_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LognodeServiceQueryUserLogArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *LognodeServiceQueryUserLogArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LognodeServiceQueryUserLogArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LognodeServiceQueryUserLogResult struct {
	Success *QueryUserLogRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLognodeServiceQueryUserLogResult() *LognodeServiceQueryUserLogResult {
	return &LognodeServiceQueryUserLogResult{}
}

var LognodeServiceQueryUserLogResult_Success_DEFAULT *QueryUserLogRes

func (p *LognodeServiceQueryUserLogResult) GetSuccess() *QueryUserLogRes {
	if !p.IsSetSuccess() {
		return LognodeServiceQueryUserLogResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LognodeServiceQueryUserLogResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LognodeServiceQueryUserLogResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LognodeServiceQueryUserLogResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryUserLogRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LognodeServiceQueryUserLogResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_user_log_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LognodeServiceQueryUserLogResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LognodeServiceQueryUserLogResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LognodeServiceQueryUserLogResult(%+v)", *p)
}

// Attributes:
//  - Req
type LognodeServiceUserLogCountArgs struct {
	Req *UserLogCountReq `thrift:"req,1" db:"req" json:"req"`
}

func NewLognodeServiceUserLogCountArgs() *LognodeServiceUserLogCountArgs {
	return &LognodeServiceUserLogCountArgs{}
}

var LognodeServiceUserLogCountArgs_Req_DEFAULT *UserLogCountReq

func (p *LognodeServiceUserLogCountArgs) GetReq() *UserLogCountReq {
	if !p.IsSetReq() {
		return LognodeServiceUserLogCountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LognodeServiceUserLogCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LognodeServiceUserLogCountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LognodeServiceUserLogCountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserLogCountReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *LognodeServiceUserLogCountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("user_log_count_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LognodeServiceUserLogCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *LognodeServiceUserLogCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LognodeServiceUserLogCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LognodeServiceUserLogCountResult struct {
	Success *UserLogCountRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLognodeServiceUserLogCountResult() *LognodeServiceUserLogCountResult {
	return &LognodeServiceUserLogCountResult{}
}

var LognodeServiceUserLogCountResult_Success_DEFAULT *UserLogCountRes

func (p *LognodeServiceUserLogCountResult) GetSuccess() *UserLogCountRes {
	if !p.IsSetSuccess() {
		return LognodeServiceUserLogCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LognodeServiceUserLogCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LognodeServiceUserLogCountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LognodeServiceUserLogCountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserLogCountRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LognodeServiceUserLogCountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("user_log_count_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LognodeServiceUserLogCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LognodeServiceUserLogCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LognodeServiceUserLogCountResult(%+v)", *p)
}
