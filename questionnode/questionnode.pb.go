// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: questionnode.proto

package questionnode

import (
	common "github.com/heegspace/heegproto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	rescode "github.com/heegspace/heegproto/rescode"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GradeCateAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Grade *common.GradeCate `protobuf:"bytes,3,opt,name=grade,proto3" json:"grade,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeCateAddReq) Reset() {
	*x = GradeCateAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeCateAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeCateAddReq) ProtoMessage() {}

func (x *GradeCateAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeCateAddReq.ProtoReflect.Descriptor instead.
func (*GradeCateAddReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{0}
}

func (x *GradeCateAddReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *GradeCateAddReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GradeCateAddReq) GetGrade() *common.GradeCate {
	if x != nil {
		return x.Grade
	}
	return nil
}

func (x *GradeCateAddReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GradeCateAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeCateAddRes) Reset() {
	*x = GradeCateAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeCateAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeCateAddRes) ProtoMessage() {}

func (x *GradeCateAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeCateAddRes.ProtoReflect.Descriptor instead.
func (*GradeCateAddRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{1}
}

func (x *GradeCateAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GradeCateAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GradeCateAddRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GradeCateCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeCateCountReq) Reset() {
	*x = GradeCateCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeCateCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeCateCountReq) ProtoMessage() {}

func (x *GradeCateCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeCateCountReq.ProtoReflect.Descriptor instead.
func (*GradeCateCountReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{2}
}

func (x *GradeCateCountReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *GradeCateCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GradeCateCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GradeCateCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeCateCountRes) Reset() {
	*x = GradeCateCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeCateCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeCateCountRes) ProtoMessage() {}

func (x *GradeCateCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeCateCountRes.ProtoReflect.Descriptor instead.
func (*GradeCateCountRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{3}
}

func (x *GradeCateCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GradeCateCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GradeCateCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GradeCateCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GradeCateListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Page  int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeCateListReq) Reset() {
	*x = GradeCateListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeCateListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeCateListReq) ProtoMessage() {}

func (x *GradeCateListReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeCateListReq.ProtoReflect.Descriptor instead.
func (*GradeCateListReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{4}
}

func (x *GradeCateListReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *GradeCateListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GradeCateListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GradeCateListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GradeCateListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GradeCateListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code        `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string              `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.GradeCate `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string   `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeCateListRes) Reset() {
	*x = GradeCateListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeCateListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeCateListRes) ProtoMessage() {}

func (x *GradeCateListRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeCateListRes.ProtoReflect.Descriptor instead.
func (*GradeCateListRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{5}
}

func (x *GradeCateListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GradeCateListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GradeCateListRes) GetLists() []*common.GradeCate {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *GradeCateListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type HomeBlackDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid    int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	School int32             `protobuf:"varint,3,opt,name=school,proto3" json:"school,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HomeBlackDataReq) Reset() {
	*x = HomeBlackDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBlackDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBlackDataReq) ProtoMessage() {}

func (x *HomeBlackDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBlackDataReq.ProtoReflect.Descriptor instead.
func (*HomeBlackDataReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{6}
}

func (x *HomeBlackDataReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *HomeBlackDataReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *HomeBlackDataReq) GetSchool() int32 {
	if x != nil {
		return x.School
	}
	return 0
}

func (x *HomeBlackDataReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type HomeBlackDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.SchoolStatic `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string      `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HomeBlackDataRes) Reset() {
	*x = HomeBlackDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBlackDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBlackDataRes) ProtoMessage() {}

func (x *HomeBlackDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBlackDataRes.ProtoReflect.Descriptor instead.
func (*HomeBlackDataRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{7}
}

func (x *HomeBlackDataRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *HomeBlackDataRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *HomeBlackDataRes) GetLists() []*common.SchoolStatic {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *HomeBlackDataRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GradeSubjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Index int32             `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeSubjectReq) Reset() {
	*x = GradeSubjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeSubjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeSubjectReq) ProtoMessage() {}

func (x *GradeSubjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeSubjectReq.ProtoReflect.Descriptor instead.
func (*GradeSubjectReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{8}
}

func (x *GradeSubjectReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *GradeSubjectReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GradeSubjectReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GradeSubjectReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GradeSubjectRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.GradeSubject `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string      `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeSubjectRes) Reset() {
	*x = GradeSubjectRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeSubjectRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeSubjectRes) ProtoMessage() {}

func (x *GradeSubjectRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeSubjectRes.ProtoReflect.Descriptor instead.
func (*GradeSubjectRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{9}
}

func (x *GradeSubjectRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GradeSubjectRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GradeSubjectRes) GetLists() []*common.GradeSubject {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *GradeSubjectRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SchoolRollAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64              `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Roll  *common.SchoolRoll `protobuf:"bytes,3,opt,name=roll,proto3" json:"roll,omitempty"`
	Extra map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchoolRollAddReq) Reset() {
	*x = SchoolRollAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolRollAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolRollAddReq) ProtoMessage() {}

func (x *SchoolRollAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolRollAddReq.ProtoReflect.Descriptor instead.
func (*SchoolRollAddReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{10}
}

func (x *SchoolRollAddReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SchoolRollAddReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SchoolRollAddReq) GetRoll() *common.SchoolRoll {
	if x != nil {
		return x.Roll
	}
	return nil
}

func (x *SchoolRollAddReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SchoolRollAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchoolRollAddRes) Reset() {
	*x = SchoolRollAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolRollAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolRollAddRes) ProtoMessage() {}

func (x *SchoolRollAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolRollAddRes.ProtoReflect.Descriptor instead.
func (*SchoolRollAddRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{11}
}

func (x *SchoolRollAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SchoolRollAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SchoolRollAddRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SchoolRollCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchoolRollCountReq) Reset() {
	*x = SchoolRollCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolRollCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolRollCountReq) ProtoMessage() {}

func (x *SchoolRollCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolRollCountReq.ProtoReflect.Descriptor instead.
func (*SchoolRollCountReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{12}
}

func (x *SchoolRollCountReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SchoolRollCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SchoolRollCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SchoolRollCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchoolRollCountRes) Reset() {
	*x = SchoolRollCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolRollCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolRollCountRes) ProtoMessage() {}

func (x *SchoolRollCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolRollCountRes.ProtoReflect.Descriptor instead.
func (*SchoolRollCountRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{13}
}

func (x *SchoolRollCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SchoolRollCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SchoolRollCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SchoolRollCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SchoolListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Page  int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchoolListReq) Reset() {
	*x = SchoolListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolListReq) ProtoMessage() {}

func (x *SchoolListReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolListReq.ProtoReflect.Descriptor instead.
func (*SchoolListReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{14}
}

func (x *SchoolListReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SchoolListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SchoolListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SchoolListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SchoolListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SchoolListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.SchoolRoll `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchoolListRes) Reset() {
	*x = SchoolListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolListRes) ProtoMessage() {}

func (x *SchoolListRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolListRes.ProtoReflect.Descriptor instead.
func (*SchoolListRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{15}
}

func (x *SchoolListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SchoolListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SchoolListRes) GetLists() []*common.SchoolRoll {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *SchoolListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubjectCateAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *common.Authorize   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid     int64               `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Subject *common.SubjectCate `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	Extra   map[string]string   `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubjectCateAddReq) Reset() {
	*x = SubjectCateAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectCateAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectCateAddReq) ProtoMessage() {}

func (x *SubjectCateAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectCateAddReq.ProtoReflect.Descriptor instead.
func (*SubjectCateAddReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{16}
}

func (x *SubjectCateAddReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SubjectCateAddReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SubjectCateAddReq) GetSubject() *common.SubjectCate {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *SubjectCateAddReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubjectCateAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubjectCateAddRes) Reset() {
	*x = SubjectCateAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectCateAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectCateAddRes) ProtoMessage() {}

func (x *SubjectCateAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectCateAddRes.ProtoReflect.Descriptor instead.
func (*SubjectCateAddRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{17}
}

func (x *SubjectCateAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SubjectCateAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SubjectCateAddRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubjectCateCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubjectCateCountReq) Reset() {
	*x = SubjectCateCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectCateCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectCateCountReq) ProtoMessage() {}

func (x *SubjectCateCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectCateCountReq.ProtoReflect.Descriptor instead.
func (*SubjectCateCountReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{18}
}

func (x *SubjectCateCountReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SubjectCateCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SubjectCateCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubjectCateCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubjectCateCountRes) Reset() {
	*x = SubjectCateCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectCateCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectCateCountRes) ProtoMessage() {}

func (x *SubjectCateCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectCateCountRes.ProtoReflect.Descriptor instead.
func (*SubjectCateCountRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{19}
}

func (x *SubjectCateCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SubjectCateCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SubjectCateCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SubjectCateCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubejctCateListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Page  int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubejctCateListReq) Reset() {
	*x = SubejctCateListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubejctCateListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubejctCateListReq) ProtoMessage() {}

func (x *SubejctCateListReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubejctCateListReq.ProtoReflect.Descriptor instead.
func (*SubejctCateListReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{20}
}

func (x *SubejctCateListReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SubejctCateListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SubejctCateListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SubejctCateListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SubejctCateListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubjectCateListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code          `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.SubjectCate `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubjectCateListRes) Reset() {
	*x = SubjectCateListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectCateListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectCateListRes) ProtoMessage() {}

func (x *SubjectCateListRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectCateListRes.ProtoReflect.Descriptor instead.
func (*SubjectCateListRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{21}
}

func (x *SubjectCateListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SubjectCateListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SubjectCateListRes) GetLists() []*common.SubjectCate {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *SubjectCateListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QuestionVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Query *common.QuestionQuery `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Extra map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuestionVersionReq) Reset() {
	*x = QuestionVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionVersionReq) ProtoMessage() {}

func (x *QuestionVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionVersionReq.ProtoReflect.Descriptor instead.
func (*QuestionVersionReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{22}
}

func (x *QuestionVersionReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *QuestionVersionReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QuestionVersionReq) GetQuery() *common.QuestionQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QuestionVersionReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QuestionVersionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code          `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.VersionItem `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuestionVersionRes) Reset() {
	*x = QuestionVersionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionVersionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionVersionRes) ProtoMessage() {}

func (x *QuestionVersionRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionVersionRes.ProtoReflect.Descriptor instead.
func (*QuestionVersionRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{23}
}

func (x *QuestionVersionRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *QuestionVersionRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QuestionVersionRes) GetLists() []*common.VersionItem {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *QuestionVersionRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QuestionChapterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Query *common.QuestionQuery `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Extra map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuestionChapterReq) Reset() {
	*x = QuestionChapterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionChapterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionChapterReq) ProtoMessage() {}

func (x *QuestionChapterReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionChapterReq.ProtoReflect.Descriptor instead.
func (*QuestionChapterReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{24}
}

func (x *QuestionChapterReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *QuestionChapterReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QuestionChapterReq) GetQuery() *common.QuestionQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QuestionChapterReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ChapterResItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string                `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Title  string                `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Childs []*common.ChapterItem `protobuf:"bytes,3,rep,name=childs,proto3" json:"childs,omitempty"`
}

func (x *ChapterResItem) Reset() {
	*x = ChapterResItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterResItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterResItem) ProtoMessage() {}

func (x *ChapterResItem) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterResItem.ProtoReflect.Descriptor instead.
func (*ChapterResItem) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{25}
}

func (x *ChapterResItem) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ChapterResItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChapterResItem) GetChilds() []*common.ChapterItem {
	if x != nil {
		return x.Childs
	}
	return nil
}

type QuestionChapterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*ChapterResItem `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuestionChapterRes) Reset() {
	*x = QuestionChapterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionChapterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionChapterRes) ProtoMessage() {}

func (x *QuestionChapterRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionChapterRes.ProtoReflect.Descriptor instead.
func (*QuestionChapterRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{26}
}

func (x *QuestionChapterRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *QuestionChapterRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QuestionChapterRes) GetLists() []*ChapterResItem {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *QuestionChapterRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubjectNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Param string            `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubjectNameReq) Reset() {
	*x = SubjectNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectNameReq) ProtoMessage() {}

func (x *SubjectNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectNameReq.ProtoReflect.Descriptor instead.
func (*SubjectNameReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{27}
}

func (x *SubjectNameReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SubjectNameReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SubjectNameReq) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *SubjectNameReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubjectNameRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Name    string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubjectNameRes) Reset() {
	*x = SubjectNameRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectNameRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectNameRes) ProtoMessage() {}

func (x *SubjectNameRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectNameRes.ProtoReflect.Descriptor instead.
func (*SubjectNameRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{28}
}

func (x *SubjectNameRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SubjectNameRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SubjectNameRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubjectNameRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QuestionSourceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Query *common.QuestionQuery `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Extra map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuestionSourceReq) Reset() {
	*x = QuestionSourceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionSourceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionSourceReq) ProtoMessage() {}

func (x *QuestionSourceReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionSourceReq.ProtoReflect.Descriptor instead.
func (*QuestionSourceReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{29}
}

func (x *QuestionSourceReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *QuestionSourceReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QuestionSourceReq) GetQuery() *common.QuestionQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QuestionSourceReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QuestionSourceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Sources []*common.SourceItem `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuestionSourceRes) Reset() {
	*x = QuestionSourceRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionSourceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionSourceRes) ProtoMessage() {}

func (x *QuestionSourceRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionSourceRes.ProtoReflect.Descriptor instead.
func (*QuestionSourceRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{30}
}

func (x *QuestionSourceRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *QuestionSourceRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QuestionSourceRes) GetSources() []*common.SourceItem {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *QuestionSourceRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QuestionTixingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Query *common.QuestionQuery `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Extra map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuestionTixingReq) Reset() {
	*x = QuestionTixingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionTixingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionTixingReq) ProtoMessage() {}

func (x *QuestionTixingReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionTixingReq.ProtoReflect.Descriptor instead.
func (*QuestionTixingReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{31}
}

func (x *QuestionTixingReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *QuestionTixingReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QuestionTixingReq) GetQuery() *common.QuestionQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QuestionTixingReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QuestionTixingRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Tixings []*common.TixingItem `protobuf:"bytes,3,rep,name=tixings,proto3" json:"tixings,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuestionTixingRes) Reset() {
	*x = QuestionTixingRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionTixingRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionTixingRes) ProtoMessage() {}

func (x *QuestionTixingRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionTixingRes.ProtoReflect.Descriptor instead.
func (*QuestionTixingRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{32}
}

func (x *QuestionTixingRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *QuestionTixingRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QuestionTixingRes) GetTixings() []*common.TixingItem {
	if x != nil {
		return x.Tixings
	}
	return nil
}

func (x *QuestionTixingRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QuestionTimuCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Query *common.QuestionQuery `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Extra map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuestionTimuCountReq) Reset() {
	*x = QuestionTimuCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionTimuCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionTimuCountReq) ProtoMessage() {}

func (x *QuestionTimuCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionTimuCountReq.ProtoReflect.Descriptor instead.
func (*QuestionTimuCountReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{33}
}

func (x *QuestionTimuCountReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *QuestionTimuCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QuestionTimuCountReq) GetQuery() *common.QuestionQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QuestionTimuCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QuestionTimuCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuestionTimuCountRes) Reset() {
	*x = QuestionTimuCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionTimuCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionTimuCountRes) ProtoMessage() {}

func (x *QuestionTimuCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionTimuCountRes.ProtoReflect.Descriptor instead.
func (*QuestionTimuCountRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{34}
}

func (x *QuestionTimuCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *QuestionTimuCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QuestionTimuCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QuestionTimuCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QuestionTimuReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Query *common.QuestionQuery `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Extra map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuestionTimuReq) Reset() {
	*x = QuestionTimuReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionTimuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionTimuReq) ProtoMessage() {}

func (x *QuestionTimuReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionTimuReq.ProtoReflect.Descriptor instead.
func (*QuestionTimuReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{35}
}

func (x *QuestionTimuReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *QuestionTimuReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QuestionTimuReq) GetQuery() *common.QuestionQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QuestionTimuReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QuestionTimuRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Timus   []*common.TimuItem `protobuf:"bytes,3,rep,name=timus,proto3" json:"timus,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuestionTimuRes) Reset() {
	*x = QuestionTimuRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionTimuRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionTimuRes) ProtoMessage() {}

func (x *QuestionTimuRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionTimuRes.ProtoReflect.Descriptor instead.
func (*QuestionTimuRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{36}
}

func (x *QuestionTimuRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *QuestionTimuRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QuestionTimuRes) GetTimus() []*common.TimuItem {
	if x != nil {
		return x.Timus
	}
	return nil
}

func (x *QuestionTimuRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CollectTimuReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Cid   string            `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	Op    int64             `protobuf:"varint,4,opt,name=op,proto3" json:"op,omitempty"`
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CollectTimuReq) Reset() {
	*x = CollectTimuReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectTimuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectTimuReq) ProtoMessage() {}

func (x *CollectTimuReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectTimuReq.ProtoReflect.Descriptor instead.
func (*CollectTimuReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{37}
}

func (x *CollectTimuReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CollectTimuReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CollectTimuReq) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *CollectTimuReq) GetOp() int64 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *CollectTimuReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CollectTimuRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CollectTimuRes) Reset() {
	*x = CollectTimuRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectTimuRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectTimuRes) ProtoMessage() {}

func (x *CollectTimuRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectTimuRes.ProtoReflect.Descriptor instead.
func (*CollectTimuRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{38}
}

func (x *CollectTimuRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CollectTimuRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CollectTimuRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryCollectTimuReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Page  int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryCollectTimuReq) Reset() {
	*x = QueryCollectTimuReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCollectTimuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCollectTimuReq) ProtoMessage() {}

func (x *QueryCollectTimuReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCollectTimuReq.ProtoReflect.Descriptor instead.
func (*QueryCollectTimuReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{39}
}

func (x *QueryCollectTimuReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *QueryCollectTimuReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QueryCollectTimuReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryCollectTimuReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryCollectTimuReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryCollectTimuRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Timus   []*common.TimuItem `protobuf:"bytes,3,rep,name=timus,proto3" json:"timus,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryCollectTimuRes) Reset() {
	*x = QueryCollectTimuRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCollectTimuRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCollectTimuRes) ProtoMessage() {}

func (x *QueryCollectTimuRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCollectTimuRes.ProtoReflect.Descriptor instead.
func (*QueryCollectTimuRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{40}
}

func (x *QueryCollectTimuRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *QueryCollectTimuRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QueryCollectTimuRes) GetTimus() []*common.TimuItem {
	if x != nil {
		return x.Timus
	}
	return nil
}

func (x *QueryCollectTimuRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ModifyQuestionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Tid   string            `protobuf:"bytes,3,opt,name=tid,proto3" json:"tid,omitempty"`
	Timu  *common.Question  `protobuf:"bytes,4,opt,name=timu,proto3" json:"timu,omitempty"`
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyQuestionReq) Reset() {
	*x = ModifyQuestionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyQuestionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyQuestionReq) ProtoMessage() {}

func (x *ModifyQuestionReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyQuestionReq.ProtoReflect.Descriptor instead.
func (*ModifyQuestionReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{41}
}

func (x *ModifyQuestionReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ModifyQuestionReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ModifyQuestionReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *ModifyQuestionReq) GetTimu() *common.Question {
	if x != nil {
		return x.Timu
	}
	return nil
}

func (x *ModifyQuestionReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ModifyQuestionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyQuestionRes) Reset() {
	*x = ModifyQuestionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyQuestionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyQuestionRes) ProtoMessage() {}

func (x *ModifyQuestionRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyQuestionRes.ProtoReflect.Descriptor instead.
func (*ModifyQuestionRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{42}
}

func (x *ModifyQuestionRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *ModifyQuestionRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ModifyQuestionRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ModifyListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid    int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Page   int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Sorted string            `protobuf:"bytes,5,opt,name=sorted,proto3" json:"sorted,omitempty"`
	Status string            `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Extra  map[string]string `protobuf:"bytes,7,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyListReq) Reset() {
	*x = ModifyListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyListReq) ProtoMessage() {}

func (x *ModifyListReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyListReq.ProtoReflect.Descriptor instead.
func (*ModifyListReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{43}
}

func (x *ModifyListReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ModifyListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ModifyListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ModifyListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ModifyListReq) GetSorted() string {
	if x != nil {
		return x.Sorted
	}
	return ""
}

func (x *ModifyListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ModifyListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ModifyListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Timus   []*common.ModifyItem `protobuf:"bytes,3,rep,name=timus,proto3" json:"timus,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyListRes) Reset() {
	*x = ModifyListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyListRes) ProtoMessage() {}

func (x *ModifyListRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyListRes.ProtoReflect.Descriptor instead.
func (*ModifyListRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{44}
}

func (x *ModifyListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *ModifyListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ModifyListRes) GetTimus() []*common.ModifyItem {
	if x != nil {
		return x.Timus
	}
	return nil
}

func (x *ModifyListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ModifyCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid    int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Status string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyCountReq) Reset() {
	*x = ModifyCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCountReq) ProtoMessage() {}

func (x *ModifyCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCountReq.ProtoReflect.Descriptor instead.
func (*ModifyCountReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{45}
}

func (x *ModifyCountReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ModifyCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ModifyCountReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ModifyCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ModifyCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyCountRes) Reset() {
	*x = ModifyCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCountRes) ProtoMessage() {}

func (x *ModifyCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCountRes.ProtoReflect.Descriptor instead.
func (*ModifyCountRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{46}
}

func (x *ModifyCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *ModifyCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ModifyCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ModifyCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ApproveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Id     int64              `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Uid    int64              `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Status string             `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Info   string             `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	Reward float64            `protobuf:"fixed64,6,opt,name=reward,proto3" json:"reward,omitempty"`
	Dest   common.ApproveDest `protobuf:"varint,7,opt,name=dest,proto3,enum=common.ApproveDest" json:"dest,omitempty"`
	Extra  map[string]string  `protobuf:"bytes,8,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApproveReq) Reset() {
	*x = ApproveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveReq) ProtoMessage() {}

func (x *ApproveReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveReq.ProtoReflect.Descriptor instead.
func (*ApproveReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{47}
}

func (x *ApproveReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ApproveReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApproveReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ApproveReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApproveReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *ApproveReq) GetReward() float64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *ApproveReq) GetDest() common.ApproveDest {
	if x != nil {
		return x.Dest
	}
	return common.ApproveDest_search_tyle_APPROVE_TIMU_MODIFY
}

func (x *ApproveReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ApproveRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApproveRes) Reset() {
	*x = ApproveRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveRes) ProtoMessage() {}

func (x *ApproveRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveRes.ProtoReflect.Descriptor instead.
func (*ApproveRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{48}
}

func (x *ApproveRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *ApproveRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ApproveRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TimuByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Tid   string            `protobuf:"bytes,3,opt,name=tid,proto3" json:"tid,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimuByIdReq) Reset() {
	*x = TimuByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimuByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimuByIdReq) ProtoMessage() {}

func (x *TimuByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimuByIdReq.ProtoReflect.Descriptor instead.
func (*TimuByIdReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{49}
}

func (x *TimuByIdReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *TimuByIdReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TimuByIdReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *TimuByIdReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TimuByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Timu    *common.TimuItem  `protobuf:"bytes,3,opt,name=timu,proto3" json:"timu,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimuByIdRes) Reset() {
	*x = TimuByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimuByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimuByIdRes) ProtoMessage() {}

func (x *TimuByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimuByIdRes.ProtoReflect.Descriptor instead.
func (*TimuByIdRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{50}
}

func (x *TimuByIdRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *TimuByIdRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *TimuByIdRes) GetTimu() *common.TimuItem {
	if x != nil {
		return x.Timu
	}
	return nil
}

func (x *TimuByIdRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TimuAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64               `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Timu  *common.AddTimuItem `protobuf:"bytes,3,opt,name=timu,proto3" json:"timu,omitempty"`
	Extra map[string]string   `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimuAddReq) Reset() {
	*x = TimuAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimuAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimuAddReq) ProtoMessage() {}

func (x *TimuAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimuAddReq.ProtoReflect.Descriptor instead.
func (*TimuAddReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{51}
}

func (x *TimuAddReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *TimuAddReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TimuAddReq) GetTimu() *common.AddTimuItem {
	if x != nil {
		return x.Timu
	}
	return nil
}

func (x *TimuAddReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TimuAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimuAddRes) Reset() {
	*x = TimuAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimuAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimuAddRes) ProtoMessage() {}

func (x *TimuAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimuAddRes.ProtoReflect.Descriptor instead.
func (*TimuAddRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{52}
}

func (x *TimuAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *TimuAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *TimuAddRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid    int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Page   int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Sorted string            `protobuf:"bytes,5,opt,name=sorted,proto3" json:"sorted,omitempty"`
	Status string            `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddListReq) Reset() {
	*x = AddListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddListReq) ProtoMessage() {}

func (x *AddListReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddListReq.ProtoReflect.Descriptor instead.
func (*AddListReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{53}
}

func (x *AddListReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *AddListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AddListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AddListReq) GetSorted() string {
	if x != nil {
		return x.Sorted
	}
	return ""
}

func (x *AddListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AddListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code          `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Timus   []*common.AddTimuItem `protobuf:"bytes,3,rep,name=timus,proto3" json:"timus,omitempty"`
	Extra   map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddListRes) Reset() {
	*x = AddListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddListRes) ProtoMessage() {}

func (x *AddListRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddListRes.ProtoReflect.Descriptor instead.
func (*AddListRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{54}
}

func (x *AddListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddListRes) GetTimus() []*common.AddTimuItem {
	if x != nil {
		return x.Timus
	}
	return nil
}

func (x *AddListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid    int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Status string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddCountReq) Reset() {
	*x = AddCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCountReq) ProtoMessage() {}

func (x *AddCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCountReq.ProtoReflect.Descriptor instead.
func (*AddCountReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{55}
}

func (x *AddCountReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *AddCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddCountReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AddCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddCountRes) Reset() {
	*x = AddCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCountRes) ProtoMessage() {}

func (x *AddCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCountRes.ProtoReflect.Descriptor instead.
func (*AddCountRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{56}
}

func (x *AddCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TixingByVidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Vid   string            `protobuf:"bytes,2,opt,name=vid,proto3" json:"vid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TixingByVidReq) Reset() {
	*x = TixingByVidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TixingByVidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TixingByVidReq) ProtoMessage() {}

func (x *TixingByVidReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TixingByVidReq.ProtoReflect.Descriptor instead.
func (*TixingByVidReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{57}
}

func (x *TixingByVidReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *TixingByVidReq) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *TixingByVidReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TixingByVidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Tixings []string          `protobuf:"bytes,3,rep,name=tixings,proto3" json:"tixings,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TixingByVidRes) Reset() {
	*x = TixingByVidRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TixingByVidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TixingByVidRes) ProtoMessage() {}

func (x *TixingByVidRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TixingByVidRes.ProtoReflect.Descriptor instead.
func (*TixingByVidRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{58}
}

func (x *TixingByVidRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *TixingByVidRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *TixingByVidRes) GetTixings() []string {
	if x != nil {
		return x.Tixings
	}
	return nil
}

func (x *TixingByVidRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SourceByVidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Vid   string            `protobuf:"bytes,2,opt,name=vid,proto3" json:"vid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SourceByVidReq) Reset() {
	*x = SourceByVidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceByVidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceByVidReq) ProtoMessage() {}

func (x *SourceByVidReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceByVidReq.ProtoReflect.Descriptor instead.
func (*SourceByVidReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{59}
}

func (x *SourceByVidReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SourceByVidReq) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *SourceByVidReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SourceByVidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Sources []string          `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SourceByVidRes) Reset() {
	*x = SourceByVidRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceByVidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceByVidRes) ProtoMessage() {}

func (x *SourceByVidRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceByVidRes.ProtoReflect.Descriptor instead.
func (*SourceByVidRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{60}
}

func (x *SourceByVidRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SourceByVidRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SourceByVidRes) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *SourceByVidRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IdentByIidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Iid   string            `protobuf:"bytes,3,opt,name=iid,proto3" json:"iid,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentByIidReq) Reset() {
	*x = IdentByIidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentByIidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentByIidReq) ProtoMessage() {}

func (x *IdentByIidReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentByIidReq.ProtoReflect.Descriptor instead.
func (*IdentByIidReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{61}
}

func (x *IdentByIidReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *IdentByIidReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *IdentByIidReq) GetIid() string {
	if x != nil {
		return x.Iid
	}
	return ""
}

func (x *IdentByIidReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IdentByIidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Result  *common.BaiduIdentItem `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Extra   map[string]string      `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentByIidRes) Reset() {
	*x = IdentByIidRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentByIidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentByIidRes) ProtoMessage() {}

func (x *IdentByIidRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentByIidRes.ProtoReflect.Descriptor instead.
func (*IdentByIidRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{62}
}

func (x *IdentByIidRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *IdentByIidRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *IdentByIidRes) GetResult() *common.BaiduIdentItem {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *IdentByIidRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IdentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid    int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Page   int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Sorted string            `protobuf:"bytes,5,opt,name=sorted,proto3" json:"sorted,omitempty"`
	Status string            `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Iid    string            `protobuf:"bytes,7,opt,name=iid,proto3" json:"iid,omitempty"`
	Sign   string            `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *IdentListReq) Reset() {
	*x = IdentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentListReq) ProtoMessage() {}

func (x *IdentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentListReq.ProtoReflect.Descriptor instead.
func (*IdentListReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{63}
}

func (x *IdentListReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *IdentListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *IdentListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *IdentListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *IdentListReq) GetSorted() string {
	if x != nil {
		return x.Sorted
	}
	return ""
}

func (x *IdentListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IdentListReq) GetIid() string {
	if x != nil {
		return x.Iid
	}
	return ""
}

func (x *IdentListReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type IdentListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code             `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                   `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Results []*common.BaiduIdentItem `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Extra   map[string]string        `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentListRes) Reset() {
	*x = IdentListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentListRes) ProtoMessage() {}

func (x *IdentListRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentListRes.ProtoReflect.Descriptor instead.
func (*IdentListRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{64}
}

func (x *IdentListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *IdentListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *IdentListRes) GetResults() []*common.BaiduIdentItem {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *IdentListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IdentCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid    int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Status string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentCountReq) Reset() {
	*x = IdentCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentCountReq) ProtoMessage() {}

func (x *IdentCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentCountReq.ProtoReflect.Descriptor instead.
func (*IdentCountReq) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{65}
}

func (x *IdentCountReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *IdentCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *IdentCountReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IdentCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IdentCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentCountRes) Reset() {
	*x = IdentCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnode_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentCountRes) ProtoMessage() {}

func (x *IdentCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_questionnode_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentCountRes.ProtoReflect.Descriptor instead.
func (*IdentCountRes) Descriptor() ([]byte, []int) {
	return file_questionnode_proto_rawDescGZIP(), []int{66}
}

func (x *IdentCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *IdentCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *IdentCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *IdentCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_questionnode_proto protoreflect.FileDescriptor

var file_questionnode_proto_rawDesc = []byte{
	0x0a, 0x12, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x1a, 0x15, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4,
	0x01, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd2, 0x01, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x41, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x01, 0x0a, 0x14, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x01, 0x0a, 0x14,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x13, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xfe, 0x01, 0x0a, 0x13, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x05, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x12, 0x42, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x02, 0x0a, 0x13, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x42, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x01,
	0x0a, 0x11, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd,
	0x01, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5,
	0x01, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f,
	0x6c, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f,
	0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x42, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01,
	0x0a, 0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x44, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xee, 0x01, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xec, 0x01, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf7, 0x01, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfe, 0x01, 0x0a, 0x14, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x14,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x43, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x12,
	0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x01, 0x0a, 0x16, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a,
	0x15, 0x73, 0x75, 0x62, 0x65, 0x6a, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x65, 0x6a, 0x63, 0x74, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x44,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfc,
	0x01, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x02,
	0x0a, 0x14, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xfc, 0x01, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x68, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a,
	0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x52, 0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x14,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x01, 0x0a, 0x10, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x12,
	0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3f,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x10, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa,
	0x01, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x02, 0x0a, 0x13,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x42, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83,
	0x02, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x78, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x74, 0x69, 0x78, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x74,
	0x69, 0x78, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x78, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x02, 0x0a, 0x17, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf2, 0x01, 0x0a, 0x17, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf6,
	0x01, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x75,
	0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x27,
	0x0a, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x72,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce,
	0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f,
	0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f,
	0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xfa, 0x01, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x02, 0x0a,
	0x16, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x75,
	0x73, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x84, 0x02, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x75, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x75, 0x12, 0x42, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x9c, 0x02, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf7, 0x01, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x12,
	0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x10, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3f, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x10, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xba, 0x02, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4,
	0x01, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x01, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x75, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe9, 0x01, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x75, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3b,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x69, 0x6d,
	0x75, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x01, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x69, 0x6d,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01,
	0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x12,
	0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x64, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x0d, 0x61, 0x64, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a, 0x11, 0x74, 0x69,
	0x78, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x12,
	0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79,
	0x5f, 0x76, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x11, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x78, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69,
	0x78, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc8, 0x01, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x5f,
	0x76, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a,
	0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x10, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79,
	0x5f, 0x69, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x02, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x79, 0x5f, 0x69, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x69, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x22, 0xfe, 0x01, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x62, 0x61, 0x69, 0x64, 0x75, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xdc, 0x01, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xe2, 0x01, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xc4, 0x16, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x56, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x12, 0x20, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x72, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x12, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x11, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x12,
	0x22, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x72, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x12, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x11, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x23, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x73, 0x75, 0x62, 0x65, 0x6a, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x12, 0x22, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x21, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x65, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x12, 0x1f, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x12, 0x1e,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x62, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x12, 0x24, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x72,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x75, 0x5f, 0x61, 0x64, 0x64, 0x12, 0x1a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x64, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x19, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x75, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x62, 0x79, 0x5f,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x69, 0x6d, 0x75, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x12, 0x1f, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79,
	0x5f, 0x76, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x79, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x12, 0x1f, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x69, 0x64,
	0x12, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_questionnode_proto_rawDescOnce sync.Once
	file_questionnode_proto_rawDescData = file_questionnode_proto_rawDesc
)

func file_questionnode_proto_rawDescGZIP() []byte {
	file_questionnode_proto_rawDescOnce.Do(func() {
		file_questionnode_proto_rawDescData = protoimpl.X.CompressGZIP(file_questionnode_proto_rawDescData)
	})
	return file_questionnode_proto_rawDescData
}

var file_questionnode_proto_msgTypes = make([]protoimpl.MessageInfo, 131)
var file_questionnode_proto_goTypes = []interface{}{
	(*GradeCateAddReq)(nil),       // 0: questionnode.grade_cate_add_req
	(*GradeCateAddRes)(nil),       // 1: questionnode.grade_cate_add_res
	(*GradeCateCountReq)(nil),     // 2: questionnode.grade_cate_count_req
	(*GradeCateCountRes)(nil),     // 3: questionnode.grade_cate_count_res
	(*GradeCateListReq)(nil),      // 4: questionnode.grade_cate_list_req
	(*GradeCateListRes)(nil),      // 5: questionnode.grade_cate_list_res
	(*HomeBlackDataReq)(nil),      // 6: questionnode.home_black_data_req
	(*HomeBlackDataRes)(nil),      // 7: questionnode.home_black_data_res
	(*GradeSubjectReq)(nil),       // 8: questionnode.grade_subject_req
	(*GradeSubjectRes)(nil),       // 9: questionnode.grade_subject_res
	(*SchoolRollAddReq)(nil),      // 10: questionnode.school_roll_add_req
	(*SchoolRollAddRes)(nil),      // 11: questionnode.school_roll_add_res
	(*SchoolRollCountReq)(nil),    // 12: questionnode.school_roll_count_req
	(*SchoolRollCountRes)(nil),    // 13: questionnode.school_roll_count_res
	(*SchoolListReq)(nil),         // 14: questionnode.school_list_req
	(*SchoolListRes)(nil),         // 15: questionnode.school_list_res
	(*SubjectCateAddReq)(nil),     // 16: questionnode.subject_cate_add_req
	(*SubjectCateAddRes)(nil),     // 17: questionnode.subject_cate_add_res
	(*SubjectCateCountReq)(nil),   // 18: questionnode.subject_cate_count_req
	(*SubjectCateCountRes)(nil),   // 19: questionnode.subject_cate_count_res
	(*SubejctCateListReq)(nil),    // 20: questionnode.subejct_cate_list_req
	(*SubjectCateListRes)(nil),    // 21: questionnode.subject_cate_list_res
	(*QuestionVersionReq)(nil),    // 22: questionnode.question_version_req
	(*QuestionVersionRes)(nil),    // 23: questionnode.question_version_res
	(*QuestionChapterReq)(nil),    // 24: questionnode.question_chapter_req
	(*ChapterResItem)(nil),        // 25: questionnode.chapter_res_item
	(*QuestionChapterRes)(nil),    // 26: questionnode.question_chapter_res
	(*SubjectNameReq)(nil),        // 27: questionnode.subject_name_req
	(*SubjectNameRes)(nil),        // 28: questionnode.subject_name_res
	(*QuestionSourceReq)(nil),     // 29: questionnode.question_source_req
	(*QuestionSourceRes)(nil),     // 30: questionnode.question_source_res
	(*QuestionTixingReq)(nil),     // 31: questionnode.question_tixing_req
	(*QuestionTixingRes)(nil),     // 32: questionnode.question_tixing_res
	(*QuestionTimuCountReq)(nil),  // 33: questionnode.question_timu_count_req
	(*QuestionTimuCountRes)(nil),  // 34: questionnode.question_timu_count_res
	(*QuestionTimuReq)(nil),       // 35: questionnode.question_timu_req
	(*QuestionTimuRes)(nil),       // 36: questionnode.question_timu_res
	(*CollectTimuReq)(nil),        // 37: questionnode.collect_timu_req
	(*CollectTimuRes)(nil),        // 38: questionnode.collect_timu_res
	(*QueryCollectTimuReq)(nil),   // 39: questionnode.query_collect_timu_req
	(*QueryCollectTimuRes)(nil),   // 40: questionnode.query_collect_timu_res
	(*ModifyQuestionReq)(nil),     // 41: questionnode.modify_question_req
	(*ModifyQuestionRes)(nil),     // 42: questionnode.modify_question_res
	(*ModifyListReq)(nil),         // 43: questionnode.modify_list_req
	(*ModifyListRes)(nil),         // 44: questionnode.modify_list_res
	(*ModifyCountReq)(nil),        // 45: questionnode.modify_count_req
	(*ModifyCountRes)(nil),        // 46: questionnode.modify_count_res
	(*ApproveReq)(nil),            // 47: questionnode.approve_req
	(*ApproveRes)(nil),            // 48: questionnode.approve_res
	(*TimuByIdReq)(nil),           // 49: questionnode.timu_by_id_req
	(*TimuByIdRes)(nil),           // 50: questionnode.timu_by_id_res
	(*TimuAddReq)(nil),            // 51: questionnode.timu_add_req
	(*TimuAddRes)(nil),            // 52: questionnode.timu_add_res
	(*AddListReq)(nil),            // 53: questionnode.add_list_req
	(*AddListRes)(nil),            // 54: questionnode.add_list_res
	(*AddCountReq)(nil),           // 55: questionnode.add_count_req
	(*AddCountRes)(nil),           // 56: questionnode.add_count_res
	(*TixingByVidReq)(nil),        // 57: questionnode.tixing_by_vid_req
	(*TixingByVidRes)(nil),        // 58: questionnode.tixing_by_vid_res
	(*SourceByVidReq)(nil),        // 59: questionnode.source_by_vid_req
	(*SourceByVidRes)(nil),        // 60: questionnode.source_by_vid_res
	(*IdentByIidReq)(nil),         // 61: questionnode.ident_by_iid_req
	(*IdentByIidRes)(nil),         // 62: questionnode.ident_by_iid_res
	(*IdentListReq)(nil),          // 63: questionnode.ident_list_req
	(*IdentListRes)(nil),          // 64: questionnode.ident_list_res
	(*IdentCountReq)(nil),         // 65: questionnode.ident_count_req
	(*IdentCountRes)(nil),         // 66: questionnode.ident_count_res
	nil,                           // 67: questionnode.grade_cate_add_req.ExtraEntry
	nil,                           // 68: questionnode.grade_cate_add_res.ExtraEntry
	nil,                           // 69: questionnode.grade_cate_count_req.ExtraEntry
	nil,                           // 70: questionnode.grade_cate_count_res.ExtraEntry
	nil,                           // 71: questionnode.grade_cate_list_req.ExtraEntry
	nil,                           // 72: questionnode.grade_cate_list_res.ExtraEntry
	nil,                           // 73: questionnode.home_black_data_req.ExtraEntry
	nil,                           // 74: questionnode.home_black_data_res.ExtraEntry
	nil,                           // 75: questionnode.grade_subject_req.ExtraEntry
	nil,                           // 76: questionnode.grade_subject_res.ExtraEntry
	nil,                           // 77: questionnode.school_roll_add_req.ExtraEntry
	nil,                           // 78: questionnode.school_roll_add_res.ExtraEntry
	nil,                           // 79: questionnode.school_roll_count_req.ExtraEntry
	nil,                           // 80: questionnode.school_roll_count_res.ExtraEntry
	nil,                           // 81: questionnode.school_list_req.ExtraEntry
	nil,                           // 82: questionnode.school_list_res.ExtraEntry
	nil,                           // 83: questionnode.subject_cate_add_req.ExtraEntry
	nil,                           // 84: questionnode.subject_cate_add_res.ExtraEntry
	nil,                           // 85: questionnode.subject_cate_count_req.ExtraEntry
	nil,                           // 86: questionnode.subject_cate_count_res.ExtraEntry
	nil,                           // 87: questionnode.subejct_cate_list_req.ExtraEntry
	nil,                           // 88: questionnode.subject_cate_list_res.ExtraEntry
	nil,                           // 89: questionnode.question_version_req.ExtraEntry
	nil,                           // 90: questionnode.question_version_res.ExtraEntry
	nil,                           // 91: questionnode.question_chapter_req.ExtraEntry
	nil,                           // 92: questionnode.question_chapter_res.ExtraEntry
	nil,                           // 93: questionnode.subject_name_req.ExtraEntry
	nil,                           // 94: questionnode.subject_name_res.ExtraEntry
	nil,                           // 95: questionnode.question_source_req.ExtraEntry
	nil,                           // 96: questionnode.question_source_res.ExtraEntry
	nil,                           // 97: questionnode.question_tixing_req.ExtraEntry
	nil,                           // 98: questionnode.question_tixing_res.ExtraEntry
	nil,                           // 99: questionnode.question_timu_count_req.ExtraEntry
	nil,                           // 100: questionnode.question_timu_count_res.ExtraEntry
	nil,                           // 101: questionnode.question_timu_req.ExtraEntry
	nil,                           // 102: questionnode.question_timu_res.ExtraEntry
	nil,                           // 103: questionnode.collect_timu_req.ExtraEntry
	nil,                           // 104: questionnode.collect_timu_res.ExtraEntry
	nil,                           // 105: questionnode.query_collect_timu_req.ExtraEntry
	nil,                           // 106: questionnode.query_collect_timu_res.ExtraEntry
	nil,                           // 107: questionnode.modify_question_req.ExtraEntry
	nil,                           // 108: questionnode.modify_question_res.ExtraEntry
	nil,                           // 109: questionnode.modify_list_req.ExtraEntry
	nil,                           // 110: questionnode.modify_list_res.ExtraEntry
	nil,                           // 111: questionnode.modify_count_req.ExtraEntry
	nil,                           // 112: questionnode.modify_count_res.ExtraEntry
	nil,                           // 113: questionnode.approve_req.ExtraEntry
	nil,                           // 114: questionnode.approve_res.ExtraEntry
	nil,                           // 115: questionnode.timu_by_id_req.ExtraEntry
	nil,                           // 116: questionnode.timu_by_id_res.ExtraEntry
	nil,                           // 117: questionnode.timu_add_req.ExtraEntry
	nil,                           // 118: questionnode.timu_add_res.ExtraEntry
	nil,                           // 119: questionnode.add_list_res.ExtraEntry
	nil,                           // 120: questionnode.add_count_req.ExtraEntry
	nil,                           // 121: questionnode.add_count_res.ExtraEntry
	nil,                           // 122: questionnode.tixing_by_vid_req.ExtraEntry
	nil,                           // 123: questionnode.tixing_by_vid_res.ExtraEntry
	nil,                           // 124: questionnode.source_by_vid_req.ExtraEntry
	nil,                           // 125: questionnode.source_by_vid_res.ExtraEntry
	nil,                           // 126: questionnode.ident_by_iid_req.ExtraEntry
	nil,                           // 127: questionnode.ident_by_iid_res.ExtraEntry
	nil,                           // 128: questionnode.ident_list_res.ExtraEntry
	nil,                           // 129: questionnode.ident_count_req.ExtraEntry
	nil,                           // 130: questionnode.ident_count_res.ExtraEntry
	(*common.Authorize)(nil),      // 131: common.authorize
	(*common.GradeCate)(nil),      // 132: common.grade_cate
	(rescode.Code)(0),             // 133: rescode.code
	(*common.SchoolStatic)(nil),   // 134: common.school_static
	(*common.GradeSubject)(nil),   // 135: common.grade_subject
	(*common.SchoolRoll)(nil),     // 136: common.school_roll
	(*common.SubjectCate)(nil),    // 137: common.subject_cate
	(*common.QuestionQuery)(nil),  // 138: common.question_query
	(*common.VersionItem)(nil),    // 139: common.version_item
	(*common.ChapterItem)(nil),    // 140: common.chapter_item
	(*common.SourceItem)(nil),     // 141: common.source_item
	(*common.TixingItem)(nil),     // 142: common.tixing_item
	(*common.TimuItem)(nil),       // 143: common.timu_item
	(*common.Question)(nil),       // 144: common.question
	(*common.ModifyItem)(nil),     // 145: common.modify_item
	(common.ApproveDest)(0),       // 146: common.approve_dest
	(*common.AddTimuItem)(nil),    // 147: common.add_timu_item
	(*common.BaiduIdentItem)(nil), // 148: common.baidu_ident_item
}
var file_questionnode_proto_depIdxs = []int32{
	131, // 0: questionnode.grade_cate_add_req.auth:type_name -> common.authorize
	132, // 1: questionnode.grade_cate_add_req.grade:type_name -> common.grade_cate
	67,  // 2: questionnode.grade_cate_add_req.extra:type_name -> questionnode.grade_cate_add_req.ExtraEntry
	133, // 3: questionnode.grade_cate_add_res.rescode:type_name -> rescode.code
	68,  // 4: questionnode.grade_cate_add_res.extra:type_name -> questionnode.grade_cate_add_res.ExtraEntry
	131, // 5: questionnode.grade_cate_count_req.auth:type_name -> common.authorize
	69,  // 6: questionnode.grade_cate_count_req.extra:type_name -> questionnode.grade_cate_count_req.ExtraEntry
	133, // 7: questionnode.grade_cate_count_res.rescode:type_name -> rescode.code
	70,  // 8: questionnode.grade_cate_count_res.extra:type_name -> questionnode.grade_cate_count_res.ExtraEntry
	131, // 9: questionnode.grade_cate_list_req.auth:type_name -> common.authorize
	71,  // 10: questionnode.grade_cate_list_req.extra:type_name -> questionnode.grade_cate_list_req.ExtraEntry
	133, // 11: questionnode.grade_cate_list_res.rescode:type_name -> rescode.code
	132, // 12: questionnode.grade_cate_list_res.lists:type_name -> common.grade_cate
	72,  // 13: questionnode.grade_cate_list_res.extra:type_name -> questionnode.grade_cate_list_res.ExtraEntry
	131, // 14: questionnode.home_black_data_req.auth:type_name -> common.authorize
	73,  // 15: questionnode.home_black_data_req.extra:type_name -> questionnode.home_black_data_req.ExtraEntry
	133, // 16: questionnode.home_black_data_res.rescode:type_name -> rescode.code
	134, // 17: questionnode.home_black_data_res.lists:type_name -> common.school_static
	74,  // 18: questionnode.home_black_data_res.extra:type_name -> questionnode.home_black_data_res.ExtraEntry
	131, // 19: questionnode.grade_subject_req.auth:type_name -> common.authorize
	75,  // 20: questionnode.grade_subject_req.extra:type_name -> questionnode.grade_subject_req.ExtraEntry
	133, // 21: questionnode.grade_subject_res.rescode:type_name -> rescode.code
	135, // 22: questionnode.grade_subject_res.lists:type_name -> common.grade_subject
	76,  // 23: questionnode.grade_subject_res.extra:type_name -> questionnode.grade_subject_res.ExtraEntry
	131, // 24: questionnode.school_roll_add_req.auth:type_name -> common.authorize
	136, // 25: questionnode.school_roll_add_req.roll:type_name -> common.school_roll
	77,  // 26: questionnode.school_roll_add_req.extra:type_name -> questionnode.school_roll_add_req.ExtraEntry
	133, // 27: questionnode.school_roll_add_res.rescode:type_name -> rescode.code
	78,  // 28: questionnode.school_roll_add_res.extra:type_name -> questionnode.school_roll_add_res.ExtraEntry
	131, // 29: questionnode.school_roll_count_req.auth:type_name -> common.authorize
	79,  // 30: questionnode.school_roll_count_req.extra:type_name -> questionnode.school_roll_count_req.ExtraEntry
	133, // 31: questionnode.school_roll_count_res.rescode:type_name -> rescode.code
	80,  // 32: questionnode.school_roll_count_res.extra:type_name -> questionnode.school_roll_count_res.ExtraEntry
	131, // 33: questionnode.school_list_req.auth:type_name -> common.authorize
	81,  // 34: questionnode.school_list_req.extra:type_name -> questionnode.school_list_req.ExtraEntry
	133, // 35: questionnode.school_list_res.rescode:type_name -> rescode.code
	136, // 36: questionnode.school_list_res.lists:type_name -> common.school_roll
	82,  // 37: questionnode.school_list_res.extra:type_name -> questionnode.school_list_res.ExtraEntry
	131, // 38: questionnode.subject_cate_add_req.auth:type_name -> common.authorize
	137, // 39: questionnode.subject_cate_add_req.subject:type_name -> common.subject_cate
	83,  // 40: questionnode.subject_cate_add_req.extra:type_name -> questionnode.subject_cate_add_req.ExtraEntry
	133, // 41: questionnode.subject_cate_add_res.rescode:type_name -> rescode.code
	84,  // 42: questionnode.subject_cate_add_res.extra:type_name -> questionnode.subject_cate_add_res.ExtraEntry
	131, // 43: questionnode.subject_cate_count_req.auth:type_name -> common.authorize
	85,  // 44: questionnode.subject_cate_count_req.extra:type_name -> questionnode.subject_cate_count_req.ExtraEntry
	133, // 45: questionnode.subject_cate_count_res.rescode:type_name -> rescode.code
	86,  // 46: questionnode.subject_cate_count_res.extra:type_name -> questionnode.subject_cate_count_res.ExtraEntry
	131, // 47: questionnode.subejct_cate_list_req.auth:type_name -> common.authorize
	87,  // 48: questionnode.subejct_cate_list_req.extra:type_name -> questionnode.subejct_cate_list_req.ExtraEntry
	133, // 49: questionnode.subject_cate_list_res.rescode:type_name -> rescode.code
	137, // 50: questionnode.subject_cate_list_res.lists:type_name -> common.subject_cate
	88,  // 51: questionnode.subject_cate_list_res.extra:type_name -> questionnode.subject_cate_list_res.ExtraEntry
	131, // 52: questionnode.question_version_req.auth:type_name -> common.authorize
	138, // 53: questionnode.question_version_req.query:type_name -> common.question_query
	89,  // 54: questionnode.question_version_req.extra:type_name -> questionnode.question_version_req.ExtraEntry
	133, // 55: questionnode.question_version_res.rescode:type_name -> rescode.code
	139, // 56: questionnode.question_version_res.lists:type_name -> common.version_item
	90,  // 57: questionnode.question_version_res.extra:type_name -> questionnode.question_version_res.ExtraEntry
	131, // 58: questionnode.question_chapter_req.auth:type_name -> common.authorize
	138, // 59: questionnode.question_chapter_req.query:type_name -> common.question_query
	91,  // 60: questionnode.question_chapter_req.extra:type_name -> questionnode.question_chapter_req.ExtraEntry
	140, // 61: questionnode.chapter_res_item.childs:type_name -> common.chapter_item
	133, // 62: questionnode.question_chapter_res.rescode:type_name -> rescode.code
	25,  // 63: questionnode.question_chapter_res.lists:type_name -> questionnode.chapter_res_item
	92,  // 64: questionnode.question_chapter_res.extra:type_name -> questionnode.question_chapter_res.ExtraEntry
	131, // 65: questionnode.subject_name_req.auth:type_name -> common.authorize
	93,  // 66: questionnode.subject_name_req.extra:type_name -> questionnode.subject_name_req.ExtraEntry
	133, // 67: questionnode.subject_name_res.rescode:type_name -> rescode.code
	94,  // 68: questionnode.subject_name_res.extra:type_name -> questionnode.subject_name_res.ExtraEntry
	131, // 69: questionnode.question_source_req.auth:type_name -> common.authorize
	138, // 70: questionnode.question_source_req.query:type_name -> common.question_query
	95,  // 71: questionnode.question_source_req.extra:type_name -> questionnode.question_source_req.ExtraEntry
	133, // 72: questionnode.question_source_res.rescode:type_name -> rescode.code
	141, // 73: questionnode.question_source_res.sources:type_name -> common.source_item
	96,  // 74: questionnode.question_source_res.extra:type_name -> questionnode.question_source_res.ExtraEntry
	131, // 75: questionnode.question_tixing_req.auth:type_name -> common.authorize
	138, // 76: questionnode.question_tixing_req.query:type_name -> common.question_query
	97,  // 77: questionnode.question_tixing_req.extra:type_name -> questionnode.question_tixing_req.ExtraEntry
	133, // 78: questionnode.question_tixing_res.rescode:type_name -> rescode.code
	142, // 79: questionnode.question_tixing_res.tixings:type_name -> common.tixing_item
	98,  // 80: questionnode.question_tixing_res.extra:type_name -> questionnode.question_tixing_res.ExtraEntry
	131, // 81: questionnode.question_timu_count_req.auth:type_name -> common.authorize
	138, // 82: questionnode.question_timu_count_req.query:type_name -> common.question_query
	99,  // 83: questionnode.question_timu_count_req.extra:type_name -> questionnode.question_timu_count_req.ExtraEntry
	133, // 84: questionnode.question_timu_count_res.rescode:type_name -> rescode.code
	100, // 85: questionnode.question_timu_count_res.extra:type_name -> questionnode.question_timu_count_res.ExtraEntry
	131, // 86: questionnode.question_timu_req.auth:type_name -> common.authorize
	138, // 87: questionnode.question_timu_req.query:type_name -> common.question_query
	101, // 88: questionnode.question_timu_req.extra:type_name -> questionnode.question_timu_req.ExtraEntry
	133, // 89: questionnode.question_timu_res.rescode:type_name -> rescode.code
	143, // 90: questionnode.question_timu_res.timus:type_name -> common.timu_item
	102, // 91: questionnode.question_timu_res.extra:type_name -> questionnode.question_timu_res.ExtraEntry
	131, // 92: questionnode.collect_timu_req.auth:type_name -> common.authorize
	103, // 93: questionnode.collect_timu_req.extra:type_name -> questionnode.collect_timu_req.ExtraEntry
	133, // 94: questionnode.collect_timu_res.rescode:type_name -> rescode.code
	104, // 95: questionnode.collect_timu_res.extra:type_name -> questionnode.collect_timu_res.ExtraEntry
	131, // 96: questionnode.query_collect_timu_req.auth:type_name -> common.authorize
	105, // 97: questionnode.query_collect_timu_req.extra:type_name -> questionnode.query_collect_timu_req.ExtraEntry
	133, // 98: questionnode.query_collect_timu_res.rescode:type_name -> rescode.code
	143, // 99: questionnode.query_collect_timu_res.timus:type_name -> common.timu_item
	106, // 100: questionnode.query_collect_timu_res.extra:type_name -> questionnode.query_collect_timu_res.ExtraEntry
	131, // 101: questionnode.modify_question_req.auth:type_name -> common.authorize
	144, // 102: questionnode.modify_question_req.timu:type_name -> common.question
	107, // 103: questionnode.modify_question_req.extra:type_name -> questionnode.modify_question_req.ExtraEntry
	133, // 104: questionnode.modify_question_res.rescode:type_name -> rescode.code
	108, // 105: questionnode.modify_question_res.extra:type_name -> questionnode.modify_question_res.ExtraEntry
	131, // 106: questionnode.modify_list_req.auth:type_name -> common.authorize
	109, // 107: questionnode.modify_list_req.extra:type_name -> questionnode.modify_list_req.ExtraEntry
	133, // 108: questionnode.modify_list_res.rescode:type_name -> rescode.code
	145, // 109: questionnode.modify_list_res.timus:type_name -> common.modify_item
	110, // 110: questionnode.modify_list_res.extra:type_name -> questionnode.modify_list_res.ExtraEntry
	131, // 111: questionnode.modify_count_req.auth:type_name -> common.authorize
	111, // 112: questionnode.modify_count_req.extra:type_name -> questionnode.modify_count_req.ExtraEntry
	133, // 113: questionnode.modify_count_res.rescode:type_name -> rescode.code
	112, // 114: questionnode.modify_count_res.extra:type_name -> questionnode.modify_count_res.ExtraEntry
	131, // 115: questionnode.approve_req.auth:type_name -> common.authorize
	146, // 116: questionnode.approve_req.dest:type_name -> common.approve_dest
	113, // 117: questionnode.approve_req.extra:type_name -> questionnode.approve_req.ExtraEntry
	133, // 118: questionnode.approve_res.rescode:type_name -> rescode.code
	114, // 119: questionnode.approve_res.extra:type_name -> questionnode.approve_res.ExtraEntry
	131, // 120: questionnode.timu_by_id_req.auth:type_name -> common.authorize
	115, // 121: questionnode.timu_by_id_req.extra:type_name -> questionnode.timu_by_id_req.ExtraEntry
	133, // 122: questionnode.timu_by_id_res.rescode:type_name -> rescode.code
	143, // 123: questionnode.timu_by_id_res.timu:type_name -> common.timu_item
	116, // 124: questionnode.timu_by_id_res.extra:type_name -> questionnode.timu_by_id_res.ExtraEntry
	131, // 125: questionnode.timu_add_req.auth:type_name -> common.authorize
	147, // 126: questionnode.timu_add_req.timu:type_name -> common.add_timu_item
	117, // 127: questionnode.timu_add_req.extra:type_name -> questionnode.timu_add_req.ExtraEntry
	133, // 128: questionnode.timu_add_res.rescode:type_name -> rescode.code
	118, // 129: questionnode.timu_add_res.extra:type_name -> questionnode.timu_add_res.ExtraEntry
	131, // 130: questionnode.add_list_req.auth:type_name -> common.authorize
	133, // 131: questionnode.add_list_res.rescode:type_name -> rescode.code
	147, // 132: questionnode.add_list_res.timus:type_name -> common.add_timu_item
	119, // 133: questionnode.add_list_res.extra:type_name -> questionnode.add_list_res.ExtraEntry
	131, // 134: questionnode.add_count_req.auth:type_name -> common.authorize
	120, // 135: questionnode.add_count_req.extra:type_name -> questionnode.add_count_req.ExtraEntry
	133, // 136: questionnode.add_count_res.rescode:type_name -> rescode.code
	121, // 137: questionnode.add_count_res.extra:type_name -> questionnode.add_count_res.ExtraEntry
	131, // 138: questionnode.tixing_by_vid_req.auth:type_name -> common.authorize
	122, // 139: questionnode.tixing_by_vid_req.extra:type_name -> questionnode.tixing_by_vid_req.ExtraEntry
	133, // 140: questionnode.tixing_by_vid_res.rescode:type_name -> rescode.code
	123, // 141: questionnode.tixing_by_vid_res.extra:type_name -> questionnode.tixing_by_vid_res.ExtraEntry
	131, // 142: questionnode.source_by_vid_req.auth:type_name -> common.authorize
	124, // 143: questionnode.source_by_vid_req.extra:type_name -> questionnode.source_by_vid_req.ExtraEntry
	133, // 144: questionnode.source_by_vid_res.rescode:type_name -> rescode.code
	125, // 145: questionnode.source_by_vid_res.extra:type_name -> questionnode.source_by_vid_res.ExtraEntry
	131, // 146: questionnode.ident_by_iid_req.auth:type_name -> common.authorize
	126, // 147: questionnode.ident_by_iid_req.extra:type_name -> questionnode.ident_by_iid_req.ExtraEntry
	133, // 148: questionnode.ident_by_iid_res.rescode:type_name -> rescode.code
	148, // 149: questionnode.ident_by_iid_res.result:type_name -> common.baidu_ident_item
	127, // 150: questionnode.ident_by_iid_res.extra:type_name -> questionnode.ident_by_iid_res.ExtraEntry
	131, // 151: questionnode.ident_list_req.auth:type_name -> common.authorize
	133, // 152: questionnode.ident_list_res.rescode:type_name -> rescode.code
	148, // 153: questionnode.ident_list_res.results:type_name -> common.baidu_ident_item
	128, // 154: questionnode.ident_list_res.extra:type_name -> questionnode.ident_list_res.ExtraEntry
	131, // 155: questionnode.ident_count_req.auth:type_name -> common.authorize
	129, // 156: questionnode.ident_count_req.extra:type_name -> questionnode.ident_count_req.ExtraEntry
	133, // 157: questionnode.ident_count_res.rescode:type_name -> rescode.code
	130, // 158: questionnode.ident_count_res.extra:type_name -> questionnode.ident_count_res.ExtraEntry
	0,   // 159: questionnode.questionnode_service.grade_cate_add:input_type -> questionnode.grade_cate_add_req
	2,   // 160: questionnode.questionnode_service.grade_cate_count:input_type -> questionnode.grade_cate_count_req
	4,   // 161: questionnode.questionnode_service.grade_cate_list:input_type -> questionnode.grade_cate_list_req
	6,   // 162: questionnode.questionnode_service.home_black_data:input_type -> questionnode.home_black_data_req
	8,   // 163: questionnode.questionnode_service.grade_subject:input_type -> questionnode.grade_subject_req
	10,  // 164: questionnode.questionnode_service.school_roll_add:input_type -> questionnode.school_roll_add_req
	12,  // 165: questionnode.questionnode_service.school_roll_count:input_type -> questionnode.school_roll_count_req
	14,  // 166: questionnode.questionnode_service.school_list:input_type -> questionnode.school_list_req
	16,  // 167: questionnode.questionnode_service.subject_cate_add:input_type -> questionnode.subject_cate_add_req
	18,  // 168: questionnode.questionnode_service.subject_cate_count:input_type -> questionnode.subject_cate_count_req
	20,  // 169: questionnode.questionnode_service.subject_cate_list:input_type -> questionnode.subejct_cate_list_req
	22,  // 170: questionnode.questionnode_service.question_version:input_type -> questionnode.question_version_req
	24,  // 171: questionnode.questionnode_service.question_chapter:input_type -> questionnode.question_chapter_req
	27,  // 172: questionnode.questionnode_service.subject_name:input_type -> questionnode.subject_name_req
	29,  // 173: questionnode.questionnode_service.question_source:input_type -> questionnode.question_source_req
	31,  // 174: questionnode.questionnode_service.question_tixing:input_type -> questionnode.question_tixing_req
	33,  // 175: questionnode.questionnode_service.question_timu_count:input_type -> questionnode.question_timu_count_req
	35,  // 176: questionnode.questionnode_service.question_timu:input_type -> questionnode.question_timu_req
	37,  // 177: questionnode.questionnode_service.collect_timu:input_type -> questionnode.collect_timu_req
	39,  // 178: questionnode.questionnode_service.query_collect_timu:input_type -> questionnode.query_collect_timu_req
	41,  // 179: questionnode.questionnode_service.modify_question:input_type -> questionnode.modify_question_req
	43,  // 180: questionnode.questionnode_service.modify_list:input_type -> questionnode.modify_list_req
	45,  // 181: questionnode.questionnode_service.modify_count:input_type -> questionnode.modify_count_req
	51,  // 182: questionnode.questionnode_service.question_timu_add:input_type -> questionnode.timu_add_req
	53,  // 183: questionnode.questionnode_service.add_list:input_type -> questionnode.add_list_req
	55,  // 184: questionnode.questionnode_service.add_count:input_type -> questionnode.add_count_req
	47,  // 185: questionnode.questionnode_service.approve:input_type -> questionnode.approve_req
	49,  // 186: questionnode.questionnode_service.question_timu_by_id:input_type -> questionnode.timu_by_id_req
	57,  // 187: questionnode.questionnode_service.tixing_by_vid:input_type -> questionnode.tixing_by_vid_req
	59,  // 188: questionnode.questionnode_service.source_by_vid:input_type -> questionnode.source_by_vid_req
	61,  // 189: questionnode.questionnode_service.ident_by_iid:input_type -> questionnode.ident_by_iid_req
	63,  // 190: questionnode.questionnode_service.ident_list:input_type -> questionnode.ident_list_req
	65,  // 191: questionnode.questionnode_service.ident_count:input_type -> questionnode.ident_count_req
	1,   // 192: questionnode.questionnode_service.grade_cate_add:output_type -> questionnode.grade_cate_add_res
	3,   // 193: questionnode.questionnode_service.grade_cate_count:output_type -> questionnode.grade_cate_count_res
	5,   // 194: questionnode.questionnode_service.grade_cate_list:output_type -> questionnode.grade_cate_list_res
	7,   // 195: questionnode.questionnode_service.home_black_data:output_type -> questionnode.home_black_data_res
	9,   // 196: questionnode.questionnode_service.grade_subject:output_type -> questionnode.grade_subject_res
	11,  // 197: questionnode.questionnode_service.school_roll_add:output_type -> questionnode.school_roll_add_res
	13,  // 198: questionnode.questionnode_service.school_roll_count:output_type -> questionnode.school_roll_count_res
	15,  // 199: questionnode.questionnode_service.school_list:output_type -> questionnode.school_list_res
	17,  // 200: questionnode.questionnode_service.subject_cate_add:output_type -> questionnode.subject_cate_add_res
	19,  // 201: questionnode.questionnode_service.subject_cate_count:output_type -> questionnode.subject_cate_count_res
	21,  // 202: questionnode.questionnode_service.subject_cate_list:output_type -> questionnode.subject_cate_list_res
	23,  // 203: questionnode.questionnode_service.question_version:output_type -> questionnode.question_version_res
	26,  // 204: questionnode.questionnode_service.question_chapter:output_type -> questionnode.question_chapter_res
	28,  // 205: questionnode.questionnode_service.subject_name:output_type -> questionnode.subject_name_res
	30,  // 206: questionnode.questionnode_service.question_source:output_type -> questionnode.question_source_res
	32,  // 207: questionnode.questionnode_service.question_tixing:output_type -> questionnode.question_tixing_res
	34,  // 208: questionnode.questionnode_service.question_timu_count:output_type -> questionnode.question_timu_count_res
	36,  // 209: questionnode.questionnode_service.question_timu:output_type -> questionnode.question_timu_res
	38,  // 210: questionnode.questionnode_service.collect_timu:output_type -> questionnode.collect_timu_res
	40,  // 211: questionnode.questionnode_service.query_collect_timu:output_type -> questionnode.query_collect_timu_res
	42,  // 212: questionnode.questionnode_service.modify_question:output_type -> questionnode.modify_question_res
	44,  // 213: questionnode.questionnode_service.modify_list:output_type -> questionnode.modify_list_res
	46,  // 214: questionnode.questionnode_service.modify_count:output_type -> questionnode.modify_count_res
	52,  // 215: questionnode.questionnode_service.question_timu_add:output_type -> questionnode.timu_add_res
	54,  // 216: questionnode.questionnode_service.add_list:output_type -> questionnode.add_list_res
	56,  // 217: questionnode.questionnode_service.add_count:output_type -> questionnode.add_count_res
	48,  // 218: questionnode.questionnode_service.approve:output_type -> questionnode.approve_res
	50,  // 219: questionnode.questionnode_service.question_timu_by_id:output_type -> questionnode.timu_by_id_res
	58,  // 220: questionnode.questionnode_service.tixing_by_vid:output_type -> questionnode.tixing_by_vid_res
	60,  // 221: questionnode.questionnode_service.source_by_vid:output_type -> questionnode.source_by_vid_res
	62,  // 222: questionnode.questionnode_service.ident_by_iid:output_type -> questionnode.ident_by_iid_res
	64,  // 223: questionnode.questionnode_service.ident_list:output_type -> questionnode.ident_list_res
	66,  // 224: questionnode.questionnode_service.ident_count:output_type -> questionnode.ident_count_res
	192, // [192:225] is the sub-list for method output_type
	159, // [159:192] is the sub-list for method input_type
	159, // [159:159] is the sub-list for extension type_name
	159, // [159:159] is the sub-list for extension extendee
	0,   // [0:159] is the sub-list for field type_name
}

func init() { file_questionnode_proto_init() }
func file_questionnode_proto_init() {
	if File_questionnode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_questionnode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeCateAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeCateAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeCateCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeCateCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeCateListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeCateListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBlackDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBlackDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeSubjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeSubjectRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolRollAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolRollAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolRollCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolRollCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectCateAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectCateAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectCateCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectCateCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubejctCateListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectCateListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionVersionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionChapterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterResItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionChapterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectNameRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionSourceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionSourceRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionTixingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionTixingRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionTimuCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionTimuCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionTimuReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionTimuRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectTimuReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectTimuRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCollectTimuReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCollectTimuRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyQuestionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyQuestionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimuByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimuByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimuAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimuAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TixingByVidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TixingByVidRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceByVidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceByVidRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentByIidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentByIidRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnode_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_questionnode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   131,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_questionnode_proto_goTypes,
		DependencyIndexes: file_questionnode_proto_depIdxs,
		MessageInfos:      file_questionnode_proto_msgTypes,
	}.Build()
	File_questionnode_proto = out.File
	file_questionnode_proto_rawDesc = nil
	file_questionnode_proto_goTypes = nil
	file_questionnode_proto_depIdxs = nil
}
