syntax = "proto3";
package questionnode;
import "rescode/rescode.proto";
import "common/common.proto";

option go_package="./questionnode";

message GradeCateAddReq {
    common.Authorize    auth = 1;
    int64               uid = 2;
    common.GradeCate   grade = 3;
    map<string,string>  extra = 4;
}

message GradeCateAddRes {
    rescode.Code          rescode = 1;
    string                resmsg = 2;
    map<string,string>    extra = 3;
}

message GradeCateCountReq {
    common.Authorize    auth = 1;
    int64               uid = 2;
    map<string,string>  extra = 3;
}

message GradeCateCountRes {
    rescode.Code            rescode = 1;
    string                  resmsg = 2;
    int32                   count = 3;
    map<string,string>      extra = 4;
}

message GradeCateListReq {
    common.Authorize    auth = 1;
    int64               uid = 2;
    int32               page = 3;
    int32               size = 4;
    map<string,string>  extra = 5;
}

message GradeCateListRes {
    rescode.Code                rescode = 1;
    string                      resmsg = 2;
    repeated common.GradeCate  lists = 3;
    map<string,string>          extra = 4;
}

message HomeBlackDataReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    int32                   school = 3;
    map<string,string>      extra = 4;
}

message HomeBlackDataRes {
    rescode.Code                    rescode = 1;
    string                          resmsg = 2;
    repeated common.SchoolStatic   lists =  3;
    map<string,string>              extra = 4;
}

message GradeSubjectReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    int32                   index = 3;
    map<string,string>      extra = 4;
}

message GradeSubjectRes {
    rescode.Code                    rescode = 1;
    string                          resmsg = 2;
    repeated common.GradeSubject   lists = 3;
    map<string,string>              extra = 4;
}

message SchoolRollAddReq {
    common.Authorize    auth = 1;
    int64               uid = 2;
    common.SchoolRoll  roll = 3;
    map<string,string>  extra = 4;
}

message SchoolRollAddRes {
    rescode.Code          rescode = 1;
    string                resmsg = 2;
    map<string,string>    extra = 3;
}

message SchoolRollCountReq {
    common.Authorize    auth = 1;
    int64               uid = 2;
    map<string,string>  extra = 3;
}

message SchoolRollCountRes {
    rescode.Code            rescode = 1;
    string                  resmsg = 2;
    int32                   count = 3;
    map<string,string>      extra = 4;
}

message SchoolListReq {
    common.Authorize    auth = 1;
    int64               uid = 2;
    int32               page = 3;
    int32               size = 4;
    map<string,string>  extra = 5;
}

message SchoolListRes {
    rescode.Code                rescode = 1;
    string                      resmsg = 2;
    repeated common.SchoolRoll lists = 3;
    map<string,string>          extra = 4;
}

message SubjectCateAddReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    common.SubjectCate     subject = 3;
    map<string,string>      extra = 4;
}

message SubjectCateAddRes {
    rescode.Code          rescode = 1;
    string                resmsg = 2;
    map<string,string>    extra = 3;
}

message SubjectCateCountReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    map<string,string>      extra = 3;
}

message SubjectCateCountRes {
    rescode.Code            rescode = 1;
    string                  resmsg = 2;
    int32                   count = 3;
    map<string,string>      extra = 4;
}

message SubejctCateListReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    int32                   page = 3;
    int32                   size = 4;
    map<string,string>      extra = 5;
}

message SubjectCateListRes {
    rescode.Code                    rescode = 1;
    string                          resmsg = 2;
    repeated common.SubjectCate    lists = 3;
    map<string,string>              extra = 4;
}

message QuestionVersionReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    common.QuestionQuery   query = 3;
    map<string,string>      extra = 4;
}

message QuestionVersionRes {
    rescode.Code                    rescode = 1;
    string                          resmsg = 2;
    repeated common.VersionItem    lists = 3;
    map<string,string>              extra = 4;
}

message QuestionChapterReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    common.QuestionQuery   query = 3;
    map<string,string>      extra = 4;
}

message ChapterResItem {
    string                          uid = 1;
    string                          title = 2;
    repeated common.ChapterItem    childs = 3;
}

message QuestionChapterRes {
    rescode.Code                rescode = 1;
    string                      resmsg = 2;
    repeated ChapterResItem   lists = 3;
    map<string,string>          extra = 4;
}

message SubjectNameReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    string                  param = 3;
    map<string,string>      extra = 4;
}

message SubjectNameRes {
    rescode.Code          rescode = 1;
    string                resmsg = 2;
    string                name = 3;
    map<string,string>    extra = 4;
}

message QuestionSourceReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    common.QuestionQuery   query = 3;
    map<string,string>      extra = 4;
}

message QuestionSourceRes {
    rescode.Code                rescode = 1;
    string                      resmsg = 2;
    repeated common.SourceItem sources = 3;
    map<string,string>          extra = 4;
}

message QuestionTixingReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    common.QuestionQuery   query = 3;
    map<string,string>      extra = 4;
}

message QuestionTixingRes {
    rescode.Code                rescode = 1;
    string                      resmsg = 2;
    repeated common.TixingItem tixings = 3;
    map<string,string>          extra = 4;
}

message QuestionTimuCountReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    common.QuestionQuery   query = 3;
    map<string,string>      extra = 4;
}

message QuestionTimuCountRes {
    rescode.Code                rescode = 1;
    string                      resmsg = 2;
    int32                       count = 3;
    map<string,string>          extra = 4;
}

message QuestionTimuReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    common.QuestionQuery   query = 3;
    map<string,string>      extra = 4;
}

message QuestionTimuRes {
    rescode.Code                rescode = 1;
    string                      resmsg = 2;
    repeated common.TimuItem   timus = 3;
    map<string,string>          extra = 4;
}

message CollectTimuReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    string                  cid = 3;
    int64                   op = 4;
    map<string,string>      extra = 5;
}

message CollectTimuRes {
    rescode.Code          rescode = 1;
    string                resmsg = 2;
    map<string,string>    extra = 3;
}

message QueryCollectTimuReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    int32                   page = 3;
    int32                   size = 4;
    map<string,string>      extra = 5;
}

message QueryCollectTimuRes {
    rescode.Code                rescode = 1;
    string                      resmsg = 2;
    repeated common.TimuItem   timus = 3;
    map<string,string>          extra = 4;
}

message ModifyQuestionReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    string                  tid = 3;
    common.Question         timu = 4;
    map<string,string>      extra=  5;
}

message ModifyQuestionRes {
    rescode.Code          rescode = 1;
    string                resmsg = 2;
    map<string,string>    extra = 3;
}

message ModifyListReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    int32                   page = 3;
    int32                   size = 4;
    string                  sorted  = 5;
    string                  status = 6;
    map<string,string>      extra = 7;
}

message ModifyListRes {
    rescode.Code                rescode = 1;
    string                      resmsg = 2;
    repeated common.ModifyItem timus = 3;
    map<string,string>          extra = 4;
}

message ModifyCountReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    string                  status = 3;
    map<string,string>      extra = 4;
}

message ModifyCountRes {
    rescode.Code                rescode = 1;
    string                      resmsg = 2;
    int32                       count = 3;
    map<string,string>          extra = 4;
}

message ApproveReq {
    common.Authorize        auth = 1;
    int64                   id = 2;
    int64                   uid = 3;
    string                  status = 4;
    string                  info = 5;
    double                  reward = 6;
    common.ApproveDest     dest = 7;
    map<string,string>      extra = 8;
}

message ApproveRes {
    rescode.Code       rescode = 1;
    string             resmsg = 2;
    map<string,string> extra = 3;
}

message TimuByIdReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    string                  tid = 3;
    map<string,string>      extra = 4;
}

message TimuByIdRes {
    rescode.Code       rescode = 1;
    string             resmsg = 2;
    common.TimuItem   timu = 3;
    map<string,string> extra = 4;
}

message TimuAddReq {
    common.Authorize            auth = 1;
    int64                       uid = 2;
    common.AddTimuItem        timu = 3;
    map<string,string>          extra = 4;
}

message TimuAddRes {
    rescode.Code       rescode = 1;
    string             resmsg = 2;
    map<string,string> extra = 3;
}


message AddListReq {
    common.Authorize    auth = 1;
    int64               uid = 2;
    int32               page = 3;
    int32               size = 4;
    string              sorted = 5;
    string              status = 6;
}

message AddListRes {
    rescode.Code                    rescode = 1;
    string                          resmsg = 2;
    repeated common.AddTimuItem   timus = 3;
    map<string,string>              extra = 4;
}

message AddCountReq {
    common.Authorize            auth = 1;
    int64                       uid = 2;
    string                      status = 3;
    map<string,string>          extra = 4;
}

message AddCountRes {
    rescode.Code            rescode = 1;
    string                  resmsg = 2;
    int32                   count = 3;
    map<string,string>      extra = 4;
}

message TixingByVidReq {
    common.Authorize         auth =1;
    string                   vid = 2;
    map<string,string>       extra = 3;
}

message TixingByVidRes {
    rescode.Code             rescode = 1;
    string                   resmsg = 2;
    repeated string          tixings = 3;
    map<string,string>       extra = 4;
}

message SourceByVidReq {
    common.Authorize          auth = 1;
    string                    vid = 2;
    map<string,string>        extra = 3;
}

message SourceByVidRes {
    rescode.Code             rescode = 1;
    string                   resmsg = 2;
    repeated string          sources = 3;
    map<string,string>       extra = 4;
}


message IdentByIidReq {
    common.Authorize         auth = 1;
    int64                    uid = 2;
    string                   iid = 3;
    map<string,string>       extra = 4;
}

message IdentByIidRes {
    rescode.Code              rescode = 1;
    string                    resmsg = 2;
    common.BaiduIdentItem   result = 3;
    map<string,string>        extra = 4;
}

message IdentListReq {
    common.Authorize        auth = 1;
    int64                   uid = 2;
    int32                   page = 3;
    int32                   size = 4;
    string                  sorted = 5;
    string                  status = 6;
    string                  iid = 7;
    string                  sign = 8;
}

message IdentListRes {
    rescode.Code                      rescode = 1;
    string                            resmsg = 2;
    repeated common.BaiduIdentItem  results = 3;
    map<string,string>                extra = 4;
}

message IdentCountReq {
    common.Authorize          auth = 1;
    int64                     uid = 2;
    string                    status = 3;
    map<string,string>        extra = 4; 
}

message IdentCountRes {
    rescode.Code         rescode = 1;
    string               resmsg = 2;
    int32                count = 3;
    map<string,string>   extra = 4;
}

message AddExamReq {
    common.Authorize            auth = 1;
    common.ExamItem             exam = 2;
    map<string,string>          extra = 3;
}

message AddExamRes {
    rescode.Code                rescode = 1;
    string                      resmsg = 2;
    repeated common.FootLog     desc = 3;
    map<string,string>          extra = 4;
}

message ExamListReq {
    common.Authorize            auth = 1;
    common.ReqExam              req = 2;
    map<string,string>          extra = 3;
}

message ExamListRes {
    rescode.Code                rescode = 1;
    string                      resmsg = 2;
    repeated common.ExamItem    exams = 3;
    map<string,string>          extra = 4;
}

service QuestionnodeService {
    // 添加年纪信息
    rpc  GradeCateAdd(GradeCateAddReq) returns(GradeCateAddRes) {}
    // 获取年纪总数
    rpc  GradeCateCount(GradeCateCountReq) returns(GradeCateCountRes) {}
    // 获取年级信息
    rpc  GradeCateList(GradeCateListReq) returns(GradeCateListRes) {}
    // 获取主页最新动态统计信息
    rpc  HomeBlackData(HomeBlackDataReq) returns(HomeBlackDataRes) {}
    // 获取学籍对应的年级+科目
    rpc  GradeSubject(GradeSubjectReq) returns(GradeSubjectRes) {}
    // 添加学级信息
    rpc  SchoolRollAdd(SchoolRollAddReq) returns(SchoolRollAddRes) {}
    // 获取年级总数
    rpc  SchoolRollCount(SchoolRollCountReq) returns(SchoolRollCountRes) {}
    // 获取年级列表信息
    rpc  SchoolList(SchoolListReq) returns(SchoolListRes) {}
    // 添加科目信息
    rpc  SubjectCateAdd(SubjectCateAddReq) returns(SubjectCateAddRes) {}
    // 获取科目总数
    rpc  SubjectCateCount(SubjectCateCountReq) returns(SubjectCateCountRes) {}
    // 获取科目列表
    rpc  SubjectCateList(SubejctCateListReq) returns(SubjectCateListRes) {}
    // 获取版本
    rpc  QuestionVersion(QuestionVersionReq) returns(QuestionVersionRes) {}
    // 获取章节
    rpc  QuestionChapter(QuestionChapterReq) returns(QuestionChapterRes) {}
    // 获取科目名
    rpc  SubjectName(SubjectNameReq) returns(SubjectNameRes) {}
    // 获取来源
    rpc  QuestionSource(QuestionSourceReq) returns(QuestionSourceRes) {}
    // 获取题型
    rpc  QuestionTixing(QuestionTixingReq) returns(QuestionTixingRes) {}
    // 获取题目数量
    rpc  QuestionTimuCount(QuestionTimuCountReq) returns(QuestionTimuCountRes) {}
    // 获取题目
    rpc  QuestionTimu(QuestionTimuReq) returns(QuestionTimuRes) {}
    // 收藏题目
    rpc  CollectTimu(CollectTimuReq) returns(CollectTimuRes) {}
    // 获取收藏的题目
    rpc  QueryCollectTimu(QueryCollectTimuReq) returns(QueryCollectTimuRes) {}
    // 纠错试题
    rpc  ModifyQuestion(ModifyQuestionReq) returns(ModifyQuestionRes) {}
    // 获取纠错列表
    rpc  ModifyList(ModifyListReq) returns(ModifyListRes) {}
    // 获取纠错数量
    rpc  ModifyCount(ModifyCountReq) returns(ModifyCountRes) {}
    // 添加试题
    rpc  QuestionTimuAdd(TimuAddReq) returns(TimuAddRes) {}
    // 获取添加的试题
    rpc  AddList(AddListReq) returns(AddListRes) {}
    // 获取添加的数量
    rpc  AddCount(AddCountReq) returns(AddCountRes) {}
    // 审核修改的试题
    rpc  Approve(ApproveReq) returns(ApproveRes) {}
    // 根据试题id请求题目
    rpc  QuestionTimuById(TimuByIdReq) returns(TimuByIdRes) {}
    // 通过版本id获取题型列表
    rpc  TixingByVid(TixingByVidReq) returns(TixingByVidRes) {}
    // 通过版本id获取来源
    rpc  SourceByVid(SourceByVidReq) returns(SourceByVidRes) {}
    // 根据识别id获取识别记录
    rpc  IdentByIid(IdentByIidReq) returns(IdentByIidRes) {}
    // 获取识别列表
    rpc  IdentList(IdentListReq) returns(IdentListRes) {}
    // 获取识别列表熟数量
    rpc  IdentCount(IdentCountReq) returns(IdentCountRes) {}

    // 添加试题
    rpc AddExam(AddExamReq) returns (AddExamRes) {}
    // 获取试卷列表
    rpc ExamLists(ExamListReq) returns (ExamListRes) {}
}