// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: questionnode.proto

package questionnode

import (
	_ "github.com/heegspace/heegproto/common"
	_ "github.com/heegspace/heegproto/rescode"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for QuestionnodeService service

func NewQuestionnodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for QuestionnodeService service

type QuestionnodeService interface {
	// 添加年纪信息
	GradeCateAdd(ctx context.Context, in *GradeCateAddReq, opts ...client.CallOption) (*GradeCateAddRes, error)
	// 获取年纪总数
	GradeCateCount(ctx context.Context, in *GradeCateCountReq, opts ...client.CallOption) (*GradeCateCountRes, error)
	// 获取年级信息
	GradeCateList(ctx context.Context, in *GradeCateListReq, opts ...client.CallOption) (*GradeCateListRes, error)
	// 获取主页最新动态统计信息
	HomeBlackData(ctx context.Context, in *HomeBlackDataReq, opts ...client.CallOption) (*HomeBlackDataRes, error)
	// 获取学籍对应的年级+科目
	GradeSubject(ctx context.Context, in *GradeSubjectReq, opts ...client.CallOption) (*GradeSubjectRes, error)
	// 添加学级信息
	SchoolRollAdd(ctx context.Context, in *SchoolRollAddReq, opts ...client.CallOption) (*SchoolRollAddRes, error)
	// 获取年级总数
	SchoolRollCount(ctx context.Context, in *SchoolRollCountReq, opts ...client.CallOption) (*SchoolRollCountRes, error)
	// 获取年级列表信息
	SchoolList(ctx context.Context, in *SchoolListReq, opts ...client.CallOption) (*SchoolListRes, error)
	// 添加科目信息
	SubjectCateAdd(ctx context.Context, in *SubjectCateAddReq, opts ...client.CallOption) (*SubjectCateAddRes, error)
	// 获取科目总数
	SubjectCateCount(ctx context.Context, in *SubjectCateCountReq, opts ...client.CallOption) (*SubjectCateCountRes, error)
	// 获取科目列表
	SubjectCateList(ctx context.Context, in *SubejctCateListReq, opts ...client.CallOption) (*SubjectCateListRes, error)
	// 获取版本
	QuestionVersion(ctx context.Context, in *QuestionVersionReq, opts ...client.CallOption) (*QuestionVersionRes, error)
	// 获取章节
	QuestionChapter(ctx context.Context, in *QuestionChapterReq, opts ...client.CallOption) (*QuestionChapterRes, error)
	// 获取科目名
	SubjectName(ctx context.Context, in *SubjectNameReq, opts ...client.CallOption) (*SubjectNameRes, error)
	// 获取来源
	QuestionSource(ctx context.Context, in *QuestionSourceReq, opts ...client.CallOption) (*QuestionSourceRes, error)
	// 获取题型
	QuestionTixing(ctx context.Context, in *QuestionTixingReq, opts ...client.CallOption) (*QuestionTixingRes, error)
	// 获取题目数量
	QuestionTimuCount(ctx context.Context, in *QuestionTimuCountReq, opts ...client.CallOption) (*QuestionTimuCountRes, error)
	// 获取题目
	QuestionTimu(ctx context.Context, in *QuestionTimuReq, opts ...client.CallOption) (*QuestionTimuRes, error)
	// 收藏题目
	CollectTimu(ctx context.Context, in *CollectTimuReq, opts ...client.CallOption) (*CollectTimuRes, error)
	// 获取收藏的题目
	QueryCollectTimu(ctx context.Context, in *QueryCollectTimuReq, opts ...client.CallOption) (*QueryCollectTimuRes, error)
	// 纠错试题
	ModifyQuestion(ctx context.Context, in *ModifyQuestionReq, opts ...client.CallOption) (*ModifyQuestionRes, error)
	// 获取纠错列表
	ModifyList(ctx context.Context, in *ModifyListReq, opts ...client.CallOption) (*ModifyListRes, error)
	// 获取纠错数量
	ModifyCount(ctx context.Context, in *ModifyCountReq, opts ...client.CallOption) (*ModifyCountRes, error)
	// 添加试题
	QuestionTimuAdd(ctx context.Context, in *TimuAddReq, opts ...client.CallOption) (*TimuAddRes, error)
	// 获取添加的试题
	AddList(ctx context.Context, in *AddListReq, opts ...client.CallOption) (*AddListRes, error)
	// 获取添加的数量
	AddCount(ctx context.Context, in *AddCountReq, opts ...client.CallOption) (*AddCountRes, error)
	// 审核修改的试题
	Approve(ctx context.Context, in *ApproveReq, opts ...client.CallOption) (*ApproveRes, error)
	// 根据试题id请求题目
	QuestionTimuById(ctx context.Context, in *TimuByIdReq, opts ...client.CallOption) (*TimuByIdRes, error)
	// 通过版本id获取题型列表
	TixingByVid(ctx context.Context, in *TixingByVidReq, opts ...client.CallOption) (*TixingByVidRes, error)
	// 通过版本id获取来源
	SourceByVid(ctx context.Context, in *SourceByVidReq, opts ...client.CallOption) (*SourceByVidRes, error)
	// 根据识别id获取识别记录
	IdentByIid(ctx context.Context, in *IdentByIidReq, opts ...client.CallOption) (*IdentByIidRes, error)
	// 获取识别列表
	IdentList(ctx context.Context, in *IdentListReq, opts ...client.CallOption) (*IdentListRes, error)
	// 获取识别列表熟数量
	IdentCount(ctx context.Context, in *IdentCountReq, opts ...client.CallOption) (*IdentCountRes, error)
	// 添加文档
	AddDocs(ctx context.Context, in *AddDocsReq, opts ...client.CallOption) (*AddDocsRes, error)
	// 更新文档
	UpdateDocs(ctx context.Context, in *UpdateDocsReq, opts ...client.CallOption) (*UpdateDocsRes, error)
	// 获取试卷列表
	DocsLists(ctx context.Context, in *DocsListReq, opts ...client.CallOption) (*DocsListRes, error)
	// 获取试卷数量
	DocsCount(ctx context.Context, in *DocsCountReq, opts ...client.CallOption) (*DocsCountRes, error)
	// 获取阅览信息接口
	Preview(ctx context.Context, in *PreviewReq, opts ...client.CallOption) (*PreviewRes, error)
}

type questionnodeService struct {
	c    client.Client
	name string
}

func NewQuestionnodeService(name string, c client.Client) QuestionnodeService {
	return &questionnodeService{
		c:    c,
		name: name,
	}
}

func (c *questionnodeService) GradeCateAdd(ctx context.Context, in *GradeCateAddReq, opts ...client.CallOption) (*GradeCateAddRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.GradeCateAdd", in)
	out := new(GradeCateAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) GradeCateCount(ctx context.Context, in *GradeCateCountReq, opts ...client.CallOption) (*GradeCateCountRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.GradeCateCount", in)
	out := new(GradeCateCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) GradeCateList(ctx context.Context, in *GradeCateListReq, opts ...client.CallOption) (*GradeCateListRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.GradeCateList", in)
	out := new(GradeCateListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) HomeBlackData(ctx context.Context, in *HomeBlackDataReq, opts ...client.CallOption) (*HomeBlackDataRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.HomeBlackData", in)
	out := new(HomeBlackDataRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) GradeSubject(ctx context.Context, in *GradeSubjectReq, opts ...client.CallOption) (*GradeSubjectRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.GradeSubject", in)
	out := new(GradeSubjectRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) SchoolRollAdd(ctx context.Context, in *SchoolRollAddReq, opts ...client.CallOption) (*SchoolRollAddRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.SchoolRollAdd", in)
	out := new(SchoolRollAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) SchoolRollCount(ctx context.Context, in *SchoolRollCountReq, opts ...client.CallOption) (*SchoolRollCountRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.SchoolRollCount", in)
	out := new(SchoolRollCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) SchoolList(ctx context.Context, in *SchoolListReq, opts ...client.CallOption) (*SchoolListRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.SchoolList", in)
	out := new(SchoolListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) SubjectCateAdd(ctx context.Context, in *SubjectCateAddReq, opts ...client.CallOption) (*SubjectCateAddRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.SubjectCateAdd", in)
	out := new(SubjectCateAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) SubjectCateCount(ctx context.Context, in *SubjectCateCountReq, opts ...client.CallOption) (*SubjectCateCountRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.SubjectCateCount", in)
	out := new(SubjectCateCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) SubjectCateList(ctx context.Context, in *SubejctCateListReq, opts ...client.CallOption) (*SubjectCateListRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.SubjectCateList", in)
	out := new(SubjectCateListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) QuestionVersion(ctx context.Context, in *QuestionVersionReq, opts ...client.CallOption) (*QuestionVersionRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.QuestionVersion", in)
	out := new(QuestionVersionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) QuestionChapter(ctx context.Context, in *QuestionChapterReq, opts ...client.CallOption) (*QuestionChapterRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.QuestionChapter", in)
	out := new(QuestionChapterRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) SubjectName(ctx context.Context, in *SubjectNameReq, opts ...client.CallOption) (*SubjectNameRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.SubjectName", in)
	out := new(SubjectNameRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) QuestionSource(ctx context.Context, in *QuestionSourceReq, opts ...client.CallOption) (*QuestionSourceRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.QuestionSource", in)
	out := new(QuestionSourceRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) QuestionTixing(ctx context.Context, in *QuestionTixingReq, opts ...client.CallOption) (*QuestionTixingRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.QuestionTixing", in)
	out := new(QuestionTixingRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) QuestionTimuCount(ctx context.Context, in *QuestionTimuCountReq, opts ...client.CallOption) (*QuestionTimuCountRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.QuestionTimuCount", in)
	out := new(QuestionTimuCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) QuestionTimu(ctx context.Context, in *QuestionTimuReq, opts ...client.CallOption) (*QuestionTimuRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.QuestionTimu", in)
	out := new(QuestionTimuRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) CollectTimu(ctx context.Context, in *CollectTimuReq, opts ...client.CallOption) (*CollectTimuRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.CollectTimu", in)
	out := new(CollectTimuRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) QueryCollectTimu(ctx context.Context, in *QueryCollectTimuReq, opts ...client.CallOption) (*QueryCollectTimuRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.QueryCollectTimu", in)
	out := new(QueryCollectTimuRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) ModifyQuestion(ctx context.Context, in *ModifyQuestionReq, opts ...client.CallOption) (*ModifyQuestionRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.ModifyQuestion", in)
	out := new(ModifyQuestionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) ModifyList(ctx context.Context, in *ModifyListReq, opts ...client.CallOption) (*ModifyListRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.ModifyList", in)
	out := new(ModifyListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) ModifyCount(ctx context.Context, in *ModifyCountReq, opts ...client.CallOption) (*ModifyCountRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.ModifyCount", in)
	out := new(ModifyCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) QuestionTimuAdd(ctx context.Context, in *TimuAddReq, opts ...client.CallOption) (*TimuAddRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.QuestionTimuAdd", in)
	out := new(TimuAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) AddList(ctx context.Context, in *AddListReq, opts ...client.CallOption) (*AddListRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.AddList", in)
	out := new(AddListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) AddCount(ctx context.Context, in *AddCountReq, opts ...client.CallOption) (*AddCountRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.AddCount", in)
	out := new(AddCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) Approve(ctx context.Context, in *ApproveReq, opts ...client.CallOption) (*ApproveRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.Approve", in)
	out := new(ApproveRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) QuestionTimuById(ctx context.Context, in *TimuByIdReq, opts ...client.CallOption) (*TimuByIdRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.QuestionTimuById", in)
	out := new(TimuByIdRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) TixingByVid(ctx context.Context, in *TixingByVidReq, opts ...client.CallOption) (*TixingByVidRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.TixingByVid", in)
	out := new(TixingByVidRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) SourceByVid(ctx context.Context, in *SourceByVidReq, opts ...client.CallOption) (*SourceByVidRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.SourceByVid", in)
	out := new(SourceByVidRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) IdentByIid(ctx context.Context, in *IdentByIidReq, opts ...client.CallOption) (*IdentByIidRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.IdentByIid", in)
	out := new(IdentByIidRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) IdentList(ctx context.Context, in *IdentListReq, opts ...client.CallOption) (*IdentListRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.IdentList", in)
	out := new(IdentListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) IdentCount(ctx context.Context, in *IdentCountReq, opts ...client.CallOption) (*IdentCountRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.IdentCount", in)
	out := new(IdentCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) AddDocs(ctx context.Context, in *AddDocsReq, opts ...client.CallOption) (*AddDocsRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.AddDocs", in)
	out := new(AddDocsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) UpdateDocs(ctx context.Context, in *UpdateDocsReq, opts ...client.CallOption) (*UpdateDocsRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.UpdateDocs", in)
	out := new(UpdateDocsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) DocsLists(ctx context.Context, in *DocsListReq, opts ...client.CallOption) (*DocsListRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.DocsLists", in)
	out := new(DocsListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) DocsCount(ctx context.Context, in *DocsCountReq, opts ...client.CallOption) (*DocsCountRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.DocsCount", in)
	out := new(DocsCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnodeService) Preview(ctx context.Context, in *PreviewReq, opts ...client.CallOption) (*PreviewRes, error) {
	req := c.c.NewRequest(c.name, "QuestionnodeService.Preview", in)
	out := new(PreviewRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QuestionnodeService service

type QuestionnodeServiceHandler interface {
	// 添加年纪信息
	GradeCateAdd(context.Context, *GradeCateAddReq, *GradeCateAddRes) error
	// 获取年纪总数
	GradeCateCount(context.Context, *GradeCateCountReq, *GradeCateCountRes) error
	// 获取年级信息
	GradeCateList(context.Context, *GradeCateListReq, *GradeCateListRes) error
	// 获取主页最新动态统计信息
	HomeBlackData(context.Context, *HomeBlackDataReq, *HomeBlackDataRes) error
	// 获取学籍对应的年级+科目
	GradeSubject(context.Context, *GradeSubjectReq, *GradeSubjectRes) error
	// 添加学级信息
	SchoolRollAdd(context.Context, *SchoolRollAddReq, *SchoolRollAddRes) error
	// 获取年级总数
	SchoolRollCount(context.Context, *SchoolRollCountReq, *SchoolRollCountRes) error
	// 获取年级列表信息
	SchoolList(context.Context, *SchoolListReq, *SchoolListRes) error
	// 添加科目信息
	SubjectCateAdd(context.Context, *SubjectCateAddReq, *SubjectCateAddRes) error
	// 获取科目总数
	SubjectCateCount(context.Context, *SubjectCateCountReq, *SubjectCateCountRes) error
	// 获取科目列表
	SubjectCateList(context.Context, *SubejctCateListReq, *SubjectCateListRes) error
	// 获取版本
	QuestionVersion(context.Context, *QuestionVersionReq, *QuestionVersionRes) error
	// 获取章节
	QuestionChapter(context.Context, *QuestionChapterReq, *QuestionChapterRes) error
	// 获取科目名
	SubjectName(context.Context, *SubjectNameReq, *SubjectNameRes) error
	// 获取来源
	QuestionSource(context.Context, *QuestionSourceReq, *QuestionSourceRes) error
	// 获取题型
	QuestionTixing(context.Context, *QuestionTixingReq, *QuestionTixingRes) error
	// 获取题目数量
	QuestionTimuCount(context.Context, *QuestionTimuCountReq, *QuestionTimuCountRes) error
	// 获取题目
	QuestionTimu(context.Context, *QuestionTimuReq, *QuestionTimuRes) error
	// 收藏题目
	CollectTimu(context.Context, *CollectTimuReq, *CollectTimuRes) error
	// 获取收藏的题目
	QueryCollectTimu(context.Context, *QueryCollectTimuReq, *QueryCollectTimuRes) error
	// 纠错试题
	ModifyQuestion(context.Context, *ModifyQuestionReq, *ModifyQuestionRes) error
	// 获取纠错列表
	ModifyList(context.Context, *ModifyListReq, *ModifyListRes) error
	// 获取纠错数量
	ModifyCount(context.Context, *ModifyCountReq, *ModifyCountRes) error
	// 添加试题
	QuestionTimuAdd(context.Context, *TimuAddReq, *TimuAddRes) error
	// 获取添加的试题
	AddList(context.Context, *AddListReq, *AddListRes) error
	// 获取添加的数量
	AddCount(context.Context, *AddCountReq, *AddCountRes) error
	// 审核修改的试题
	Approve(context.Context, *ApproveReq, *ApproveRes) error
	// 根据试题id请求题目
	QuestionTimuById(context.Context, *TimuByIdReq, *TimuByIdRes) error
	// 通过版本id获取题型列表
	TixingByVid(context.Context, *TixingByVidReq, *TixingByVidRes) error
	// 通过版本id获取来源
	SourceByVid(context.Context, *SourceByVidReq, *SourceByVidRes) error
	// 根据识别id获取识别记录
	IdentByIid(context.Context, *IdentByIidReq, *IdentByIidRes) error
	// 获取识别列表
	IdentList(context.Context, *IdentListReq, *IdentListRes) error
	// 获取识别列表熟数量
	IdentCount(context.Context, *IdentCountReq, *IdentCountRes) error
	// 添加文档
	AddDocs(context.Context, *AddDocsReq, *AddDocsRes) error
	// 更新文档
	UpdateDocs(context.Context, *UpdateDocsReq, *UpdateDocsRes) error
	// 获取试卷列表
	DocsLists(context.Context, *DocsListReq, *DocsListRes) error
	// 获取试卷数量
	DocsCount(context.Context, *DocsCountReq, *DocsCountRes) error
	// 获取阅览信息接口
	Preview(context.Context, *PreviewReq, *PreviewRes) error
}

func RegisterQuestionnodeServiceHandler(s server.Server, hdlr QuestionnodeServiceHandler, opts ...server.HandlerOption) error {
	type questionnodeService interface {
		GradeCateAdd(ctx context.Context, in *GradeCateAddReq, out *GradeCateAddRes) error
		GradeCateCount(ctx context.Context, in *GradeCateCountReq, out *GradeCateCountRes) error
		GradeCateList(ctx context.Context, in *GradeCateListReq, out *GradeCateListRes) error
		HomeBlackData(ctx context.Context, in *HomeBlackDataReq, out *HomeBlackDataRes) error
		GradeSubject(ctx context.Context, in *GradeSubjectReq, out *GradeSubjectRes) error
		SchoolRollAdd(ctx context.Context, in *SchoolRollAddReq, out *SchoolRollAddRes) error
		SchoolRollCount(ctx context.Context, in *SchoolRollCountReq, out *SchoolRollCountRes) error
		SchoolList(ctx context.Context, in *SchoolListReq, out *SchoolListRes) error
		SubjectCateAdd(ctx context.Context, in *SubjectCateAddReq, out *SubjectCateAddRes) error
		SubjectCateCount(ctx context.Context, in *SubjectCateCountReq, out *SubjectCateCountRes) error
		SubjectCateList(ctx context.Context, in *SubejctCateListReq, out *SubjectCateListRes) error
		QuestionVersion(ctx context.Context, in *QuestionVersionReq, out *QuestionVersionRes) error
		QuestionChapter(ctx context.Context, in *QuestionChapterReq, out *QuestionChapterRes) error
		SubjectName(ctx context.Context, in *SubjectNameReq, out *SubjectNameRes) error
		QuestionSource(ctx context.Context, in *QuestionSourceReq, out *QuestionSourceRes) error
		QuestionTixing(ctx context.Context, in *QuestionTixingReq, out *QuestionTixingRes) error
		QuestionTimuCount(ctx context.Context, in *QuestionTimuCountReq, out *QuestionTimuCountRes) error
		QuestionTimu(ctx context.Context, in *QuestionTimuReq, out *QuestionTimuRes) error
		CollectTimu(ctx context.Context, in *CollectTimuReq, out *CollectTimuRes) error
		QueryCollectTimu(ctx context.Context, in *QueryCollectTimuReq, out *QueryCollectTimuRes) error
		ModifyQuestion(ctx context.Context, in *ModifyQuestionReq, out *ModifyQuestionRes) error
		ModifyList(ctx context.Context, in *ModifyListReq, out *ModifyListRes) error
		ModifyCount(ctx context.Context, in *ModifyCountReq, out *ModifyCountRes) error
		QuestionTimuAdd(ctx context.Context, in *TimuAddReq, out *TimuAddRes) error
		AddList(ctx context.Context, in *AddListReq, out *AddListRes) error
		AddCount(ctx context.Context, in *AddCountReq, out *AddCountRes) error
		Approve(ctx context.Context, in *ApproveReq, out *ApproveRes) error
		QuestionTimuById(ctx context.Context, in *TimuByIdReq, out *TimuByIdRes) error
		TixingByVid(ctx context.Context, in *TixingByVidReq, out *TixingByVidRes) error
		SourceByVid(ctx context.Context, in *SourceByVidReq, out *SourceByVidRes) error
		IdentByIid(ctx context.Context, in *IdentByIidReq, out *IdentByIidRes) error
		IdentList(ctx context.Context, in *IdentListReq, out *IdentListRes) error
		IdentCount(ctx context.Context, in *IdentCountReq, out *IdentCountRes) error
		AddDocs(ctx context.Context, in *AddDocsReq, out *AddDocsRes) error
		UpdateDocs(ctx context.Context, in *UpdateDocsReq, out *UpdateDocsRes) error
		DocsLists(ctx context.Context, in *DocsListReq, out *DocsListRes) error
		DocsCount(ctx context.Context, in *DocsCountReq, out *DocsCountRes) error
		Preview(ctx context.Context, in *PreviewReq, out *PreviewRes) error
	}
	type QuestionnodeService struct {
		questionnodeService
	}
	h := &questionnodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&QuestionnodeService{h}, opts...))
}

type questionnodeServiceHandler struct {
	QuestionnodeServiceHandler
}

func (h *questionnodeServiceHandler) GradeCateAdd(ctx context.Context, in *GradeCateAddReq, out *GradeCateAddRes) error {
	return h.QuestionnodeServiceHandler.GradeCateAdd(ctx, in, out)
}

func (h *questionnodeServiceHandler) GradeCateCount(ctx context.Context, in *GradeCateCountReq, out *GradeCateCountRes) error {
	return h.QuestionnodeServiceHandler.GradeCateCount(ctx, in, out)
}

func (h *questionnodeServiceHandler) GradeCateList(ctx context.Context, in *GradeCateListReq, out *GradeCateListRes) error {
	return h.QuestionnodeServiceHandler.GradeCateList(ctx, in, out)
}

func (h *questionnodeServiceHandler) HomeBlackData(ctx context.Context, in *HomeBlackDataReq, out *HomeBlackDataRes) error {
	return h.QuestionnodeServiceHandler.HomeBlackData(ctx, in, out)
}

func (h *questionnodeServiceHandler) GradeSubject(ctx context.Context, in *GradeSubjectReq, out *GradeSubjectRes) error {
	return h.QuestionnodeServiceHandler.GradeSubject(ctx, in, out)
}

func (h *questionnodeServiceHandler) SchoolRollAdd(ctx context.Context, in *SchoolRollAddReq, out *SchoolRollAddRes) error {
	return h.QuestionnodeServiceHandler.SchoolRollAdd(ctx, in, out)
}

func (h *questionnodeServiceHandler) SchoolRollCount(ctx context.Context, in *SchoolRollCountReq, out *SchoolRollCountRes) error {
	return h.QuestionnodeServiceHandler.SchoolRollCount(ctx, in, out)
}

func (h *questionnodeServiceHandler) SchoolList(ctx context.Context, in *SchoolListReq, out *SchoolListRes) error {
	return h.QuestionnodeServiceHandler.SchoolList(ctx, in, out)
}

func (h *questionnodeServiceHandler) SubjectCateAdd(ctx context.Context, in *SubjectCateAddReq, out *SubjectCateAddRes) error {
	return h.QuestionnodeServiceHandler.SubjectCateAdd(ctx, in, out)
}

func (h *questionnodeServiceHandler) SubjectCateCount(ctx context.Context, in *SubjectCateCountReq, out *SubjectCateCountRes) error {
	return h.QuestionnodeServiceHandler.SubjectCateCount(ctx, in, out)
}

func (h *questionnodeServiceHandler) SubjectCateList(ctx context.Context, in *SubejctCateListReq, out *SubjectCateListRes) error {
	return h.QuestionnodeServiceHandler.SubjectCateList(ctx, in, out)
}

func (h *questionnodeServiceHandler) QuestionVersion(ctx context.Context, in *QuestionVersionReq, out *QuestionVersionRes) error {
	return h.QuestionnodeServiceHandler.QuestionVersion(ctx, in, out)
}

func (h *questionnodeServiceHandler) QuestionChapter(ctx context.Context, in *QuestionChapterReq, out *QuestionChapterRes) error {
	return h.QuestionnodeServiceHandler.QuestionChapter(ctx, in, out)
}

func (h *questionnodeServiceHandler) SubjectName(ctx context.Context, in *SubjectNameReq, out *SubjectNameRes) error {
	return h.QuestionnodeServiceHandler.SubjectName(ctx, in, out)
}

func (h *questionnodeServiceHandler) QuestionSource(ctx context.Context, in *QuestionSourceReq, out *QuestionSourceRes) error {
	return h.QuestionnodeServiceHandler.QuestionSource(ctx, in, out)
}

func (h *questionnodeServiceHandler) QuestionTixing(ctx context.Context, in *QuestionTixingReq, out *QuestionTixingRes) error {
	return h.QuestionnodeServiceHandler.QuestionTixing(ctx, in, out)
}

func (h *questionnodeServiceHandler) QuestionTimuCount(ctx context.Context, in *QuestionTimuCountReq, out *QuestionTimuCountRes) error {
	return h.QuestionnodeServiceHandler.QuestionTimuCount(ctx, in, out)
}

func (h *questionnodeServiceHandler) QuestionTimu(ctx context.Context, in *QuestionTimuReq, out *QuestionTimuRes) error {
	return h.QuestionnodeServiceHandler.QuestionTimu(ctx, in, out)
}

func (h *questionnodeServiceHandler) CollectTimu(ctx context.Context, in *CollectTimuReq, out *CollectTimuRes) error {
	return h.QuestionnodeServiceHandler.CollectTimu(ctx, in, out)
}

func (h *questionnodeServiceHandler) QueryCollectTimu(ctx context.Context, in *QueryCollectTimuReq, out *QueryCollectTimuRes) error {
	return h.QuestionnodeServiceHandler.QueryCollectTimu(ctx, in, out)
}

func (h *questionnodeServiceHandler) ModifyQuestion(ctx context.Context, in *ModifyQuestionReq, out *ModifyQuestionRes) error {
	return h.QuestionnodeServiceHandler.ModifyQuestion(ctx, in, out)
}

func (h *questionnodeServiceHandler) ModifyList(ctx context.Context, in *ModifyListReq, out *ModifyListRes) error {
	return h.QuestionnodeServiceHandler.ModifyList(ctx, in, out)
}

func (h *questionnodeServiceHandler) ModifyCount(ctx context.Context, in *ModifyCountReq, out *ModifyCountRes) error {
	return h.QuestionnodeServiceHandler.ModifyCount(ctx, in, out)
}

func (h *questionnodeServiceHandler) QuestionTimuAdd(ctx context.Context, in *TimuAddReq, out *TimuAddRes) error {
	return h.QuestionnodeServiceHandler.QuestionTimuAdd(ctx, in, out)
}

func (h *questionnodeServiceHandler) AddList(ctx context.Context, in *AddListReq, out *AddListRes) error {
	return h.QuestionnodeServiceHandler.AddList(ctx, in, out)
}

func (h *questionnodeServiceHandler) AddCount(ctx context.Context, in *AddCountReq, out *AddCountRes) error {
	return h.QuestionnodeServiceHandler.AddCount(ctx, in, out)
}

func (h *questionnodeServiceHandler) Approve(ctx context.Context, in *ApproveReq, out *ApproveRes) error {
	return h.QuestionnodeServiceHandler.Approve(ctx, in, out)
}

func (h *questionnodeServiceHandler) QuestionTimuById(ctx context.Context, in *TimuByIdReq, out *TimuByIdRes) error {
	return h.QuestionnodeServiceHandler.QuestionTimuById(ctx, in, out)
}

func (h *questionnodeServiceHandler) TixingByVid(ctx context.Context, in *TixingByVidReq, out *TixingByVidRes) error {
	return h.QuestionnodeServiceHandler.TixingByVid(ctx, in, out)
}

func (h *questionnodeServiceHandler) SourceByVid(ctx context.Context, in *SourceByVidReq, out *SourceByVidRes) error {
	return h.QuestionnodeServiceHandler.SourceByVid(ctx, in, out)
}

func (h *questionnodeServiceHandler) IdentByIid(ctx context.Context, in *IdentByIidReq, out *IdentByIidRes) error {
	return h.QuestionnodeServiceHandler.IdentByIid(ctx, in, out)
}

func (h *questionnodeServiceHandler) IdentList(ctx context.Context, in *IdentListReq, out *IdentListRes) error {
	return h.QuestionnodeServiceHandler.IdentList(ctx, in, out)
}

func (h *questionnodeServiceHandler) IdentCount(ctx context.Context, in *IdentCountReq, out *IdentCountRes) error {
	return h.QuestionnodeServiceHandler.IdentCount(ctx, in, out)
}

func (h *questionnodeServiceHandler) AddDocs(ctx context.Context, in *AddDocsReq, out *AddDocsRes) error {
	return h.QuestionnodeServiceHandler.AddDocs(ctx, in, out)
}

func (h *questionnodeServiceHandler) UpdateDocs(ctx context.Context, in *UpdateDocsReq, out *UpdateDocsRes) error {
	return h.QuestionnodeServiceHandler.UpdateDocs(ctx, in, out)
}

func (h *questionnodeServiceHandler) DocsLists(ctx context.Context, in *DocsListReq, out *DocsListRes) error {
	return h.QuestionnodeServiceHandler.DocsLists(ctx, in, out)
}

func (h *questionnodeServiceHandler) DocsCount(ctx context.Context, in *DocsCountReq, out *DocsCountRes) error {
	return h.QuestionnodeServiceHandler.DocsCount(ctx, in, out)
}

func (h *questionnodeServiceHandler) Preview(ctx context.Context, in *PreviewReq, out *PreviewRes) error {
	return h.QuestionnodeServiceHandler.Preview(ctx, in, out)
}
