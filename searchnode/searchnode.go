// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package searchnode

import (
	"bytes"
	"context"
	"fmt"
	"reflect"

	"github.com/heegspace/heegproto/common"
	"github.com/heegspace/heegproto/rescode"
	"github.com/heegspace/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = rescode.GoUnusedProtection__
var _ = common.GoUnusedProtection__

// Attributes:
//  - Auth
//  - UID
//  - Keyword
//  - Page
//  - Size
//  - Extra
type SearchQuestionReq struct {
	Auth    *common.Authorize `thrift:"auth,1" db:"auth" json:"auth"`
	UID     string            `thrift:"uid,2" db:"uid" json:"uid"`
	Keyword string            `thrift:"keyword,3" db:"keyword" json:"keyword"`
	Page    int32             `thrift:"page,4" db:"page" json:"page"`
	Size    int32             `thrift:"size,5" db:"size" json:"size"`
	Extra   map[string]string `thrift:"extra,6" db:"extra" json:"extra"`
}

func NewSearchQuestionReq() *SearchQuestionReq {
	return &SearchQuestionReq{}
}

var SearchQuestionReq_Auth_DEFAULT *common.Authorize

func (p *SearchQuestionReq) GetAuth() *common.Authorize {
	if !p.IsSetAuth() {
		return SearchQuestionReq_Auth_DEFAULT
	}
	return p.Auth
}

func (p *SearchQuestionReq) GetUID() string {
	return p.UID
}

func (p *SearchQuestionReq) GetKeyword() string {
	return p.Keyword
}

func (p *SearchQuestionReq) GetPage() int32 {
	return p.Page
}

func (p *SearchQuestionReq) GetSize() int32 {
	return p.Size
}

func (p *SearchQuestionReq) GetExtra() map[string]string {
	return p.Extra
}
func (p *SearchQuestionReq) IsSetAuth() bool {
	return p.Auth != nil
}

func (p *SearchQuestionReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchQuestionReq) ReadField1(iprot thrift.TProtocol) error {
	p.Auth = &common.Authorize{}
	if err := p.Auth.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
	}
	return nil
}

func (p *SearchQuestionReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *SearchQuestionReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Keyword = v
	}
	return nil
}

func (p *SearchQuestionReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Page = v
	}
	return nil
}

func (p *SearchQuestionReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *SearchQuestionReq) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.Extra[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SearchQuestionReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_question_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchQuestionReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth: ", p), err)
	}
	if err := p.Auth.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth: ", p), err)
	}
	return err
}

func (p *SearchQuestionReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err)
	}
	return err
}

func (p *SearchQuestionReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keyword", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:keyword: ", p), err)
	}
	if err := oprot.WriteString(string(p.Keyword)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keyword (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:keyword: ", p), err)
	}
	return err
}

func (p *SearchQuestionReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("page", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:page: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Page)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.page (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:page: ", p), err)
	}
	return err
}

func (p *SearchQuestionReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:size: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.size (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:size: ", p), err)
	}
	return err
}

func (p *SearchQuestionReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extra: ", p), err)
	}
	return err
}

func (p *SearchQuestionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchQuestionReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Timestamp
//  - Total
//  - Hits
//  - Extra
type SearchQuestionRes struct {
	Rescode   rescode.Code             `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg    string                   `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
	Timestamp float64                  `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
	Total     *common.SearchHitsTotal  `thrift:"total,4" db:"total" json:"total"`
	Hits      []*common.SearchHitsItem `thrift:"hits,5" db:"hits" json:"hits"`
	Extra     map[string]string        `thrift:"extra,6" db:"extra" json:"extra"`
}

func NewSearchQuestionRes() *SearchQuestionRes {
	return &SearchQuestionRes{}
}

func (p *SearchQuestionRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *SearchQuestionRes) GetResmsg() string {
	return p.Resmsg
}

func (p *SearchQuestionRes) GetTimestamp() float64 {
	return p.Timestamp
}

var SearchQuestionRes_Total_DEFAULT *common.SearchHitsTotal

func (p *SearchQuestionRes) GetTotal() *common.SearchHitsTotal {
	if !p.IsSetTotal() {
		return SearchQuestionRes_Total_DEFAULT
	}
	return p.Total
}

func (p *SearchQuestionRes) GetHits() []*common.SearchHitsItem {
	return p.Hits
}

func (p *SearchQuestionRes) GetExtra() map[string]string {
	return p.Extra
}
func (p *SearchQuestionRes) IsSetTotal() bool {
	return p.Total != nil
}

func (p *SearchQuestionRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchQuestionRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *SearchQuestionRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *SearchQuestionRes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *SearchQuestionRes) ReadField4(iprot thrift.TProtocol) error {
	p.Total = &common.SearchHitsTotal{}
	if err := p.Total.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Total), err)
	}
	return nil
}

func (p *SearchQuestionRes) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*common.SearchHitsItem, 0, size)
	p.Hits = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &common.SearchHitsItem{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Hits = append(p.Hits, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SearchQuestionRes) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key3 = v
		}
		var _val4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val4 = v
		}
		p.Extra[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SearchQuestionRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_question_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchQuestionRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *SearchQuestionRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *SearchQuestionRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *SearchQuestionRes) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:total: ", p), err)
	}
	if err := p.Total.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Total), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:total: ", p), err)
	}
	return err
}

func (p *SearchQuestionRes) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hits", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:hits: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hits)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Hits {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:hits: ", p), err)
	}
	return err
}

func (p *SearchQuestionRes) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extra", thrift.MAP, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extra: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Extra {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extra: ", p), err)
	}
	return err
}

func (p *SearchQuestionRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchQuestionRes(%+v)", *p)
}

type SearchnodeService interface {
	// Parameters:
	//  - Req
	SearchQuestion(ctx context.Context, req *SearchQuestionReq) (r *SearchQuestionRes, err error)
}

type SearchnodeServiceClient struct {
	c thrift.TClient
}

func NewSearchnodeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SearchnodeServiceClient {
	return &SearchnodeServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSearchnodeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SearchnodeServiceClient {
	return &SearchnodeServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSearchnodeServiceClient(c thrift.TClient) *SearchnodeServiceClient {
	return &SearchnodeServiceClient{
		c: c,
	}
}

func (p *SearchnodeServiceClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Req
func (p *SearchnodeServiceClient) SearchQuestion(ctx context.Context, req *SearchQuestionReq) (r *SearchQuestionRes, err error) {
	var _args5 SearchnodeServiceSearchQuestionArgs
	_args5.Req = req
	var _result6 SearchnodeServiceSearchQuestionResult
	if err = p.Client_().Call(ctx, "search_question", &_args5, &_result6); err != nil {
		return
	}
	return _result6.GetSuccess(), nil
}

type SearchnodeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SearchnodeService
}

func (p *SearchnodeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SearchnodeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SearchnodeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSearchnodeServiceProcessor(handler SearchnodeService) *SearchnodeServiceProcessor {

	self7 := &SearchnodeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self7.processorMap["search_question"] = &searchnodeServiceProcessorSearchQuestion{handler: handler}
	return self7
}

func (p *SearchnodeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x8 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x8.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x8

}

type searchnodeServiceProcessorSearchQuestion struct {
	handler SearchnodeService
}

func (p *searchnodeServiceProcessorSearchQuestion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SearchnodeServiceSearchQuestionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("search_question", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SearchnodeServiceSearchQuestionResult{}
	var retval *SearchQuestionRes
	var err2 error
	if retval, err2 = p.handler.SearchQuestion(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing search_question: "+err2.Error())
		oprot.WriteMessageBegin("search_question", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("search_question", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type SearchnodeServiceSearchQuestionArgs struct {
	Req *SearchQuestionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewSearchnodeServiceSearchQuestionArgs() *SearchnodeServiceSearchQuestionArgs {
	return &SearchnodeServiceSearchQuestionArgs{}
}

var SearchnodeServiceSearchQuestionArgs_Req_DEFAULT *SearchQuestionReq

func (p *SearchnodeServiceSearchQuestionArgs) GetReq() *SearchQuestionReq {
	if !p.IsSetReq() {
		return SearchnodeServiceSearchQuestionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SearchnodeServiceSearchQuestionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchnodeServiceSearchQuestionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchnodeServiceSearchQuestionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &SearchQuestionReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *SearchnodeServiceSearchQuestionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_question_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchnodeServiceSearchQuestionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *SearchnodeServiceSearchQuestionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchnodeServiceSearchQuestionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SearchnodeServiceSearchQuestionResult struct {
	Success *SearchQuestionRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSearchnodeServiceSearchQuestionResult() *SearchnodeServiceSearchQuestionResult {
	return &SearchnodeServiceSearchQuestionResult{}
}

var SearchnodeServiceSearchQuestionResult_Success_DEFAULT *SearchQuestionRes

func (p *SearchnodeServiceSearchQuestionResult) GetSuccess() *SearchQuestionRes {
	if !p.IsSetSuccess() {
		return SearchnodeServiceSearchQuestionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SearchnodeServiceSearchQuestionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchnodeServiceSearchQuestionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchnodeServiceSearchQuestionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SearchQuestionRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SearchnodeServiceSearchQuestionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_question_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchnodeServiceSearchQuestionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SearchnodeServiceSearchQuestionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchnodeServiceSearchQuestionResult(%+v)", *p)
}
