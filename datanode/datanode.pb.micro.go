// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: datanode.proto

package datanode

import (
	common "./common"
	_ "./rescode"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DatanodeService service

func NewDatanodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DatanodeService service

type DatanodeService interface {
	// ---------- 用户接口 ------- //
	// 创建新用户
	CreateUser(ctx context.Context, in *NewUserReq, opts ...client.CallOption) (*UserRes, error)
	// 获取用户信息
	UserInfo(ctx context.Context, in *UserInfoReq, opts ...client.CallOption) (*UserRes, error)
	// 搜索用户信息
	SearchUser(ctx context.Context, in *SearchUserReq, opts ...client.CallOption) (*SearchUserRes, error)
	// 更新用户信息
	UpdateUserInfo(ctx context.Context, in *UpdateUserinfoReq, opts ...client.CallOption) (*UpdateUserinfoRes, error)
	// 关注对象操作
	AddAttention(ctx context.Context, in *AddAttentionReq, opts ...client.CallOption) (*AddAttentionRes, error)
	DelAttention(ctx context.Context, in *DelAttentionReq, opts ...client.CallOption) (*DelAttentionRes, error)
	GetAttention(ctx context.Context, in *GetAttentionReq, opts ...client.CallOption) (*GetAttentionRes, error)
	// 用户
	AddUserAttention(ctx context.Context, in *AddUserAttentionReq, opts ...client.CallOption) (*AddUserAttentionRes, error)
	DelUserAttention(ctx context.Context, in *DelUserAttentionReq, opts ...client.CallOption) (*DelUserAttentionRes, error)
	GetUserAttention(ctx context.Context, in *GetUserAttentionReq, opts ...client.CallOption) (*GetUserAttentionRes, error)
	// --------------- 好友接口 ----------- //
	// 添加好友
	AddFriends(ctx context.Context, in *AddFriendReq, opts ...client.CallOption) (*AddFriendRes, error)
	// 同意好友
	AgreeFriends(ctx context.Context, in *AgreeFriendReq, opts ...client.CallOption) (*AgreeFriendRes, error)
	// 请求好友列表
	FriendsList(ctx context.Context, in *FriendsListReq, opts ...client.CallOption) (*FriendRes, error)
	// 添加组
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...client.CallOption) (*CreateGroupRes, error)
	// 重命名组
	RenameGroup(ctx context.Context, in *RenameGroupReq, opts ...client.CallOption) (*RenameGroupRes, error)
	// 添加好友备注
	AddNoteFriend(ctx context.Context, in *AddFriendNoteReq, opts ...client.CallOption) (*AddFriendNoteRes, error)
	// 移动到新的组
	MoveToNewGroup(ctx context.Context, in *MoveGroupReq, opts ...client.CallOption) (*MoveGroupRes, error)
	// 删除好友
	RemoveFriend(ctx context.Context, in *RemoveFriendReq, opts ...client.CallOption) (*RemoveFriendRes, error)
	// ----------------- 点赞 --------------- //
	// 获取点赞的数量
	LikesCount(ctx context.Context, in *LikesCountReq, opts ...client.CallOption) (*LikesCountRes, error)
	// 添加点赞
	LikesAdd(ctx context.Context, in *LikesAddReq, opts ...client.CallOption) (*LikesAddRes, error)
	// 获取点赞列表
	LikesList(ctx context.Context, in *LikesListReq, opts ...client.CallOption) (*LikesListRes, error)
	// ----------------- 笔记 ----------------//
	//更新或者添加笔记信息
	UpdateNote(ctx context.Context, in *UpdateNoteReq, opts ...client.CallOption) (*NoteMetaRes, error)
	// 获取笔记列表
	NoteMetaList(ctx context.Context, in *NoteMetaListReq, opts ...client.CallOption) (*NoteMetaListRes, error)
	// 获取用户笔记数量
	NoteListCount(ctx context.Context, in *NoteMetaListReq, opts ...client.CallOption) (*NoteListCountRes, error)
	// 获取笔记数据列
	NoteData(ctx context.Context, in *NoteDataReq, opts ...client.CallOption) (*NoteDataRes, error)
	// 获取笔记html数据
	NoteHtml(ctx context.Context, in *NoteHtmlReq, opts ...client.CallOption) (*NoteHtmlRes, error)
	// ---------------- 动态 --------------- //
	// 获取动态的数量
	MomentsCount(ctx context.Context, in *MomentsCountReq, opts ...client.CallOption) (*MomentsCountRes, error)
	// 添加动态
	MomentsAdd(ctx context.Context, in *Moments, opts ...client.CallOption) (*AddMomentsRes, error)
	// 获取动态列表
	MomentsList(ctx context.Context, in *MomentsListReq, opts ...client.CallOption) (*MomentsListRes, error)
	// ---------------- 文件 ------------------//
	// 获取目录,目录之间的/替换成-
	FileDirOne(ctx context.Context, in *FileDirReq, opts ...client.CallOption) (*FileDirRes, error)
	// 添加目录
	FileDirAdd(ctx context.Context, in *AddDirReq, opts ...client.CallOption) (*AddDirRes, error)
	// 添加文件
	AddFile(ctx context.Context, in *AddFileReq, opts ...client.CallOption) (*AddFileRes, error)
	// 获取云盘属性，容量和文件数量
	YunSaveAttr(ctx context.Context, in *FileAttrReq, opts ...client.CallOption) (*FileAttrRes, error)
	// 获取图像缩略图
	Thumbnail(ctx context.Context, in *ThumbnailReq, opts ...client.CallOption) (*ThumbnailRes, error)
	// ------------- key-value ----------------//
	// 设置缓存
	SetKeyValue(ctx context.Context, in *SetKeyvalueReq, opts ...client.CallOption) (*SetKeyvalueRes, error)
	// 获取缓存
	GetKeyValue(ctx context.Context, in *GetKeyvalueReq, opts ...client.CallOption) (*GetKeyvalueRes, error)
	// 删除
	DelKeyValue(ctx context.Context, in *DelKeyvalueReq, opts ...client.CallOption) (*DelKeyvalueRes, error)
	// --------------- 试题相关 -------------------//
	// 获取版本
	QuestionVersion(ctx context.Context, in *common.QuestionQuery, opts ...client.CallOption) (*VersionRes, error)
	// 获取章节
	QuestionChapter(ctx context.Context, in *common.QuestionQuery, opts ...client.CallOption) (*ChapterRes, error)
	// 科目名
	SubjectName(ctx context.Context, in *SubjectNameReq, opts ...client.CallOption) (*SubjectNameRes, error)
	// 获取来源
	QuestionSource(ctx context.Context, in *common.QuestionQuery, opts ...client.CallOption) (*SourceRes, error)
	// 获取题型
	QuestionTixing(ctx context.Context, in *common.QuestionQuery, opts ...client.CallOption) (*TixingRes, error)
	// 获取题目数量
	QuestionTimuCount(ctx context.Context, in *common.QuestionQuery, opts ...client.CallOption) (*TimuCountRes, error)
	// 请求题目
	QuestionTimu(ctx context.Context, in *common.QuestionQuery, opts ...client.CallOption) (*TimuRes, error)
	// 根据试题id请求题目
	QuestionTimuById(ctx context.Context, in *TimuByIdReq, opts ...client.CallOption) (*TimuByIdRes, error)
	// 收藏试题
	CollectTimu(ctx context.Context, in *CollectReq, opts ...client.CallOption) (*CollectRes, error)
	// 获取收藏列表
	QueryCollectTimu(ctx context.Context, in *CollectListReq, opts ...client.CallOption) (*CollectListRes, error)
	// 纠错试题（包含更新或添加）
	ModifyQuestion(ctx context.Context, in *ModifyReq, opts ...client.CallOption) (*ModifyRes, error)
	//获取个人纠错的试题
	ModifyList(ctx context.Context, in *ModifyListReq, opts ...client.CallOption) (*ModifyListRes, error)
	//获取个人纠错的试题的数量
	ModifyCount(ctx context.Context, in *ModifyCountReq, opts ...client.CallOption) (*ModifyCountRes, error)
	//添加试题
	QuestionTimuAdd(ctx context.Context, in *TimuAddReq, opts ...client.CallOption) (*TimuAddRes, error)
	//获取添加的试题
	AddList(ctx context.Context, in *AddListReq, opts ...client.CallOption) (*AddListRes, error)
	// 获取添加的数量
	AddCount(ctx context.Context, in *AddCountReq, opts ...client.CallOption) (*AddCountRes, error)
	// 审核修改的试题
	Approve(ctx context.Context, in *ApproveReq, opts ...client.CallOption) (*ApproveRes, error)
	//搜索试题
	OnSearch(ctx context.Context, in *SearchReq, opts ...client.CallOption) (*SearchRes, error)
	// 添加年纪信息
	GradeCateAdd(ctx context.Context, in *common.GradeCate, opts ...client.CallOption) (*AddGradeCateRes, error)
	//获取年纪总数
	GradeCateCount(ctx context.Context, in *common.Request, opts ...client.CallOption) (*GradeCateCountRes, error)
	// 获取年级信息
	GradeCateList(ctx context.Context, in *GradeCateListReq, opts ...client.CallOption) (*GradeCateListRes, error)
	//获取主页最新动态统计信息
	HomeBlackData(ctx context.Context, in *common.Request, opts ...client.CallOption) (*HomeBlackDataRes, error)
	//获取学籍对应的年级+科目
	GradeSubject(ctx context.Context, in *GradeSubjectReq, opts ...client.CallOption) (*GradeSubjectRes, error)
	// 添加学级信息
	SchoolRollAdd(ctx context.Context, in *common.SchoolRoll, opts ...client.CallOption) (*SchoolRollAddRes, error)
	//获取年级总数
	SchoolRollCount(ctx context.Context, in *common.Request, opts ...client.CallOption) (*SchoolRollCountRes, error)
	//获取年级列表信息
	SchoolList(ctx context.Context, in *SchoolRollListReq, opts ...client.CallOption) (*SchoolRollListRes, error)
	//添加科目信息
	SubjectCateAdd(ctx context.Context, in *common.SubjectCate, opts ...client.CallOption) (*SubjectCateAddRes, error)
	//获取科目总数
	SubjectCateCount(ctx context.Context, in *common.Request, opts ...client.CallOption) (*SubjectCateCountRes, error)
	//获取科目列表
	SubjectCateList(ctx context.Context, in *SubjectCateListReq, opts ...client.CallOption) (*SubjectCateListRes, error)
	//用户信息
	SetUserInfo(ctx context.Context, in *SetUserInfoReq, opts ...client.CallOption) (*SetUserInfoRes, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...client.CallOption) (*GetUserInfoRes, error)
	//微信用户信息操作
	SetWechatUinfo(ctx context.Context, in *SetWechatUinfoReq, opts ...client.CallOption) (*SetWechatUinfoRes, error)
	GetWechatUinfo(ctx context.Context, in *GetWechatUinfoReq, opts ...client.CallOption) (*GetWechatUinfoRes, error)
	// 支付宝用户信息操作
	SetAlipayUinfo(ctx context.Context, in *SetAlipayUinfoReq, opts ...client.CallOption) (*SetAlipayUinfoRes, error)
	GetAlipayUinfo(ctx context.Context, in *GetAlipayUinfoReq, opts ...client.CallOption) (*GetAlipayUinfoRes, error)
	// 请求百度实体信息
	SetBaiduEntity(ctx context.Context, in *SetBaiduEntityReq, opts ...client.CallOption) (*SetBaiduEntityRes, error)
	BaiduEntity(ctx context.Context, in *BaiduEntityReq, opts ...client.CallOption) (*BaiduEntityRes, error)
	// 获取搜索记录
	SearchHistory(ctx context.Context, in *SearchHistoryReq, opts ...client.CallOption) (*SearchHistoryRes, error)
	// 搜索关键字补全
	SearchItem(ctx context.Context, in *SearchItemReq, opts ...client.CallOption) (*SearchItemRes, error)
	// 更新修改试题的奖励积分
	RefreshModifyReward(ctx context.Context, in *RefreshModifyRewardReq, opts ...client.CallOption) (*RefreshModifyRewardRes, error)
	// 更新添加试题的奖励积分
	RefreshAddReward(ctx context.Context, in *RefreshAddRewardReq, opts ...client.CallOption) (*RefreshAddRewardRes, error)
	// 更新用户的coin数值
	RefreshUserCoin(ctx context.Context, in *RefreshUserCoinReq, opts ...client.CallOption) (*RefreshUserCoinRes, error)
	// 通过版本id获取题型列表
	TixingByVid(ctx context.Context, in *TixingByVidReq, opts ...client.CallOption) (*TixingByVidRes, error)
	// 通过版本id获取来源
	SourceByVid(ctx context.Context, in *SourceByVidReq, opts ...client.CallOption) (*SourceByVidRes, error)
	// 添加识别记录
	IdentAdd(ctx context.Context, in *IdentAddReq, opts ...client.CallOption) (*IdentAddRes, error)
	// 根据识别id获取识别记录
	IdentByIid(ctx context.Context, in *IdentByIidReq, opts ...client.CallOption) (*IdentByIidRes, error)
	// 获取识别列表
	IdentList(ctx context.Context, in *IdentListReq, opts ...client.CallOption) (*IdentListRes, error)
	// 获取识别列表熟数量
	IdentCount(ctx context.Context, in *IdentCountReq, opts ...client.CallOption) (*IdentCountRes, error)
	// 刷新识别奖励
	RefreshIdentReward(ctx context.Context, in *RefreshIdentRewardReq, opts ...client.CallOption) (*RefreshIdentRewardRes, error)
	// 添加或者根据教师信息
	UpdateTeacher(ctx context.Context, in *UpdateTeacherReq, opts ...client.CallOption) (*UpdateTeacherRes, error)
	// 查询教师信息
	GetTeacher(ctx context.Context, in *FindTeacherReq, opts ...client.CallOption) (*FindTeacherRes, error)
	// 关注/取消关注教师
	FocusTeacher(ctx context.Context, in *FocusTeacherReq, opts ...client.CallOption) (*FocusTeacherRes, error)
	// 更新笔记的协作者、标签、颜色
	NoteCooper(ctx context.Context, in *NoteCooperReq, opts ...client.CallOption) (*NoteCooperRes, error)
	NoteTag(ctx context.Context, in *NoteTagReq, opts ...client.CallOption) (*NoteTagRes, error)
	NoteBgcolor(ctx context.Context, in *NoteBgcolorReq, opts ...client.CallOption) (*NoteBgcolorRes, error)
	NoteTagAdd(ctx context.Context, in *NoteTagAddReq, opts ...client.CallOption) (*NoteTagAddRes, error)
	NoteTagList(ctx context.Context, in *NoteTagListReq, opts ...client.CallOption) (*NoteTagListRes, error)
	// 提交实名
	SubmitCert(ctx context.Context, in *SubmitCertReq, opts ...client.CallOption) (*SubmitCertRes, error)
	// 更新实名状态
	CertStatus(ctx context.Context, in *CertStatusReq, opts ...client.CallOption) (*CertStatusRes, error)
	// 获取实名信息
	CertInfo(ctx context.Context, in *CertInfoReq, opts ...client.CallOption) (*CertInfoRes, error)
	// 实名日志记录
	CertFlow(ctx context.Context, in *CertFlowReq, opts ...client.CallOption) (*CertFlowRes, error)
	// 添加日志
	AddUserLog(ctx context.Context, in *AddUserLogReq, opts ...client.CallOption) (*AddUserLogRes, error)
	// 获取日志
	QueryUserLog(ctx context.Context, in *QueryUserLogReq, opts ...client.CallOption) (*QueryUserLogRes, error)
	// 日志数量
	UserLogCount(ctx context.Context, in *UserLogCountReq, opts ...client.CallOption) (*UserLogCountRes, error)
	// 添加任务
	AddTask(ctx context.Context, in *AddTaskReq, opts ...client.CallOption) (*AddTaskRes, error)
	// 获取任务
	GetTask(ctx context.Context, in *GetTaskReq, opts ...client.CallOption) (*GetTaskRes, error)
	// 获取任务数量
	GetTaskCount(ctx context.Context, in *GetTaskCountReq, opts ...client.CallOption) (*GetTaskCountRes, error)
	// 添加包信息
	AddPkg(ctx context.Context, in *AddPkgReq, opts ...client.CallOption) (*AddPkgRes, error)
	// 删除包
	DelPkg(ctx context.Context, in *DelPkgReq, opts ...client.CallOption) (*DelPkgRes, error)
	// 获取包列表
	PkgLists(ctx context.Context, in *PkgListReq, opts ...client.CallOption) (*PkgListRes, error)
	// 获取包数量
	PkgCount(ctx context.Context, in *PkgCountReq, opts ...client.CallOption) (*PkgCountRes, error)
	// 添加赞助信息
	SponsorAdd(ctx context.Context, in *SponsorAddReq, opts ...client.CallOption) (*SponsorAddRes, error)
	// 获取赞助列表
	SponsorList(ctx context.Context, in *SponsorListReq, opts ...client.CallOption) (*SponsorListRes, error)
	// 获取vip对应的限制
	VipLimit(ctx context.Context, in *VipLimitReq, opts ...client.CallOption) (*VipLimitRes, error)
	// vip产品列表
	VipProduct(ctx context.Context, in *VipProductReq, opts ...client.CallOption) (*VipProductRes, error)
	// vip产品介绍
	VipDesc(ctx context.Context, in *VipDescReq, opts ...client.CallOption) (*VipDescRes, error)
	// vip充值
	VipPay(ctx context.Context, in *VipPayReq, opts ...client.CallOption) (*VipPayRes, error)
	// 更新vip充值状态
	VipOrderStatus(ctx context.Context, in *VipOrderStatusReq, opts ...client.CallOption) (*VipOrderStatusRes, error)
	// 获取vip充值列表
	VipOrderList(ctx context.Context, in *VipOrderListReq, opts ...client.CallOption) (*VipOrderListRes, error)
	// 用户积分操作
	UserScore(ctx context.Context, in *UserScoreReq, opts ...client.CallOption) (*UserScoreRes, error)
	// 用户vip操作
	UserVip(ctx context.Context, in *UserVipReq, opts ...client.CallOption) (*UserVipRes, error)
	// 服务调用日志
	FootLog(ctx context.Context, in *FootLogReq, opts ...client.CallOption) (*FootLogRes, error)
	// 添加试题
	AddExam(ctx context.Context, in *AddExamReq, opts ...client.CallOption) (*AddExamRes, error)
	// 获取试卷列表
	ExamLists(ctx context.Context, in *ExamListReq, opts ...client.CallOption) (*ExamListRes, error)
	// 获取试卷数量
	ExamCount(ctx context.Context, in *ExamCountReq, opts ...client.CallOption) (*ExamCountRes, error)
}

type datanodeService struct {
	c    client.Client
	name string
}

func NewDatanodeService(name string, c client.Client) DatanodeService {
	return &datanodeService{
		c:    c,
		name: name,
	}
}

func (c *datanodeService) CreateUser(ctx context.Context, in *NewUserReq, opts ...client.CallOption) (*UserRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.CreateUser", in)
	out := new(UserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) UserInfo(ctx context.Context, in *UserInfoReq, opts ...client.CallOption) (*UserRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.UserInfo", in)
	out := new(UserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SearchUser(ctx context.Context, in *SearchUserReq, opts ...client.CallOption) (*SearchUserRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SearchUser", in)
	out := new(SearchUserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) UpdateUserInfo(ctx context.Context, in *UpdateUserinfoReq, opts ...client.CallOption) (*UpdateUserinfoRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.UpdateUserInfo", in)
	out := new(UpdateUserinfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) AddAttention(ctx context.Context, in *AddAttentionReq, opts ...client.CallOption) (*AddAttentionRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.AddAttention", in)
	out := new(AddAttentionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) DelAttention(ctx context.Context, in *DelAttentionReq, opts ...client.CallOption) (*DelAttentionRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.DelAttention", in)
	out := new(DelAttentionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GetAttention(ctx context.Context, in *GetAttentionReq, opts ...client.CallOption) (*GetAttentionRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GetAttention", in)
	out := new(GetAttentionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) AddUserAttention(ctx context.Context, in *AddUserAttentionReq, opts ...client.CallOption) (*AddUserAttentionRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.AddUserAttention", in)
	out := new(AddUserAttentionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) DelUserAttention(ctx context.Context, in *DelUserAttentionReq, opts ...client.CallOption) (*DelUserAttentionRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.DelUserAttention", in)
	out := new(DelUserAttentionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GetUserAttention(ctx context.Context, in *GetUserAttentionReq, opts ...client.CallOption) (*GetUserAttentionRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GetUserAttention", in)
	out := new(GetUserAttentionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) AddFriends(ctx context.Context, in *AddFriendReq, opts ...client.CallOption) (*AddFriendRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.AddFriends", in)
	out := new(AddFriendRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) AgreeFriends(ctx context.Context, in *AgreeFriendReq, opts ...client.CallOption) (*AgreeFriendRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.AgreeFriends", in)
	out := new(AgreeFriendRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) FriendsList(ctx context.Context, in *FriendsListReq, opts ...client.CallOption) (*FriendRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.FriendsList", in)
	out := new(FriendRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...client.CallOption) (*CreateGroupRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.CreateGroup", in)
	out := new(CreateGroupRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) RenameGroup(ctx context.Context, in *RenameGroupReq, opts ...client.CallOption) (*RenameGroupRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.RenameGroup", in)
	out := new(RenameGroupRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) AddNoteFriend(ctx context.Context, in *AddFriendNoteReq, opts ...client.CallOption) (*AddFriendNoteRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.AddNoteFriend", in)
	out := new(AddFriendNoteRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) MoveToNewGroup(ctx context.Context, in *MoveGroupReq, opts ...client.CallOption) (*MoveGroupRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.MoveToNewGroup", in)
	out := new(MoveGroupRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) RemoveFriend(ctx context.Context, in *RemoveFriendReq, opts ...client.CallOption) (*RemoveFriendRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.RemoveFriend", in)
	out := new(RemoveFriendRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) LikesCount(ctx context.Context, in *LikesCountReq, opts ...client.CallOption) (*LikesCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.LikesCount", in)
	out := new(LikesCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) LikesAdd(ctx context.Context, in *LikesAddReq, opts ...client.CallOption) (*LikesAddRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.LikesAdd", in)
	out := new(LikesAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) LikesList(ctx context.Context, in *LikesListReq, opts ...client.CallOption) (*LikesListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.LikesList", in)
	out := new(LikesListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) UpdateNote(ctx context.Context, in *UpdateNoteReq, opts ...client.CallOption) (*NoteMetaRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.UpdateNote", in)
	out := new(NoteMetaRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) NoteMetaList(ctx context.Context, in *NoteMetaListReq, opts ...client.CallOption) (*NoteMetaListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.NoteMetaList", in)
	out := new(NoteMetaListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) NoteListCount(ctx context.Context, in *NoteMetaListReq, opts ...client.CallOption) (*NoteListCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.NoteListCount", in)
	out := new(NoteListCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) NoteData(ctx context.Context, in *NoteDataReq, opts ...client.CallOption) (*NoteDataRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.NoteData", in)
	out := new(NoteDataRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) NoteHtml(ctx context.Context, in *NoteHtmlReq, opts ...client.CallOption) (*NoteHtmlRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.NoteHtml", in)
	out := new(NoteHtmlRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) MomentsCount(ctx context.Context, in *MomentsCountReq, opts ...client.CallOption) (*MomentsCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.MomentsCount", in)
	out := new(MomentsCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) MomentsAdd(ctx context.Context, in *Moments, opts ...client.CallOption) (*AddMomentsRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.MomentsAdd", in)
	out := new(AddMomentsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) MomentsList(ctx context.Context, in *MomentsListReq, opts ...client.CallOption) (*MomentsListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.MomentsList", in)
	out := new(MomentsListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) FileDirOne(ctx context.Context, in *FileDirReq, opts ...client.CallOption) (*FileDirRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.FileDirOne", in)
	out := new(FileDirRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) FileDirAdd(ctx context.Context, in *AddDirReq, opts ...client.CallOption) (*AddDirRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.FileDirAdd", in)
	out := new(AddDirRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) AddFile(ctx context.Context, in *AddFileReq, opts ...client.CallOption) (*AddFileRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.AddFile", in)
	out := new(AddFileRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) YunSaveAttr(ctx context.Context, in *FileAttrReq, opts ...client.CallOption) (*FileAttrRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.YunSaveAttr", in)
	out := new(FileAttrRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) Thumbnail(ctx context.Context, in *ThumbnailReq, opts ...client.CallOption) (*ThumbnailRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.Thumbnail", in)
	out := new(ThumbnailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SetKeyValue(ctx context.Context, in *SetKeyvalueReq, opts ...client.CallOption) (*SetKeyvalueRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SetKeyValue", in)
	out := new(SetKeyvalueRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GetKeyValue(ctx context.Context, in *GetKeyvalueReq, opts ...client.CallOption) (*GetKeyvalueRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GetKeyValue", in)
	out := new(GetKeyvalueRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) DelKeyValue(ctx context.Context, in *DelKeyvalueReq, opts ...client.CallOption) (*DelKeyvalueRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.DelKeyValue", in)
	out := new(DelKeyvalueRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) QuestionVersion(ctx context.Context, in *common.QuestionQuery, opts ...client.CallOption) (*VersionRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.QuestionVersion", in)
	out := new(VersionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) QuestionChapter(ctx context.Context, in *common.QuestionQuery, opts ...client.CallOption) (*ChapterRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.QuestionChapter", in)
	out := new(ChapterRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SubjectName(ctx context.Context, in *SubjectNameReq, opts ...client.CallOption) (*SubjectNameRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SubjectName", in)
	out := new(SubjectNameRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) QuestionSource(ctx context.Context, in *common.QuestionQuery, opts ...client.CallOption) (*SourceRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.QuestionSource", in)
	out := new(SourceRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) QuestionTixing(ctx context.Context, in *common.QuestionQuery, opts ...client.CallOption) (*TixingRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.QuestionTixing", in)
	out := new(TixingRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) QuestionTimuCount(ctx context.Context, in *common.QuestionQuery, opts ...client.CallOption) (*TimuCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.QuestionTimuCount", in)
	out := new(TimuCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) QuestionTimu(ctx context.Context, in *common.QuestionQuery, opts ...client.CallOption) (*TimuRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.QuestionTimu", in)
	out := new(TimuRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) QuestionTimuById(ctx context.Context, in *TimuByIdReq, opts ...client.CallOption) (*TimuByIdRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.QuestionTimuById", in)
	out := new(TimuByIdRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) CollectTimu(ctx context.Context, in *CollectReq, opts ...client.CallOption) (*CollectRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.CollectTimu", in)
	out := new(CollectRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) QueryCollectTimu(ctx context.Context, in *CollectListReq, opts ...client.CallOption) (*CollectListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.QueryCollectTimu", in)
	out := new(CollectListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) ModifyQuestion(ctx context.Context, in *ModifyReq, opts ...client.CallOption) (*ModifyRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.ModifyQuestion", in)
	out := new(ModifyRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) ModifyList(ctx context.Context, in *ModifyListReq, opts ...client.CallOption) (*ModifyListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.ModifyList", in)
	out := new(ModifyListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) ModifyCount(ctx context.Context, in *ModifyCountReq, opts ...client.CallOption) (*ModifyCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.ModifyCount", in)
	out := new(ModifyCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) QuestionTimuAdd(ctx context.Context, in *TimuAddReq, opts ...client.CallOption) (*TimuAddRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.QuestionTimuAdd", in)
	out := new(TimuAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) AddList(ctx context.Context, in *AddListReq, opts ...client.CallOption) (*AddListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.AddList", in)
	out := new(AddListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) AddCount(ctx context.Context, in *AddCountReq, opts ...client.CallOption) (*AddCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.AddCount", in)
	out := new(AddCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) Approve(ctx context.Context, in *ApproveReq, opts ...client.CallOption) (*ApproveRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.Approve", in)
	out := new(ApproveRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) OnSearch(ctx context.Context, in *SearchReq, opts ...client.CallOption) (*SearchRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.OnSearch", in)
	out := new(SearchRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GradeCateAdd(ctx context.Context, in *common.GradeCate, opts ...client.CallOption) (*AddGradeCateRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GradeCateAdd", in)
	out := new(AddGradeCateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GradeCateCount(ctx context.Context, in *common.Request, opts ...client.CallOption) (*GradeCateCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GradeCateCount", in)
	out := new(GradeCateCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GradeCateList(ctx context.Context, in *GradeCateListReq, opts ...client.CallOption) (*GradeCateListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GradeCateList", in)
	out := new(GradeCateListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) HomeBlackData(ctx context.Context, in *common.Request, opts ...client.CallOption) (*HomeBlackDataRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.HomeBlackData", in)
	out := new(HomeBlackDataRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GradeSubject(ctx context.Context, in *GradeSubjectReq, opts ...client.CallOption) (*GradeSubjectRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GradeSubject", in)
	out := new(GradeSubjectRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SchoolRollAdd(ctx context.Context, in *common.SchoolRoll, opts ...client.CallOption) (*SchoolRollAddRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SchoolRollAdd", in)
	out := new(SchoolRollAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SchoolRollCount(ctx context.Context, in *common.Request, opts ...client.CallOption) (*SchoolRollCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SchoolRollCount", in)
	out := new(SchoolRollCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SchoolList(ctx context.Context, in *SchoolRollListReq, opts ...client.CallOption) (*SchoolRollListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SchoolList", in)
	out := new(SchoolRollListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SubjectCateAdd(ctx context.Context, in *common.SubjectCate, opts ...client.CallOption) (*SubjectCateAddRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SubjectCateAdd", in)
	out := new(SubjectCateAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SubjectCateCount(ctx context.Context, in *common.Request, opts ...client.CallOption) (*SubjectCateCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SubjectCateCount", in)
	out := new(SubjectCateCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SubjectCateList(ctx context.Context, in *SubjectCateListReq, opts ...client.CallOption) (*SubjectCateListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SubjectCateList", in)
	out := new(SubjectCateListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SetUserInfo(ctx context.Context, in *SetUserInfoReq, opts ...client.CallOption) (*SetUserInfoRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SetUserInfo", in)
	out := new(SetUserInfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...client.CallOption) (*GetUserInfoRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GetUserInfo", in)
	out := new(GetUserInfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SetWechatUinfo(ctx context.Context, in *SetWechatUinfoReq, opts ...client.CallOption) (*SetWechatUinfoRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SetWechatUinfo", in)
	out := new(SetWechatUinfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GetWechatUinfo(ctx context.Context, in *GetWechatUinfoReq, opts ...client.CallOption) (*GetWechatUinfoRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GetWechatUinfo", in)
	out := new(GetWechatUinfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SetAlipayUinfo(ctx context.Context, in *SetAlipayUinfoReq, opts ...client.CallOption) (*SetAlipayUinfoRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SetAlipayUinfo", in)
	out := new(SetAlipayUinfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GetAlipayUinfo(ctx context.Context, in *GetAlipayUinfoReq, opts ...client.CallOption) (*GetAlipayUinfoRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GetAlipayUinfo", in)
	out := new(GetAlipayUinfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SetBaiduEntity(ctx context.Context, in *SetBaiduEntityReq, opts ...client.CallOption) (*SetBaiduEntityRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SetBaiduEntity", in)
	out := new(SetBaiduEntityRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) BaiduEntity(ctx context.Context, in *BaiduEntityReq, opts ...client.CallOption) (*BaiduEntityRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.BaiduEntity", in)
	out := new(BaiduEntityRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SearchHistory(ctx context.Context, in *SearchHistoryReq, opts ...client.CallOption) (*SearchHistoryRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SearchHistory", in)
	out := new(SearchHistoryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SearchItem(ctx context.Context, in *SearchItemReq, opts ...client.CallOption) (*SearchItemRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SearchItem", in)
	out := new(SearchItemRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) RefreshModifyReward(ctx context.Context, in *RefreshModifyRewardReq, opts ...client.CallOption) (*RefreshModifyRewardRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.RefreshModifyReward", in)
	out := new(RefreshModifyRewardRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) RefreshAddReward(ctx context.Context, in *RefreshAddRewardReq, opts ...client.CallOption) (*RefreshAddRewardRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.RefreshAddReward", in)
	out := new(RefreshAddRewardRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) RefreshUserCoin(ctx context.Context, in *RefreshUserCoinReq, opts ...client.CallOption) (*RefreshUserCoinRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.RefreshUserCoin", in)
	out := new(RefreshUserCoinRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) TixingByVid(ctx context.Context, in *TixingByVidReq, opts ...client.CallOption) (*TixingByVidRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.TixingByVid", in)
	out := new(TixingByVidRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SourceByVid(ctx context.Context, in *SourceByVidReq, opts ...client.CallOption) (*SourceByVidRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SourceByVid", in)
	out := new(SourceByVidRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) IdentAdd(ctx context.Context, in *IdentAddReq, opts ...client.CallOption) (*IdentAddRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.IdentAdd", in)
	out := new(IdentAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) IdentByIid(ctx context.Context, in *IdentByIidReq, opts ...client.CallOption) (*IdentByIidRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.IdentByIid", in)
	out := new(IdentByIidRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) IdentList(ctx context.Context, in *IdentListReq, opts ...client.CallOption) (*IdentListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.IdentList", in)
	out := new(IdentListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) IdentCount(ctx context.Context, in *IdentCountReq, opts ...client.CallOption) (*IdentCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.IdentCount", in)
	out := new(IdentCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) RefreshIdentReward(ctx context.Context, in *RefreshIdentRewardReq, opts ...client.CallOption) (*RefreshIdentRewardRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.RefreshIdentReward", in)
	out := new(RefreshIdentRewardRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) UpdateTeacher(ctx context.Context, in *UpdateTeacherReq, opts ...client.CallOption) (*UpdateTeacherRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.UpdateTeacher", in)
	out := new(UpdateTeacherRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GetTeacher(ctx context.Context, in *FindTeacherReq, opts ...client.CallOption) (*FindTeacherRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GetTeacher", in)
	out := new(FindTeacherRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) FocusTeacher(ctx context.Context, in *FocusTeacherReq, opts ...client.CallOption) (*FocusTeacherRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.FocusTeacher", in)
	out := new(FocusTeacherRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) NoteCooper(ctx context.Context, in *NoteCooperReq, opts ...client.CallOption) (*NoteCooperRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.NoteCooper", in)
	out := new(NoteCooperRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) NoteTag(ctx context.Context, in *NoteTagReq, opts ...client.CallOption) (*NoteTagRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.NoteTag", in)
	out := new(NoteTagRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) NoteBgcolor(ctx context.Context, in *NoteBgcolorReq, opts ...client.CallOption) (*NoteBgcolorRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.NoteBgcolor", in)
	out := new(NoteBgcolorRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) NoteTagAdd(ctx context.Context, in *NoteTagAddReq, opts ...client.CallOption) (*NoteTagAddRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.NoteTagAdd", in)
	out := new(NoteTagAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) NoteTagList(ctx context.Context, in *NoteTagListReq, opts ...client.CallOption) (*NoteTagListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.NoteTagList", in)
	out := new(NoteTagListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SubmitCert(ctx context.Context, in *SubmitCertReq, opts ...client.CallOption) (*SubmitCertRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SubmitCert", in)
	out := new(SubmitCertRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) CertStatus(ctx context.Context, in *CertStatusReq, opts ...client.CallOption) (*CertStatusRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.CertStatus", in)
	out := new(CertStatusRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) CertInfo(ctx context.Context, in *CertInfoReq, opts ...client.CallOption) (*CertInfoRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.CertInfo", in)
	out := new(CertInfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) CertFlow(ctx context.Context, in *CertFlowReq, opts ...client.CallOption) (*CertFlowRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.CertFlow", in)
	out := new(CertFlowRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) AddUserLog(ctx context.Context, in *AddUserLogReq, opts ...client.CallOption) (*AddUserLogRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.AddUserLog", in)
	out := new(AddUserLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) QueryUserLog(ctx context.Context, in *QueryUserLogReq, opts ...client.CallOption) (*QueryUserLogRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.QueryUserLog", in)
	out := new(QueryUserLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) UserLogCount(ctx context.Context, in *UserLogCountReq, opts ...client.CallOption) (*UserLogCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.UserLogCount", in)
	out := new(UserLogCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) AddTask(ctx context.Context, in *AddTaskReq, opts ...client.CallOption) (*AddTaskRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.AddTask", in)
	out := new(AddTaskRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GetTask(ctx context.Context, in *GetTaskReq, opts ...client.CallOption) (*GetTaskRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GetTask", in)
	out := new(GetTaskRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) GetTaskCount(ctx context.Context, in *GetTaskCountReq, opts ...client.CallOption) (*GetTaskCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.GetTaskCount", in)
	out := new(GetTaskCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) AddPkg(ctx context.Context, in *AddPkgReq, opts ...client.CallOption) (*AddPkgRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.AddPkg", in)
	out := new(AddPkgRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) DelPkg(ctx context.Context, in *DelPkgReq, opts ...client.CallOption) (*DelPkgRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.DelPkg", in)
	out := new(DelPkgRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) PkgLists(ctx context.Context, in *PkgListReq, opts ...client.CallOption) (*PkgListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.PkgLists", in)
	out := new(PkgListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) PkgCount(ctx context.Context, in *PkgCountReq, opts ...client.CallOption) (*PkgCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.PkgCount", in)
	out := new(PkgCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SponsorAdd(ctx context.Context, in *SponsorAddReq, opts ...client.CallOption) (*SponsorAddRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SponsorAdd", in)
	out := new(SponsorAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) SponsorList(ctx context.Context, in *SponsorListReq, opts ...client.CallOption) (*SponsorListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.SponsorList", in)
	out := new(SponsorListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) VipLimit(ctx context.Context, in *VipLimitReq, opts ...client.CallOption) (*VipLimitRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.VipLimit", in)
	out := new(VipLimitRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) VipProduct(ctx context.Context, in *VipProductReq, opts ...client.CallOption) (*VipProductRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.VipProduct", in)
	out := new(VipProductRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) VipDesc(ctx context.Context, in *VipDescReq, opts ...client.CallOption) (*VipDescRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.VipDesc", in)
	out := new(VipDescRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) VipPay(ctx context.Context, in *VipPayReq, opts ...client.CallOption) (*VipPayRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.VipPay", in)
	out := new(VipPayRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) VipOrderStatus(ctx context.Context, in *VipOrderStatusReq, opts ...client.CallOption) (*VipOrderStatusRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.VipOrderStatus", in)
	out := new(VipOrderStatusRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) VipOrderList(ctx context.Context, in *VipOrderListReq, opts ...client.CallOption) (*VipOrderListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.VipOrderList", in)
	out := new(VipOrderListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) UserScore(ctx context.Context, in *UserScoreReq, opts ...client.CallOption) (*UserScoreRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.UserScore", in)
	out := new(UserScoreRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) UserVip(ctx context.Context, in *UserVipReq, opts ...client.CallOption) (*UserVipRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.UserVip", in)
	out := new(UserVipRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) FootLog(ctx context.Context, in *FootLogReq, opts ...client.CallOption) (*FootLogRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.FootLog", in)
	out := new(FootLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) AddExam(ctx context.Context, in *AddExamReq, opts ...client.CallOption) (*AddExamRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.AddExam", in)
	out := new(AddExamRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) ExamLists(ctx context.Context, in *ExamListReq, opts ...client.CallOption) (*ExamListRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.ExamLists", in)
	out := new(ExamListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datanodeService) ExamCount(ctx context.Context, in *ExamCountReq, opts ...client.CallOption) (*ExamCountRes, error) {
	req := c.c.NewRequest(c.name, "DatanodeService.ExamCount", in)
	out := new(ExamCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DatanodeService service

type DatanodeServiceHandler interface {
	// ---------- 用户接口 ------- //
	// 创建新用户
	CreateUser(context.Context, *NewUserReq, *UserRes) error
	// 获取用户信息
	UserInfo(context.Context, *UserInfoReq, *UserRes) error
	// 搜索用户信息
	SearchUser(context.Context, *SearchUserReq, *SearchUserRes) error
	// 更新用户信息
	UpdateUserInfo(context.Context, *UpdateUserinfoReq, *UpdateUserinfoRes) error
	// 关注对象操作
	AddAttention(context.Context, *AddAttentionReq, *AddAttentionRes) error
	DelAttention(context.Context, *DelAttentionReq, *DelAttentionRes) error
	GetAttention(context.Context, *GetAttentionReq, *GetAttentionRes) error
	// 用户
	AddUserAttention(context.Context, *AddUserAttentionReq, *AddUserAttentionRes) error
	DelUserAttention(context.Context, *DelUserAttentionReq, *DelUserAttentionRes) error
	GetUserAttention(context.Context, *GetUserAttentionReq, *GetUserAttentionRes) error
	// --------------- 好友接口 ----------- //
	// 添加好友
	AddFriends(context.Context, *AddFriendReq, *AddFriendRes) error
	// 同意好友
	AgreeFriends(context.Context, *AgreeFriendReq, *AgreeFriendRes) error
	// 请求好友列表
	FriendsList(context.Context, *FriendsListReq, *FriendRes) error
	// 添加组
	CreateGroup(context.Context, *CreateGroupReq, *CreateGroupRes) error
	// 重命名组
	RenameGroup(context.Context, *RenameGroupReq, *RenameGroupRes) error
	// 添加好友备注
	AddNoteFriend(context.Context, *AddFriendNoteReq, *AddFriendNoteRes) error
	// 移动到新的组
	MoveToNewGroup(context.Context, *MoveGroupReq, *MoveGroupRes) error
	// 删除好友
	RemoveFriend(context.Context, *RemoveFriendReq, *RemoveFriendRes) error
	// ----------------- 点赞 --------------- //
	// 获取点赞的数量
	LikesCount(context.Context, *LikesCountReq, *LikesCountRes) error
	// 添加点赞
	LikesAdd(context.Context, *LikesAddReq, *LikesAddRes) error
	// 获取点赞列表
	LikesList(context.Context, *LikesListReq, *LikesListRes) error
	// ----------------- 笔记 ----------------//
	//更新或者添加笔记信息
	UpdateNote(context.Context, *UpdateNoteReq, *NoteMetaRes) error
	// 获取笔记列表
	NoteMetaList(context.Context, *NoteMetaListReq, *NoteMetaListRes) error
	// 获取用户笔记数量
	NoteListCount(context.Context, *NoteMetaListReq, *NoteListCountRes) error
	// 获取笔记数据列
	NoteData(context.Context, *NoteDataReq, *NoteDataRes) error
	// 获取笔记html数据
	NoteHtml(context.Context, *NoteHtmlReq, *NoteHtmlRes) error
	// ---------------- 动态 --------------- //
	// 获取动态的数量
	MomentsCount(context.Context, *MomentsCountReq, *MomentsCountRes) error
	// 添加动态
	MomentsAdd(context.Context, *Moments, *AddMomentsRes) error
	// 获取动态列表
	MomentsList(context.Context, *MomentsListReq, *MomentsListRes) error
	// ---------------- 文件 ------------------//
	// 获取目录,目录之间的/替换成-
	FileDirOne(context.Context, *FileDirReq, *FileDirRes) error
	// 添加目录
	FileDirAdd(context.Context, *AddDirReq, *AddDirRes) error
	// 添加文件
	AddFile(context.Context, *AddFileReq, *AddFileRes) error
	// 获取云盘属性，容量和文件数量
	YunSaveAttr(context.Context, *FileAttrReq, *FileAttrRes) error
	// 获取图像缩略图
	Thumbnail(context.Context, *ThumbnailReq, *ThumbnailRes) error
	// ------------- key-value ----------------//
	// 设置缓存
	SetKeyValue(context.Context, *SetKeyvalueReq, *SetKeyvalueRes) error
	// 获取缓存
	GetKeyValue(context.Context, *GetKeyvalueReq, *GetKeyvalueRes) error
	// 删除
	DelKeyValue(context.Context, *DelKeyvalueReq, *DelKeyvalueRes) error
	// --------------- 试题相关 -------------------//
	// 获取版本
	QuestionVersion(context.Context, *common.QuestionQuery, *VersionRes) error
	// 获取章节
	QuestionChapter(context.Context, *common.QuestionQuery, *ChapterRes) error
	// 科目名
	SubjectName(context.Context, *SubjectNameReq, *SubjectNameRes) error
	// 获取来源
	QuestionSource(context.Context, *common.QuestionQuery, *SourceRes) error
	// 获取题型
	QuestionTixing(context.Context, *common.QuestionQuery, *TixingRes) error
	// 获取题目数量
	QuestionTimuCount(context.Context, *common.QuestionQuery, *TimuCountRes) error
	// 请求题目
	QuestionTimu(context.Context, *common.QuestionQuery, *TimuRes) error
	// 根据试题id请求题目
	QuestionTimuById(context.Context, *TimuByIdReq, *TimuByIdRes) error
	// 收藏试题
	CollectTimu(context.Context, *CollectReq, *CollectRes) error
	// 获取收藏列表
	QueryCollectTimu(context.Context, *CollectListReq, *CollectListRes) error
	// 纠错试题（包含更新或添加）
	ModifyQuestion(context.Context, *ModifyReq, *ModifyRes) error
	//获取个人纠错的试题
	ModifyList(context.Context, *ModifyListReq, *ModifyListRes) error
	//获取个人纠错的试题的数量
	ModifyCount(context.Context, *ModifyCountReq, *ModifyCountRes) error
	//添加试题
	QuestionTimuAdd(context.Context, *TimuAddReq, *TimuAddRes) error
	//获取添加的试题
	AddList(context.Context, *AddListReq, *AddListRes) error
	// 获取添加的数量
	AddCount(context.Context, *AddCountReq, *AddCountRes) error
	// 审核修改的试题
	Approve(context.Context, *ApproveReq, *ApproveRes) error
	//搜索试题
	OnSearch(context.Context, *SearchReq, *SearchRes) error
	// 添加年纪信息
	GradeCateAdd(context.Context, *common.GradeCate, *AddGradeCateRes) error
	//获取年纪总数
	GradeCateCount(context.Context, *common.Request, *GradeCateCountRes) error
	// 获取年级信息
	GradeCateList(context.Context, *GradeCateListReq, *GradeCateListRes) error
	//获取主页最新动态统计信息
	HomeBlackData(context.Context, *common.Request, *HomeBlackDataRes) error
	//获取学籍对应的年级+科目
	GradeSubject(context.Context, *GradeSubjectReq, *GradeSubjectRes) error
	// 添加学级信息
	SchoolRollAdd(context.Context, *common.SchoolRoll, *SchoolRollAddRes) error
	//获取年级总数
	SchoolRollCount(context.Context, *common.Request, *SchoolRollCountRes) error
	//获取年级列表信息
	SchoolList(context.Context, *SchoolRollListReq, *SchoolRollListRes) error
	//添加科目信息
	SubjectCateAdd(context.Context, *common.SubjectCate, *SubjectCateAddRes) error
	//获取科目总数
	SubjectCateCount(context.Context, *common.Request, *SubjectCateCountRes) error
	//获取科目列表
	SubjectCateList(context.Context, *SubjectCateListReq, *SubjectCateListRes) error
	//用户信息
	SetUserInfo(context.Context, *SetUserInfoReq, *SetUserInfoRes) error
	GetUserInfo(context.Context, *GetUserInfoReq, *GetUserInfoRes) error
	//微信用户信息操作
	SetWechatUinfo(context.Context, *SetWechatUinfoReq, *SetWechatUinfoRes) error
	GetWechatUinfo(context.Context, *GetWechatUinfoReq, *GetWechatUinfoRes) error
	// 支付宝用户信息操作
	SetAlipayUinfo(context.Context, *SetAlipayUinfoReq, *SetAlipayUinfoRes) error
	GetAlipayUinfo(context.Context, *GetAlipayUinfoReq, *GetAlipayUinfoRes) error
	// 请求百度实体信息
	SetBaiduEntity(context.Context, *SetBaiduEntityReq, *SetBaiduEntityRes) error
	BaiduEntity(context.Context, *BaiduEntityReq, *BaiduEntityRes) error
	// 获取搜索记录
	SearchHistory(context.Context, *SearchHistoryReq, *SearchHistoryRes) error
	// 搜索关键字补全
	SearchItem(context.Context, *SearchItemReq, *SearchItemRes) error
	// 更新修改试题的奖励积分
	RefreshModifyReward(context.Context, *RefreshModifyRewardReq, *RefreshModifyRewardRes) error
	// 更新添加试题的奖励积分
	RefreshAddReward(context.Context, *RefreshAddRewardReq, *RefreshAddRewardRes) error
	// 更新用户的coin数值
	RefreshUserCoin(context.Context, *RefreshUserCoinReq, *RefreshUserCoinRes) error
	// 通过版本id获取题型列表
	TixingByVid(context.Context, *TixingByVidReq, *TixingByVidRes) error
	// 通过版本id获取来源
	SourceByVid(context.Context, *SourceByVidReq, *SourceByVidRes) error
	// 添加识别记录
	IdentAdd(context.Context, *IdentAddReq, *IdentAddRes) error
	// 根据识别id获取识别记录
	IdentByIid(context.Context, *IdentByIidReq, *IdentByIidRes) error
	// 获取识别列表
	IdentList(context.Context, *IdentListReq, *IdentListRes) error
	// 获取识别列表熟数量
	IdentCount(context.Context, *IdentCountReq, *IdentCountRes) error
	// 刷新识别奖励
	RefreshIdentReward(context.Context, *RefreshIdentRewardReq, *RefreshIdentRewardRes) error
	// 添加或者根据教师信息
	UpdateTeacher(context.Context, *UpdateTeacherReq, *UpdateTeacherRes) error
	// 查询教师信息
	GetTeacher(context.Context, *FindTeacherReq, *FindTeacherRes) error
	// 关注/取消关注教师
	FocusTeacher(context.Context, *FocusTeacherReq, *FocusTeacherRes) error
	// 更新笔记的协作者、标签、颜色
	NoteCooper(context.Context, *NoteCooperReq, *NoteCooperRes) error
	NoteTag(context.Context, *NoteTagReq, *NoteTagRes) error
	NoteBgcolor(context.Context, *NoteBgcolorReq, *NoteBgcolorRes) error
	NoteTagAdd(context.Context, *NoteTagAddReq, *NoteTagAddRes) error
	NoteTagList(context.Context, *NoteTagListReq, *NoteTagListRes) error
	// 提交实名
	SubmitCert(context.Context, *SubmitCertReq, *SubmitCertRes) error
	// 更新实名状态
	CertStatus(context.Context, *CertStatusReq, *CertStatusRes) error
	// 获取实名信息
	CertInfo(context.Context, *CertInfoReq, *CertInfoRes) error
	// 实名日志记录
	CertFlow(context.Context, *CertFlowReq, *CertFlowRes) error
	// 添加日志
	AddUserLog(context.Context, *AddUserLogReq, *AddUserLogRes) error
	// 获取日志
	QueryUserLog(context.Context, *QueryUserLogReq, *QueryUserLogRes) error
	// 日志数量
	UserLogCount(context.Context, *UserLogCountReq, *UserLogCountRes) error
	// 添加任务
	AddTask(context.Context, *AddTaskReq, *AddTaskRes) error
	// 获取任务
	GetTask(context.Context, *GetTaskReq, *GetTaskRes) error
	// 获取任务数量
	GetTaskCount(context.Context, *GetTaskCountReq, *GetTaskCountRes) error
	// 添加包信息
	AddPkg(context.Context, *AddPkgReq, *AddPkgRes) error
	// 删除包
	DelPkg(context.Context, *DelPkgReq, *DelPkgRes) error
	// 获取包列表
	PkgLists(context.Context, *PkgListReq, *PkgListRes) error
	// 获取包数量
	PkgCount(context.Context, *PkgCountReq, *PkgCountRes) error
	// 添加赞助信息
	SponsorAdd(context.Context, *SponsorAddReq, *SponsorAddRes) error
	// 获取赞助列表
	SponsorList(context.Context, *SponsorListReq, *SponsorListRes) error
	// 获取vip对应的限制
	VipLimit(context.Context, *VipLimitReq, *VipLimitRes) error
	// vip产品列表
	VipProduct(context.Context, *VipProductReq, *VipProductRes) error
	// vip产品介绍
	VipDesc(context.Context, *VipDescReq, *VipDescRes) error
	// vip充值
	VipPay(context.Context, *VipPayReq, *VipPayRes) error
	// 更新vip充值状态
	VipOrderStatus(context.Context, *VipOrderStatusReq, *VipOrderStatusRes) error
	// 获取vip充值列表
	VipOrderList(context.Context, *VipOrderListReq, *VipOrderListRes) error
	// 用户积分操作
	UserScore(context.Context, *UserScoreReq, *UserScoreRes) error
	// 用户vip操作
	UserVip(context.Context, *UserVipReq, *UserVipRes) error
	// 服务调用日志
	FootLog(context.Context, *FootLogReq, *FootLogRes) error
	// 添加试题
	AddExam(context.Context, *AddExamReq, *AddExamRes) error
	// 获取试卷列表
	ExamLists(context.Context, *ExamListReq, *ExamListRes) error
	// 获取试卷数量
	ExamCount(context.Context, *ExamCountReq, *ExamCountRes) error
}

func RegisterDatanodeServiceHandler(s server.Server, hdlr DatanodeServiceHandler, opts ...server.HandlerOption) error {
	type datanodeService interface {
		CreateUser(ctx context.Context, in *NewUserReq, out *UserRes) error
		UserInfo(ctx context.Context, in *UserInfoReq, out *UserRes) error
		SearchUser(ctx context.Context, in *SearchUserReq, out *SearchUserRes) error
		UpdateUserInfo(ctx context.Context, in *UpdateUserinfoReq, out *UpdateUserinfoRes) error
		AddAttention(ctx context.Context, in *AddAttentionReq, out *AddAttentionRes) error
		DelAttention(ctx context.Context, in *DelAttentionReq, out *DelAttentionRes) error
		GetAttention(ctx context.Context, in *GetAttentionReq, out *GetAttentionRes) error
		AddUserAttention(ctx context.Context, in *AddUserAttentionReq, out *AddUserAttentionRes) error
		DelUserAttention(ctx context.Context, in *DelUserAttentionReq, out *DelUserAttentionRes) error
		GetUserAttention(ctx context.Context, in *GetUserAttentionReq, out *GetUserAttentionRes) error
		AddFriends(ctx context.Context, in *AddFriendReq, out *AddFriendRes) error
		AgreeFriends(ctx context.Context, in *AgreeFriendReq, out *AgreeFriendRes) error
		FriendsList(ctx context.Context, in *FriendsListReq, out *FriendRes) error
		CreateGroup(ctx context.Context, in *CreateGroupReq, out *CreateGroupRes) error
		RenameGroup(ctx context.Context, in *RenameGroupReq, out *RenameGroupRes) error
		AddNoteFriend(ctx context.Context, in *AddFriendNoteReq, out *AddFriendNoteRes) error
		MoveToNewGroup(ctx context.Context, in *MoveGroupReq, out *MoveGroupRes) error
		RemoveFriend(ctx context.Context, in *RemoveFriendReq, out *RemoveFriendRes) error
		LikesCount(ctx context.Context, in *LikesCountReq, out *LikesCountRes) error
		LikesAdd(ctx context.Context, in *LikesAddReq, out *LikesAddRes) error
		LikesList(ctx context.Context, in *LikesListReq, out *LikesListRes) error
		UpdateNote(ctx context.Context, in *UpdateNoteReq, out *NoteMetaRes) error
		NoteMetaList(ctx context.Context, in *NoteMetaListReq, out *NoteMetaListRes) error
		NoteListCount(ctx context.Context, in *NoteMetaListReq, out *NoteListCountRes) error
		NoteData(ctx context.Context, in *NoteDataReq, out *NoteDataRes) error
		NoteHtml(ctx context.Context, in *NoteHtmlReq, out *NoteHtmlRes) error
		MomentsCount(ctx context.Context, in *MomentsCountReq, out *MomentsCountRes) error
		MomentsAdd(ctx context.Context, in *Moments, out *AddMomentsRes) error
		MomentsList(ctx context.Context, in *MomentsListReq, out *MomentsListRes) error
		FileDirOne(ctx context.Context, in *FileDirReq, out *FileDirRes) error
		FileDirAdd(ctx context.Context, in *AddDirReq, out *AddDirRes) error
		AddFile(ctx context.Context, in *AddFileReq, out *AddFileRes) error
		YunSaveAttr(ctx context.Context, in *FileAttrReq, out *FileAttrRes) error
		Thumbnail(ctx context.Context, in *ThumbnailReq, out *ThumbnailRes) error
		SetKeyValue(ctx context.Context, in *SetKeyvalueReq, out *SetKeyvalueRes) error
		GetKeyValue(ctx context.Context, in *GetKeyvalueReq, out *GetKeyvalueRes) error
		DelKeyValue(ctx context.Context, in *DelKeyvalueReq, out *DelKeyvalueRes) error
		QuestionVersion(ctx context.Context, in *common.QuestionQuery, out *VersionRes) error
		QuestionChapter(ctx context.Context, in *common.QuestionQuery, out *ChapterRes) error
		SubjectName(ctx context.Context, in *SubjectNameReq, out *SubjectNameRes) error
		QuestionSource(ctx context.Context, in *common.QuestionQuery, out *SourceRes) error
		QuestionTixing(ctx context.Context, in *common.QuestionQuery, out *TixingRes) error
		QuestionTimuCount(ctx context.Context, in *common.QuestionQuery, out *TimuCountRes) error
		QuestionTimu(ctx context.Context, in *common.QuestionQuery, out *TimuRes) error
		QuestionTimuById(ctx context.Context, in *TimuByIdReq, out *TimuByIdRes) error
		CollectTimu(ctx context.Context, in *CollectReq, out *CollectRes) error
		QueryCollectTimu(ctx context.Context, in *CollectListReq, out *CollectListRes) error
		ModifyQuestion(ctx context.Context, in *ModifyReq, out *ModifyRes) error
		ModifyList(ctx context.Context, in *ModifyListReq, out *ModifyListRes) error
		ModifyCount(ctx context.Context, in *ModifyCountReq, out *ModifyCountRes) error
		QuestionTimuAdd(ctx context.Context, in *TimuAddReq, out *TimuAddRes) error
		AddList(ctx context.Context, in *AddListReq, out *AddListRes) error
		AddCount(ctx context.Context, in *AddCountReq, out *AddCountRes) error
		Approve(ctx context.Context, in *ApproveReq, out *ApproveRes) error
		OnSearch(ctx context.Context, in *SearchReq, out *SearchRes) error
		GradeCateAdd(ctx context.Context, in *common.GradeCate, out *AddGradeCateRes) error
		GradeCateCount(ctx context.Context, in *common.Request, out *GradeCateCountRes) error
		GradeCateList(ctx context.Context, in *GradeCateListReq, out *GradeCateListRes) error
		HomeBlackData(ctx context.Context, in *common.Request, out *HomeBlackDataRes) error
		GradeSubject(ctx context.Context, in *GradeSubjectReq, out *GradeSubjectRes) error
		SchoolRollAdd(ctx context.Context, in *common.SchoolRoll, out *SchoolRollAddRes) error
		SchoolRollCount(ctx context.Context, in *common.Request, out *SchoolRollCountRes) error
		SchoolList(ctx context.Context, in *SchoolRollListReq, out *SchoolRollListRes) error
		SubjectCateAdd(ctx context.Context, in *common.SubjectCate, out *SubjectCateAddRes) error
		SubjectCateCount(ctx context.Context, in *common.Request, out *SubjectCateCountRes) error
		SubjectCateList(ctx context.Context, in *SubjectCateListReq, out *SubjectCateListRes) error
		SetUserInfo(ctx context.Context, in *SetUserInfoReq, out *SetUserInfoRes) error
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, out *GetUserInfoRes) error
		SetWechatUinfo(ctx context.Context, in *SetWechatUinfoReq, out *SetWechatUinfoRes) error
		GetWechatUinfo(ctx context.Context, in *GetWechatUinfoReq, out *GetWechatUinfoRes) error
		SetAlipayUinfo(ctx context.Context, in *SetAlipayUinfoReq, out *SetAlipayUinfoRes) error
		GetAlipayUinfo(ctx context.Context, in *GetAlipayUinfoReq, out *GetAlipayUinfoRes) error
		SetBaiduEntity(ctx context.Context, in *SetBaiduEntityReq, out *SetBaiduEntityRes) error
		BaiduEntity(ctx context.Context, in *BaiduEntityReq, out *BaiduEntityRes) error
		SearchHistory(ctx context.Context, in *SearchHistoryReq, out *SearchHistoryRes) error
		SearchItem(ctx context.Context, in *SearchItemReq, out *SearchItemRes) error
		RefreshModifyReward(ctx context.Context, in *RefreshModifyRewardReq, out *RefreshModifyRewardRes) error
		RefreshAddReward(ctx context.Context, in *RefreshAddRewardReq, out *RefreshAddRewardRes) error
		RefreshUserCoin(ctx context.Context, in *RefreshUserCoinReq, out *RefreshUserCoinRes) error
		TixingByVid(ctx context.Context, in *TixingByVidReq, out *TixingByVidRes) error
		SourceByVid(ctx context.Context, in *SourceByVidReq, out *SourceByVidRes) error
		IdentAdd(ctx context.Context, in *IdentAddReq, out *IdentAddRes) error
		IdentByIid(ctx context.Context, in *IdentByIidReq, out *IdentByIidRes) error
		IdentList(ctx context.Context, in *IdentListReq, out *IdentListRes) error
		IdentCount(ctx context.Context, in *IdentCountReq, out *IdentCountRes) error
		RefreshIdentReward(ctx context.Context, in *RefreshIdentRewardReq, out *RefreshIdentRewardRes) error
		UpdateTeacher(ctx context.Context, in *UpdateTeacherReq, out *UpdateTeacherRes) error
		GetTeacher(ctx context.Context, in *FindTeacherReq, out *FindTeacherRes) error
		FocusTeacher(ctx context.Context, in *FocusTeacherReq, out *FocusTeacherRes) error
		NoteCooper(ctx context.Context, in *NoteCooperReq, out *NoteCooperRes) error
		NoteTag(ctx context.Context, in *NoteTagReq, out *NoteTagRes) error
		NoteBgcolor(ctx context.Context, in *NoteBgcolorReq, out *NoteBgcolorRes) error
		NoteTagAdd(ctx context.Context, in *NoteTagAddReq, out *NoteTagAddRes) error
		NoteTagList(ctx context.Context, in *NoteTagListReq, out *NoteTagListRes) error
		SubmitCert(ctx context.Context, in *SubmitCertReq, out *SubmitCertRes) error
		CertStatus(ctx context.Context, in *CertStatusReq, out *CertStatusRes) error
		CertInfo(ctx context.Context, in *CertInfoReq, out *CertInfoRes) error
		CertFlow(ctx context.Context, in *CertFlowReq, out *CertFlowRes) error
		AddUserLog(ctx context.Context, in *AddUserLogReq, out *AddUserLogRes) error
		QueryUserLog(ctx context.Context, in *QueryUserLogReq, out *QueryUserLogRes) error
		UserLogCount(ctx context.Context, in *UserLogCountReq, out *UserLogCountRes) error
		AddTask(ctx context.Context, in *AddTaskReq, out *AddTaskRes) error
		GetTask(ctx context.Context, in *GetTaskReq, out *GetTaskRes) error
		GetTaskCount(ctx context.Context, in *GetTaskCountReq, out *GetTaskCountRes) error
		AddPkg(ctx context.Context, in *AddPkgReq, out *AddPkgRes) error
		DelPkg(ctx context.Context, in *DelPkgReq, out *DelPkgRes) error
		PkgLists(ctx context.Context, in *PkgListReq, out *PkgListRes) error
		PkgCount(ctx context.Context, in *PkgCountReq, out *PkgCountRes) error
		SponsorAdd(ctx context.Context, in *SponsorAddReq, out *SponsorAddRes) error
		SponsorList(ctx context.Context, in *SponsorListReq, out *SponsorListRes) error
		VipLimit(ctx context.Context, in *VipLimitReq, out *VipLimitRes) error
		VipProduct(ctx context.Context, in *VipProductReq, out *VipProductRes) error
		VipDesc(ctx context.Context, in *VipDescReq, out *VipDescRes) error
		VipPay(ctx context.Context, in *VipPayReq, out *VipPayRes) error
		VipOrderStatus(ctx context.Context, in *VipOrderStatusReq, out *VipOrderStatusRes) error
		VipOrderList(ctx context.Context, in *VipOrderListReq, out *VipOrderListRes) error
		UserScore(ctx context.Context, in *UserScoreReq, out *UserScoreRes) error
		UserVip(ctx context.Context, in *UserVipReq, out *UserVipRes) error
		FootLog(ctx context.Context, in *FootLogReq, out *FootLogRes) error
		AddExam(ctx context.Context, in *AddExamReq, out *AddExamRes) error
		ExamLists(ctx context.Context, in *ExamListReq, out *ExamListRes) error
		ExamCount(ctx context.Context, in *ExamCountReq, out *ExamCountRes) error
	}
	type DatanodeService struct {
		datanodeService
	}
	h := &datanodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DatanodeService{h}, opts...))
}

type datanodeServiceHandler struct {
	DatanodeServiceHandler
}

func (h *datanodeServiceHandler) CreateUser(ctx context.Context, in *NewUserReq, out *UserRes) error {
	return h.DatanodeServiceHandler.CreateUser(ctx, in, out)
}

func (h *datanodeServiceHandler) UserInfo(ctx context.Context, in *UserInfoReq, out *UserRes) error {
	return h.DatanodeServiceHandler.UserInfo(ctx, in, out)
}

func (h *datanodeServiceHandler) SearchUser(ctx context.Context, in *SearchUserReq, out *SearchUserRes) error {
	return h.DatanodeServiceHandler.SearchUser(ctx, in, out)
}

func (h *datanodeServiceHandler) UpdateUserInfo(ctx context.Context, in *UpdateUserinfoReq, out *UpdateUserinfoRes) error {
	return h.DatanodeServiceHandler.UpdateUserInfo(ctx, in, out)
}

func (h *datanodeServiceHandler) AddAttention(ctx context.Context, in *AddAttentionReq, out *AddAttentionRes) error {
	return h.DatanodeServiceHandler.AddAttention(ctx, in, out)
}

func (h *datanodeServiceHandler) DelAttention(ctx context.Context, in *DelAttentionReq, out *DelAttentionRes) error {
	return h.DatanodeServiceHandler.DelAttention(ctx, in, out)
}

func (h *datanodeServiceHandler) GetAttention(ctx context.Context, in *GetAttentionReq, out *GetAttentionRes) error {
	return h.DatanodeServiceHandler.GetAttention(ctx, in, out)
}

func (h *datanodeServiceHandler) AddUserAttention(ctx context.Context, in *AddUserAttentionReq, out *AddUserAttentionRes) error {
	return h.DatanodeServiceHandler.AddUserAttention(ctx, in, out)
}

func (h *datanodeServiceHandler) DelUserAttention(ctx context.Context, in *DelUserAttentionReq, out *DelUserAttentionRes) error {
	return h.DatanodeServiceHandler.DelUserAttention(ctx, in, out)
}

func (h *datanodeServiceHandler) GetUserAttention(ctx context.Context, in *GetUserAttentionReq, out *GetUserAttentionRes) error {
	return h.DatanodeServiceHandler.GetUserAttention(ctx, in, out)
}

func (h *datanodeServiceHandler) AddFriends(ctx context.Context, in *AddFriendReq, out *AddFriendRes) error {
	return h.DatanodeServiceHandler.AddFriends(ctx, in, out)
}

func (h *datanodeServiceHandler) AgreeFriends(ctx context.Context, in *AgreeFriendReq, out *AgreeFriendRes) error {
	return h.DatanodeServiceHandler.AgreeFriends(ctx, in, out)
}

func (h *datanodeServiceHandler) FriendsList(ctx context.Context, in *FriendsListReq, out *FriendRes) error {
	return h.DatanodeServiceHandler.FriendsList(ctx, in, out)
}

func (h *datanodeServiceHandler) CreateGroup(ctx context.Context, in *CreateGroupReq, out *CreateGroupRes) error {
	return h.DatanodeServiceHandler.CreateGroup(ctx, in, out)
}

func (h *datanodeServiceHandler) RenameGroup(ctx context.Context, in *RenameGroupReq, out *RenameGroupRes) error {
	return h.DatanodeServiceHandler.RenameGroup(ctx, in, out)
}

func (h *datanodeServiceHandler) AddNoteFriend(ctx context.Context, in *AddFriendNoteReq, out *AddFriendNoteRes) error {
	return h.DatanodeServiceHandler.AddNoteFriend(ctx, in, out)
}

func (h *datanodeServiceHandler) MoveToNewGroup(ctx context.Context, in *MoveGroupReq, out *MoveGroupRes) error {
	return h.DatanodeServiceHandler.MoveToNewGroup(ctx, in, out)
}

func (h *datanodeServiceHandler) RemoveFriend(ctx context.Context, in *RemoveFriendReq, out *RemoveFriendRes) error {
	return h.DatanodeServiceHandler.RemoveFriend(ctx, in, out)
}

func (h *datanodeServiceHandler) LikesCount(ctx context.Context, in *LikesCountReq, out *LikesCountRes) error {
	return h.DatanodeServiceHandler.LikesCount(ctx, in, out)
}

func (h *datanodeServiceHandler) LikesAdd(ctx context.Context, in *LikesAddReq, out *LikesAddRes) error {
	return h.DatanodeServiceHandler.LikesAdd(ctx, in, out)
}

func (h *datanodeServiceHandler) LikesList(ctx context.Context, in *LikesListReq, out *LikesListRes) error {
	return h.DatanodeServiceHandler.LikesList(ctx, in, out)
}

func (h *datanodeServiceHandler) UpdateNote(ctx context.Context, in *UpdateNoteReq, out *NoteMetaRes) error {
	return h.DatanodeServiceHandler.UpdateNote(ctx, in, out)
}

func (h *datanodeServiceHandler) NoteMetaList(ctx context.Context, in *NoteMetaListReq, out *NoteMetaListRes) error {
	return h.DatanodeServiceHandler.NoteMetaList(ctx, in, out)
}

func (h *datanodeServiceHandler) NoteListCount(ctx context.Context, in *NoteMetaListReq, out *NoteListCountRes) error {
	return h.DatanodeServiceHandler.NoteListCount(ctx, in, out)
}

func (h *datanodeServiceHandler) NoteData(ctx context.Context, in *NoteDataReq, out *NoteDataRes) error {
	return h.DatanodeServiceHandler.NoteData(ctx, in, out)
}

func (h *datanodeServiceHandler) NoteHtml(ctx context.Context, in *NoteHtmlReq, out *NoteHtmlRes) error {
	return h.DatanodeServiceHandler.NoteHtml(ctx, in, out)
}

func (h *datanodeServiceHandler) MomentsCount(ctx context.Context, in *MomentsCountReq, out *MomentsCountRes) error {
	return h.DatanodeServiceHandler.MomentsCount(ctx, in, out)
}

func (h *datanodeServiceHandler) MomentsAdd(ctx context.Context, in *Moments, out *AddMomentsRes) error {
	return h.DatanodeServiceHandler.MomentsAdd(ctx, in, out)
}

func (h *datanodeServiceHandler) MomentsList(ctx context.Context, in *MomentsListReq, out *MomentsListRes) error {
	return h.DatanodeServiceHandler.MomentsList(ctx, in, out)
}

func (h *datanodeServiceHandler) FileDirOne(ctx context.Context, in *FileDirReq, out *FileDirRes) error {
	return h.DatanodeServiceHandler.FileDirOne(ctx, in, out)
}

func (h *datanodeServiceHandler) FileDirAdd(ctx context.Context, in *AddDirReq, out *AddDirRes) error {
	return h.DatanodeServiceHandler.FileDirAdd(ctx, in, out)
}

func (h *datanodeServiceHandler) AddFile(ctx context.Context, in *AddFileReq, out *AddFileRes) error {
	return h.DatanodeServiceHandler.AddFile(ctx, in, out)
}

func (h *datanodeServiceHandler) YunSaveAttr(ctx context.Context, in *FileAttrReq, out *FileAttrRes) error {
	return h.DatanodeServiceHandler.YunSaveAttr(ctx, in, out)
}

func (h *datanodeServiceHandler) Thumbnail(ctx context.Context, in *ThumbnailReq, out *ThumbnailRes) error {
	return h.DatanodeServiceHandler.Thumbnail(ctx, in, out)
}

func (h *datanodeServiceHandler) SetKeyValue(ctx context.Context, in *SetKeyvalueReq, out *SetKeyvalueRes) error {
	return h.DatanodeServiceHandler.SetKeyValue(ctx, in, out)
}

func (h *datanodeServiceHandler) GetKeyValue(ctx context.Context, in *GetKeyvalueReq, out *GetKeyvalueRes) error {
	return h.DatanodeServiceHandler.GetKeyValue(ctx, in, out)
}

func (h *datanodeServiceHandler) DelKeyValue(ctx context.Context, in *DelKeyvalueReq, out *DelKeyvalueRes) error {
	return h.DatanodeServiceHandler.DelKeyValue(ctx, in, out)
}

func (h *datanodeServiceHandler) QuestionVersion(ctx context.Context, in *common.QuestionQuery, out *VersionRes) error {
	return h.DatanodeServiceHandler.QuestionVersion(ctx, in, out)
}

func (h *datanodeServiceHandler) QuestionChapter(ctx context.Context, in *common.QuestionQuery, out *ChapterRes) error {
	return h.DatanodeServiceHandler.QuestionChapter(ctx, in, out)
}

func (h *datanodeServiceHandler) SubjectName(ctx context.Context, in *SubjectNameReq, out *SubjectNameRes) error {
	return h.DatanodeServiceHandler.SubjectName(ctx, in, out)
}

func (h *datanodeServiceHandler) QuestionSource(ctx context.Context, in *common.QuestionQuery, out *SourceRes) error {
	return h.DatanodeServiceHandler.QuestionSource(ctx, in, out)
}

func (h *datanodeServiceHandler) QuestionTixing(ctx context.Context, in *common.QuestionQuery, out *TixingRes) error {
	return h.DatanodeServiceHandler.QuestionTixing(ctx, in, out)
}

func (h *datanodeServiceHandler) QuestionTimuCount(ctx context.Context, in *common.QuestionQuery, out *TimuCountRes) error {
	return h.DatanodeServiceHandler.QuestionTimuCount(ctx, in, out)
}

func (h *datanodeServiceHandler) QuestionTimu(ctx context.Context, in *common.QuestionQuery, out *TimuRes) error {
	return h.DatanodeServiceHandler.QuestionTimu(ctx, in, out)
}

func (h *datanodeServiceHandler) QuestionTimuById(ctx context.Context, in *TimuByIdReq, out *TimuByIdRes) error {
	return h.DatanodeServiceHandler.QuestionTimuById(ctx, in, out)
}

func (h *datanodeServiceHandler) CollectTimu(ctx context.Context, in *CollectReq, out *CollectRes) error {
	return h.DatanodeServiceHandler.CollectTimu(ctx, in, out)
}

func (h *datanodeServiceHandler) QueryCollectTimu(ctx context.Context, in *CollectListReq, out *CollectListRes) error {
	return h.DatanodeServiceHandler.QueryCollectTimu(ctx, in, out)
}

func (h *datanodeServiceHandler) ModifyQuestion(ctx context.Context, in *ModifyReq, out *ModifyRes) error {
	return h.DatanodeServiceHandler.ModifyQuestion(ctx, in, out)
}

func (h *datanodeServiceHandler) ModifyList(ctx context.Context, in *ModifyListReq, out *ModifyListRes) error {
	return h.DatanodeServiceHandler.ModifyList(ctx, in, out)
}

func (h *datanodeServiceHandler) ModifyCount(ctx context.Context, in *ModifyCountReq, out *ModifyCountRes) error {
	return h.DatanodeServiceHandler.ModifyCount(ctx, in, out)
}

func (h *datanodeServiceHandler) QuestionTimuAdd(ctx context.Context, in *TimuAddReq, out *TimuAddRes) error {
	return h.DatanodeServiceHandler.QuestionTimuAdd(ctx, in, out)
}

func (h *datanodeServiceHandler) AddList(ctx context.Context, in *AddListReq, out *AddListRes) error {
	return h.DatanodeServiceHandler.AddList(ctx, in, out)
}

func (h *datanodeServiceHandler) AddCount(ctx context.Context, in *AddCountReq, out *AddCountRes) error {
	return h.DatanodeServiceHandler.AddCount(ctx, in, out)
}

func (h *datanodeServiceHandler) Approve(ctx context.Context, in *ApproveReq, out *ApproveRes) error {
	return h.DatanodeServiceHandler.Approve(ctx, in, out)
}

func (h *datanodeServiceHandler) OnSearch(ctx context.Context, in *SearchReq, out *SearchRes) error {
	return h.DatanodeServiceHandler.OnSearch(ctx, in, out)
}

func (h *datanodeServiceHandler) GradeCateAdd(ctx context.Context, in *common.GradeCate, out *AddGradeCateRes) error {
	return h.DatanodeServiceHandler.GradeCateAdd(ctx, in, out)
}

func (h *datanodeServiceHandler) GradeCateCount(ctx context.Context, in *common.Request, out *GradeCateCountRes) error {
	return h.DatanodeServiceHandler.GradeCateCount(ctx, in, out)
}

func (h *datanodeServiceHandler) GradeCateList(ctx context.Context, in *GradeCateListReq, out *GradeCateListRes) error {
	return h.DatanodeServiceHandler.GradeCateList(ctx, in, out)
}

func (h *datanodeServiceHandler) HomeBlackData(ctx context.Context, in *common.Request, out *HomeBlackDataRes) error {
	return h.DatanodeServiceHandler.HomeBlackData(ctx, in, out)
}

func (h *datanodeServiceHandler) GradeSubject(ctx context.Context, in *GradeSubjectReq, out *GradeSubjectRes) error {
	return h.DatanodeServiceHandler.GradeSubject(ctx, in, out)
}

func (h *datanodeServiceHandler) SchoolRollAdd(ctx context.Context, in *common.SchoolRoll, out *SchoolRollAddRes) error {
	return h.DatanodeServiceHandler.SchoolRollAdd(ctx, in, out)
}

func (h *datanodeServiceHandler) SchoolRollCount(ctx context.Context, in *common.Request, out *SchoolRollCountRes) error {
	return h.DatanodeServiceHandler.SchoolRollCount(ctx, in, out)
}

func (h *datanodeServiceHandler) SchoolList(ctx context.Context, in *SchoolRollListReq, out *SchoolRollListRes) error {
	return h.DatanodeServiceHandler.SchoolList(ctx, in, out)
}

func (h *datanodeServiceHandler) SubjectCateAdd(ctx context.Context, in *common.SubjectCate, out *SubjectCateAddRes) error {
	return h.DatanodeServiceHandler.SubjectCateAdd(ctx, in, out)
}

func (h *datanodeServiceHandler) SubjectCateCount(ctx context.Context, in *common.Request, out *SubjectCateCountRes) error {
	return h.DatanodeServiceHandler.SubjectCateCount(ctx, in, out)
}

func (h *datanodeServiceHandler) SubjectCateList(ctx context.Context, in *SubjectCateListReq, out *SubjectCateListRes) error {
	return h.DatanodeServiceHandler.SubjectCateList(ctx, in, out)
}

func (h *datanodeServiceHandler) SetUserInfo(ctx context.Context, in *SetUserInfoReq, out *SetUserInfoRes) error {
	return h.DatanodeServiceHandler.SetUserInfo(ctx, in, out)
}

func (h *datanodeServiceHandler) GetUserInfo(ctx context.Context, in *GetUserInfoReq, out *GetUserInfoRes) error {
	return h.DatanodeServiceHandler.GetUserInfo(ctx, in, out)
}

func (h *datanodeServiceHandler) SetWechatUinfo(ctx context.Context, in *SetWechatUinfoReq, out *SetWechatUinfoRes) error {
	return h.DatanodeServiceHandler.SetWechatUinfo(ctx, in, out)
}

func (h *datanodeServiceHandler) GetWechatUinfo(ctx context.Context, in *GetWechatUinfoReq, out *GetWechatUinfoRes) error {
	return h.DatanodeServiceHandler.GetWechatUinfo(ctx, in, out)
}

func (h *datanodeServiceHandler) SetAlipayUinfo(ctx context.Context, in *SetAlipayUinfoReq, out *SetAlipayUinfoRes) error {
	return h.DatanodeServiceHandler.SetAlipayUinfo(ctx, in, out)
}

func (h *datanodeServiceHandler) GetAlipayUinfo(ctx context.Context, in *GetAlipayUinfoReq, out *GetAlipayUinfoRes) error {
	return h.DatanodeServiceHandler.GetAlipayUinfo(ctx, in, out)
}

func (h *datanodeServiceHandler) SetBaiduEntity(ctx context.Context, in *SetBaiduEntityReq, out *SetBaiduEntityRes) error {
	return h.DatanodeServiceHandler.SetBaiduEntity(ctx, in, out)
}

func (h *datanodeServiceHandler) BaiduEntity(ctx context.Context, in *BaiduEntityReq, out *BaiduEntityRes) error {
	return h.DatanodeServiceHandler.BaiduEntity(ctx, in, out)
}

func (h *datanodeServiceHandler) SearchHistory(ctx context.Context, in *SearchHistoryReq, out *SearchHistoryRes) error {
	return h.DatanodeServiceHandler.SearchHistory(ctx, in, out)
}

func (h *datanodeServiceHandler) SearchItem(ctx context.Context, in *SearchItemReq, out *SearchItemRes) error {
	return h.DatanodeServiceHandler.SearchItem(ctx, in, out)
}

func (h *datanodeServiceHandler) RefreshModifyReward(ctx context.Context, in *RefreshModifyRewardReq, out *RefreshModifyRewardRes) error {
	return h.DatanodeServiceHandler.RefreshModifyReward(ctx, in, out)
}

func (h *datanodeServiceHandler) RefreshAddReward(ctx context.Context, in *RefreshAddRewardReq, out *RefreshAddRewardRes) error {
	return h.DatanodeServiceHandler.RefreshAddReward(ctx, in, out)
}

func (h *datanodeServiceHandler) RefreshUserCoin(ctx context.Context, in *RefreshUserCoinReq, out *RefreshUserCoinRes) error {
	return h.DatanodeServiceHandler.RefreshUserCoin(ctx, in, out)
}

func (h *datanodeServiceHandler) TixingByVid(ctx context.Context, in *TixingByVidReq, out *TixingByVidRes) error {
	return h.DatanodeServiceHandler.TixingByVid(ctx, in, out)
}

func (h *datanodeServiceHandler) SourceByVid(ctx context.Context, in *SourceByVidReq, out *SourceByVidRes) error {
	return h.DatanodeServiceHandler.SourceByVid(ctx, in, out)
}

func (h *datanodeServiceHandler) IdentAdd(ctx context.Context, in *IdentAddReq, out *IdentAddRes) error {
	return h.DatanodeServiceHandler.IdentAdd(ctx, in, out)
}

func (h *datanodeServiceHandler) IdentByIid(ctx context.Context, in *IdentByIidReq, out *IdentByIidRes) error {
	return h.DatanodeServiceHandler.IdentByIid(ctx, in, out)
}

func (h *datanodeServiceHandler) IdentList(ctx context.Context, in *IdentListReq, out *IdentListRes) error {
	return h.DatanodeServiceHandler.IdentList(ctx, in, out)
}

func (h *datanodeServiceHandler) IdentCount(ctx context.Context, in *IdentCountReq, out *IdentCountRes) error {
	return h.DatanodeServiceHandler.IdentCount(ctx, in, out)
}

func (h *datanodeServiceHandler) RefreshIdentReward(ctx context.Context, in *RefreshIdentRewardReq, out *RefreshIdentRewardRes) error {
	return h.DatanodeServiceHandler.RefreshIdentReward(ctx, in, out)
}

func (h *datanodeServiceHandler) UpdateTeacher(ctx context.Context, in *UpdateTeacherReq, out *UpdateTeacherRes) error {
	return h.DatanodeServiceHandler.UpdateTeacher(ctx, in, out)
}

func (h *datanodeServiceHandler) GetTeacher(ctx context.Context, in *FindTeacherReq, out *FindTeacherRes) error {
	return h.DatanodeServiceHandler.GetTeacher(ctx, in, out)
}

func (h *datanodeServiceHandler) FocusTeacher(ctx context.Context, in *FocusTeacherReq, out *FocusTeacherRes) error {
	return h.DatanodeServiceHandler.FocusTeacher(ctx, in, out)
}

func (h *datanodeServiceHandler) NoteCooper(ctx context.Context, in *NoteCooperReq, out *NoteCooperRes) error {
	return h.DatanodeServiceHandler.NoteCooper(ctx, in, out)
}

func (h *datanodeServiceHandler) NoteTag(ctx context.Context, in *NoteTagReq, out *NoteTagRes) error {
	return h.DatanodeServiceHandler.NoteTag(ctx, in, out)
}

func (h *datanodeServiceHandler) NoteBgcolor(ctx context.Context, in *NoteBgcolorReq, out *NoteBgcolorRes) error {
	return h.DatanodeServiceHandler.NoteBgcolor(ctx, in, out)
}

func (h *datanodeServiceHandler) NoteTagAdd(ctx context.Context, in *NoteTagAddReq, out *NoteTagAddRes) error {
	return h.DatanodeServiceHandler.NoteTagAdd(ctx, in, out)
}

func (h *datanodeServiceHandler) NoteTagList(ctx context.Context, in *NoteTagListReq, out *NoteTagListRes) error {
	return h.DatanodeServiceHandler.NoteTagList(ctx, in, out)
}

func (h *datanodeServiceHandler) SubmitCert(ctx context.Context, in *SubmitCertReq, out *SubmitCertRes) error {
	return h.DatanodeServiceHandler.SubmitCert(ctx, in, out)
}

func (h *datanodeServiceHandler) CertStatus(ctx context.Context, in *CertStatusReq, out *CertStatusRes) error {
	return h.DatanodeServiceHandler.CertStatus(ctx, in, out)
}

func (h *datanodeServiceHandler) CertInfo(ctx context.Context, in *CertInfoReq, out *CertInfoRes) error {
	return h.DatanodeServiceHandler.CertInfo(ctx, in, out)
}

func (h *datanodeServiceHandler) CertFlow(ctx context.Context, in *CertFlowReq, out *CertFlowRes) error {
	return h.DatanodeServiceHandler.CertFlow(ctx, in, out)
}

func (h *datanodeServiceHandler) AddUserLog(ctx context.Context, in *AddUserLogReq, out *AddUserLogRes) error {
	return h.DatanodeServiceHandler.AddUserLog(ctx, in, out)
}

func (h *datanodeServiceHandler) QueryUserLog(ctx context.Context, in *QueryUserLogReq, out *QueryUserLogRes) error {
	return h.DatanodeServiceHandler.QueryUserLog(ctx, in, out)
}

func (h *datanodeServiceHandler) UserLogCount(ctx context.Context, in *UserLogCountReq, out *UserLogCountRes) error {
	return h.DatanodeServiceHandler.UserLogCount(ctx, in, out)
}

func (h *datanodeServiceHandler) AddTask(ctx context.Context, in *AddTaskReq, out *AddTaskRes) error {
	return h.DatanodeServiceHandler.AddTask(ctx, in, out)
}

func (h *datanodeServiceHandler) GetTask(ctx context.Context, in *GetTaskReq, out *GetTaskRes) error {
	return h.DatanodeServiceHandler.GetTask(ctx, in, out)
}

func (h *datanodeServiceHandler) GetTaskCount(ctx context.Context, in *GetTaskCountReq, out *GetTaskCountRes) error {
	return h.DatanodeServiceHandler.GetTaskCount(ctx, in, out)
}

func (h *datanodeServiceHandler) AddPkg(ctx context.Context, in *AddPkgReq, out *AddPkgRes) error {
	return h.DatanodeServiceHandler.AddPkg(ctx, in, out)
}

func (h *datanodeServiceHandler) DelPkg(ctx context.Context, in *DelPkgReq, out *DelPkgRes) error {
	return h.DatanodeServiceHandler.DelPkg(ctx, in, out)
}

func (h *datanodeServiceHandler) PkgLists(ctx context.Context, in *PkgListReq, out *PkgListRes) error {
	return h.DatanodeServiceHandler.PkgLists(ctx, in, out)
}

func (h *datanodeServiceHandler) PkgCount(ctx context.Context, in *PkgCountReq, out *PkgCountRes) error {
	return h.DatanodeServiceHandler.PkgCount(ctx, in, out)
}

func (h *datanodeServiceHandler) SponsorAdd(ctx context.Context, in *SponsorAddReq, out *SponsorAddRes) error {
	return h.DatanodeServiceHandler.SponsorAdd(ctx, in, out)
}

func (h *datanodeServiceHandler) SponsorList(ctx context.Context, in *SponsorListReq, out *SponsorListRes) error {
	return h.DatanodeServiceHandler.SponsorList(ctx, in, out)
}

func (h *datanodeServiceHandler) VipLimit(ctx context.Context, in *VipLimitReq, out *VipLimitRes) error {
	return h.DatanodeServiceHandler.VipLimit(ctx, in, out)
}

func (h *datanodeServiceHandler) VipProduct(ctx context.Context, in *VipProductReq, out *VipProductRes) error {
	return h.DatanodeServiceHandler.VipProduct(ctx, in, out)
}

func (h *datanodeServiceHandler) VipDesc(ctx context.Context, in *VipDescReq, out *VipDescRes) error {
	return h.DatanodeServiceHandler.VipDesc(ctx, in, out)
}

func (h *datanodeServiceHandler) VipPay(ctx context.Context, in *VipPayReq, out *VipPayRes) error {
	return h.DatanodeServiceHandler.VipPay(ctx, in, out)
}

func (h *datanodeServiceHandler) VipOrderStatus(ctx context.Context, in *VipOrderStatusReq, out *VipOrderStatusRes) error {
	return h.DatanodeServiceHandler.VipOrderStatus(ctx, in, out)
}

func (h *datanodeServiceHandler) VipOrderList(ctx context.Context, in *VipOrderListReq, out *VipOrderListRes) error {
	return h.DatanodeServiceHandler.VipOrderList(ctx, in, out)
}

func (h *datanodeServiceHandler) UserScore(ctx context.Context, in *UserScoreReq, out *UserScoreRes) error {
	return h.DatanodeServiceHandler.UserScore(ctx, in, out)
}

func (h *datanodeServiceHandler) UserVip(ctx context.Context, in *UserVipReq, out *UserVipRes) error {
	return h.DatanodeServiceHandler.UserVip(ctx, in, out)
}

func (h *datanodeServiceHandler) FootLog(ctx context.Context, in *FootLogReq, out *FootLogRes) error {
	return h.DatanodeServiceHandler.FootLog(ctx, in, out)
}

func (h *datanodeServiceHandler) AddExam(ctx context.Context, in *AddExamReq, out *AddExamRes) error {
	return h.DatanodeServiceHandler.AddExam(ctx, in, out)
}

func (h *datanodeServiceHandler) ExamLists(ctx context.Context, in *ExamListReq, out *ExamListRes) error {
	return h.DatanodeServiceHandler.ExamLists(ctx, in, out)
}

func (h *datanodeServiceHandler) ExamCount(ctx context.Context, in *ExamCountReq, out *ExamCountRes) error {
	return h.DatanodeServiceHandler.ExamCount(ctx, in, out)
}
