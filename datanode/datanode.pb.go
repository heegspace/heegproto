// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: datanode.proto

package datanode

import (
	common "github.com/heegspace/heegproto/common"
	rescode "github.com/heegspace/heegproto/rescode"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Phone   string  `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Email   string  `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Account string  `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	PassWd  string  `protobuf:"bytes,5,opt,name=pass_wd,json=passWd,proto3" json:"pass_wd,omitempty"`
	Status  int32   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Role    int64   `protobuf:"varint,7,opt,name=role,proto3" json:"role,omitempty"`
	Vip     int64   `protobuf:"varint,8,opt,name=vip,proto3" json:"vip,omitempty"`
	Coin    float64 `protobuf:"fixed64,9,opt,name=coin,proto3" json:"coin,omitempty"`
	RegIp   int64   `protobuf:"varint,10,opt,name=reg_ip,json=regIp,proto3" json:"reg_ip,omitempty"`
	RegAt   string  `protobuf:"bytes,11,opt,name=reg_at,json=regAt,proto3" json:"reg_at,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *User) GetPassWd() string {
	if x != nil {
		return x.PassWd
	}
	return ""
}

func (x *User) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *User) GetRole() int64 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *User) GetVip() int64 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *User) GetCoin() float64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *User) GetRegIp() int64 {
	if x != nil {
		return x.RegIp
	}
	return 0
}

func (x *User) GetRegAt() string {
	if x != nil {
		return x.RegAt
	}
	return ""
}

type UserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserInfoReq) Reset() {
	*x = UserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoReq) ProtoMessage() {}

func (x *UserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoReq.ProtoReflect.Descriptor instead.
func (*UserInfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{1}
}

func (x *UserInfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserInfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NewUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account   string            `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	PassWd    string            `protobuf:"bytes,2,opt,name=pass_wd,json=passWd,proto3" json:"pass_wd,omitempty"`
	Role      int32             `protobuf:"varint,3,opt,name=role,proto3" json:"role,omitempty"`
	Invitor   string            `protobuf:"bytes,4,opt,name=invitor,proto3" json:"invitor,omitempty"`
	Source    string            `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Contactor string            `protobuf:"bytes,6,opt,name=contactor,proto3" json:"contactor,omitempty"`
	Email     string            `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	RegIp     int64             `protobuf:"varint,8,opt,name=reg_ip,json=regIp,proto3" json:"reg_ip,omitempty"`
	Status    int64             `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	Extra     map[string]string `protobuf:"bytes,10,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NewUserReq) Reset() {
	*x = NewUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserReq) ProtoMessage() {}

func (x *NewUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserReq.ProtoReflect.Descriptor instead.
func (*NewUserReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{2}
}

func (x *NewUserReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *NewUserReq) GetPassWd() string {
	if x != nil {
		return x.PassWd
	}
	return ""
}

func (x *NewUserReq) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *NewUserReq) GetInvitor() string {
	if x != nil {
		return x.Invitor
	}
	return ""
}

func (x *NewUserReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NewUserReq) GetContactor() string {
	if x != nil {
		return x.Contactor
	}
	return ""
}

func (x *NewUserReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NewUserReq) GetRegIp() int64 {
	if x != nil {
		return x.RegIp
	}
	return 0
}

func (x *NewUserReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NewUserReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SearchUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids    []int64           `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty"`
	Account string            `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Phone   string            `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Email   string            `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Extra   map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchUserReq) Reset() {
	*x = SearchUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserReq) ProtoMessage() {}

func (x *SearchUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserReq.ProtoReflect.Descriptor instead.
func (*SearchUserReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{3}
}

func (x *SearchUserReq) GetUids() []int64 {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *SearchUserReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SearchUserReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SearchUserReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SearchUserReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SearchUserRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User           `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchUserRes) Reset() {
	*x = SearchUserRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserRes) ProtoMessage() {}

func (x *SearchUserRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserRes.ProtoReflect.Descriptor instead.
func (*SearchUserRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{4}
}

func (x *SearchUserRes) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *SearchUserRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	User    *User             `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserRes) Reset() {
	*x = UserRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRes) ProtoMessage() {}

func (x *UserRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRes.ProtoReflect.Descriptor instead.
func (*UserRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{5}
}

func (x *UserRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *UserRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UserRes) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Phone string            `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddFriendReq) Reset() {
	*x = AddFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendReq) ProtoMessage() {}

func (x *AddFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendReq.ProtoReflect.Descriptor instead.
func (*AddFriendReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{6}
}

func (x *AddFriendReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddFriendReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *AddFriendReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddFriendRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddFriendRes) Reset() {
	*x = AddFriendRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendRes) ProtoMessage() {}

func (x *AddFriendRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendRes.ProtoReflect.Descriptor instead.
func (*AddFriendRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{7}
}

func (x *AddFriendRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddFriendRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddFriendRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AgreeFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid1  int64             `protobuf:"varint,1,opt,name=uid1,proto3" json:"uid1,omitempty"`
	Uid2  int64             `protobuf:"varint,2,opt,name=uid2,proto3" json:"uid2,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AgreeFriendReq) Reset() {
	*x = AgreeFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgreeFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgreeFriendReq) ProtoMessage() {}

func (x *AgreeFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgreeFriendReq.ProtoReflect.Descriptor instead.
func (*AgreeFriendReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{8}
}

func (x *AgreeFriendReq) GetUid1() int64 {
	if x != nil {
		return x.Uid1
	}
	return 0
}

func (x *AgreeFriendReq) GetUid2() int64 {
	if x != nil {
		return x.Uid2
	}
	return 0
}

func (x *AgreeFriendReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FriendsListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid1  int64             `protobuf:"varint,1,opt,name=uid1,proto3" json:"uid1,omitempty"`
	Uid2  int64             `protobuf:"varint,2,opt,name=uid2,proto3" json:"uid2,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FriendsListReq) Reset() {
	*x = FriendsListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendsListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendsListReq) ProtoMessage() {}

func (x *FriendsListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendsListReq.ProtoReflect.Descriptor instead.
func (*FriendsListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{9}
}

func (x *FriendsListReq) GetUid1() int64 {
	if x != nil {
		return x.Uid1
	}
	return 0
}

func (x *FriendsListReq) GetUid2() int64 {
	if x != nil {
		return x.Uid2
	}
	return 0
}

func (x *FriendsListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AgreeFriendRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AgreeFriendRes) Reset() {
	*x = AgreeFriendRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgreeFriendRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgreeFriendRes) ProtoMessage() {}

func (x *AgreeFriendRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgreeFriendRes.ProtoReflect.Descriptor instead.
func (*AgreeFriendRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{10}
}

func (x *AgreeFriendRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AgreeFriendRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AgreeFriendRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FriendItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Note     string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	Account  string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	NickName string `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Avatar   string `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Brithday string `protobuf:"bytes,6,opt,name=brithday,proto3" json:"brithday,omitempty"`
	JoinAt   int64  `protobuf:"varint,7,opt,name=join_at,json=joinAt,proto3" json:"join_at,omitempty"`
}

func (x *FriendItem) Reset() {
	*x = FriendItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendItem) ProtoMessage() {}

func (x *FriendItem) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendItem.ProtoReflect.Descriptor instead.
func (*FriendItem) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{11}
}

func (x *FriendItem) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FriendItem) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *FriendItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *FriendItem) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *FriendItem) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *FriendItem) GetBrithday() string {
	if x != nil {
		return x.Brithday
	}
	return ""
}

func (x *FriendItem) GetJoinAt() int64 {
	if x != nil {
		return x.JoinAt
	}
	return 0
}

type Fgroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort  int64         `protobuf:"varint,1,opt,name=sort,proto3" json:"sort,omitempty"`
	Name  string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Lists []*FriendItem `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
}

func (x *Fgroup) Reset() {
	*x = Fgroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fgroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fgroup) ProtoMessage() {}

func (x *Fgroup) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fgroup.ProtoReflect.Descriptor instead.
func (*Fgroup) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{12}
}

func (x *Fgroup) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Fgroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fgroup) GetLists() []*FriendItem {
	if x != nil {
		return x.Lists
	}
	return nil
}

type Friend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data   []*Fgroup     `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Invite []*FriendItem `protobuf:"bytes,3,rep,name=invite,proto3" json:"invite,omitempty"`
	Blacks []*FriendItem `protobuf:"bytes,4,rep,name=blacks,proto3" json:"blacks,omitempty"`
}

func (x *Friend) Reset() {
	*x = Friend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Friend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Friend) ProtoMessage() {}

func (x *Friend) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Friend.ProtoReflect.Descriptor instead.
func (*Friend) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{13}
}

func (x *Friend) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Friend) GetData() []*Fgroup {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Friend) GetInvite() []*FriendItem {
	if x != nil {
		return x.Invite
	}
	return nil
}

func (x *Friend) GetBlacks() []*FriendItem {
	if x != nil {
		return x.Blacks
	}
	return nil
}

type FriendRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Friends *Friend           `protobuf:"bytes,3,opt,name=friends,proto3" json:"friends,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FriendRes) Reset() {
	*x = FriendRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendRes) ProtoMessage() {}

func (x *FriendRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendRes.ProtoReflect.Descriptor instead.
func (*FriendRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{14}
}

func (x *FriendRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *FriendRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *FriendRes) GetFriends() *Friend {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *FriendRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CreateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name  string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateGroupReq) Reset() {
	*x = CreateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReq) ProtoMessage() {}

func (x *CreateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReq.ProtoReflect.Descriptor instead.
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{15}
}

func (x *CreateGroupReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CreateGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGroupReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CreateGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateGroupRes) Reset() {
	*x = CreateGroupRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRes) ProtoMessage() {}

func (x *CreateGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRes.ProtoReflect.Descriptor instead.
func (*CreateGroupRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{16}
}

func (x *CreateGroupRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CreateGroupRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CreateGroupRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RenameGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	OldName string            `protobuf:"bytes,2,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	NewName string            `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RenameGroupReq) Reset() {
	*x = RenameGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameGroupReq) ProtoMessage() {}

func (x *RenameGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameGroupReq.ProtoReflect.Descriptor instead.
func (*RenameGroupReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{17}
}

func (x *RenameGroupReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *RenameGroupReq) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *RenameGroupReq) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *RenameGroupReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RenameGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RenameGroupRes) Reset() {
	*x = RenameGroupRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameGroupRes) ProtoMessage() {}

func (x *RenameGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameGroupRes.ProtoReflect.Descriptor instead.
func (*RenameGroupRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{18}
}

func (x *RenameGroupRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *RenameGroupRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *RenameGroupRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddFriendNoteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid1  int64             `protobuf:"varint,1,opt,name=uid1,proto3" json:"uid1,omitempty"`
	Uid2  int64             `protobuf:"varint,2,opt,name=uid2,proto3" json:"uid2,omitempty"`
	Note  string            `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddFriendNoteReq) Reset() {
	*x = AddFriendNoteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendNoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendNoteReq) ProtoMessage() {}

func (x *AddFriendNoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendNoteReq.ProtoReflect.Descriptor instead.
func (*AddFriendNoteReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{19}
}

func (x *AddFriendNoteReq) GetUid1() int64 {
	if x != nil {
		return x.Uid1
	}
	return 0
}

func (x *AddFriendNoteReq) GetUid2() int64 {
	if x != nil {
		return x.Uid2
	}
	return 0
}

func (x *AddFriendNoteReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *AddFriendNoteReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddFriendNoteRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddFriendNoteRes) Reset() {
	*x = AddFriendNoteRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFriendNoteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendNoteRes) ProtoMessage() {}

func (x *AddFriendNoteRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendNoteRes.ProtoReflect.Descriptor instead.
func (*AddFriendNoteRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{20}
}

func (x *AddFriendNoteRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddFriendNoteRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddFriendNoteRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MoveGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid1  int64             `protobuf:"varint,1,opt,name=uid1,proto3" json:"uid1,omitempty"`
	Uid2  int64             `protobuf:"varint,2,opt,name=uid2,proto3" json:"uid2,omitempty"`
	Group string            `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MoveGroupReq) Reset() {
	*x = MoveGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveGroupReq) ProtoMessage() {}

func (x *MoveGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveGroupReq.ProtoReflect.Descriptor instead.
func (*MoveGroupReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{21}
}

func (x *MoveGroupReq) GetUid1() int64 {
	if x != nil {
		return x.Uid1
	}
	return 0
}

func (x *MoveGroupReq) GetUid2() int64 {
	if x != nil {
		return x.Uid2
	}
	return 0
}

func (x *MoveGroupReq) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *MoveGroupReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MoveGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MoveGroupRes) Reset() {
	*x = MoveGroupRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveGroupRes) ProtoMessage() {}

func (x *MoveGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveGroupRes.ProtoReflect.Descriptor instead.
func (*MoveGroupRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{22}
}

func (x *MoveGroupRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *MoveGroupRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *MoveGroupRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RemoveFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid1  int64             `protobuf:"varint,1,opt,name=uid1,proto3" json:"uid1,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RemoveFriendReq) Reset() {
	*x = RemoveFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFriendReq) ProtoMessage() {}

func (x *RemoveFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFriendReq.ProtoReflect.Descriptor instead.
func (*RemoveFriendReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{23}
}

func (x *RemoveFriendReq) GetUid1() int64 {
	if x != nil {
		return x.Uid1
	}
	return 0
}

func (x *RemoveFriendReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *RemoveFriendReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LikesCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid   string            `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LikesCountReq) Reset() {
	*x = LikesCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikesCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikesCountReq) ProtoMessage() {}

func (x *LikesCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikesCountReq.ProtoReflect.Descriptor instead.
func (*LikesCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{24}
}

func (x *LikesCountReq) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *LikesCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LikesAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid   string            `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LikesAddReq) Reset() {
	*x = LikesAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikesAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikesAddReq) ProtoMessage() {}

func (x *LikesAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikesAddReq.ProtoReflect.Descriptor instead.
func (*LikesAddReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{25}
}

func (x *LikesAddReq) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *LikesAddReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LikesAddReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LikesListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid   string            `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Page  int32             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LikesListReq) Reset() {
	*x = LikesListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikesListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikesListReq) ProtoMessage() {}

func (x *LikesListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikesListReq.ProtoReflect.Descriptor instead.
func (*LikesListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{26}
}

func (x *LikesListReq) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *LikesListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LikesListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *LikesListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RemoveFriendRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RemoveFriendRes) Reset() {
	*x = RemoveFriendRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFriendRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFriendRes) ProtoMessage() {}

func (x *RemoveFriendRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFriendRes.ProtoReflect.Descriptor instead.
func (*RemoveFriendRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{27}
}

func (x *RemoveFriendRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *RemoveFriendRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *RemoveFriendRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LikesCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Count   int32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Resmsg  string            `protobuf:"bytes,3,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LikesCountRes) Reset() {
	*x = LikesCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikesCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikesCountRes) ProtoMessage() {}

func (x *LikesCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikesCountRes.ProtoReflect.Descriptor instead.
func (*LikesCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{28}
}

func (x *LikesCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *LikesCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *LikesCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *LikesCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LikesAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LikesAddRes) Reset() {
	*x = LikesAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikesAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikesAddRes) ProtoMessage() {}

func (x *LikesAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikesAddRes.ProtoReflect.Descriptor instead.
func (*LikesAddRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{29}
}

func (x *LikesAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *LikesAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *LikesAddRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type Likes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CreateAt int64 `protobuf:"varint,2,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (x *Likes) Reset() {
	*x = Likes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Likes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Likes) ProtoMessage() {}

func (x *Likes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Likes.ProtoReflect.Descriptor instead.
func (*Likes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{30}
}

func (x *Likes) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Likes) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

type LikesListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Data    []*Likes          `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LikesListRes) Reset() {
	*x = LikesListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikesListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikesListRes) ProtoMessage() {}

func (x *LikesListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikesListRes.ProtoReflect.Descriptor instead.
func (*LikesListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{31}
}

func (x *LikesListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *LikesListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *LikesListRes) GetData() []*Likes {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LikesListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UpdateNoteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid   int64             `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Uid      int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Data     string            `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Html     string            `protobuf:"bytes,4,opt,name=html,proto3" json:"html,omitempty"`
	Tag      []string          `protobuf:"bytes,5,rep,name=tag,proto3" json:"tag,omitempty"`
	Bgcolor  string            `protobuf:"bytes,6,opt,name=bgcolor,proto3" json:"bgcolor,omitempty"`
	NoteType int64             `protobuf:"varint,7,opt,name=note_type,json=noteType,proto3" json:"note_type,omitempty"`
	Extra    map[string]string `protobuf:"bytes,8,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateNoteReq) Reset() {
	*x = UpdateNoteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNoteReq) ProtoMessage() {}

func (x *UpdateNoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNoteReq.ProtoReflect.Descriptor instead.
func (*UpdateNoteReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateNoteReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *UpdateNoteReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UpdateNoteReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *UpdateNoteReq) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

func (x *UpdateNoteReq) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *UpdateNoteReq) GetBgcolor() string {
	if x != nil {
		return x.Bgcolor
	}
	return ""
}

func (x *UpdateNoteReq) GetNoteType() int64 {
	if x != nil {
		return x.NoteType
	}
	return 0
}

func (x *UpdateNoteReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteMetaRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Meta    *common.NoteMeta  `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteMetaRes) Reset() {
	*x = NoteMetaRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteMetaRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteMetaRes) ProtoMessage() {}

func (x *NoteMetaRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteMetaRes.ProtoReflect.Descriptor instead.
func (*NoteMetaRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{33}
}

func (x *NoteMetaRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteMetaRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteMetaRes) GetMeta() *common.NoteMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *NoteMetaRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteMetaListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Userid   int64             `protobuf:"varint,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Tag      string            `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Status   int64             `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Page     int32             `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Size     int32             `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	NoteType int64             `protobuf:"varint,7,opt,name=note_type,json=noteType,proto3" json:"note_type,omitempty"`
	Extra    map[string]string `protobuf:"bytes,8,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteMetaListReq) Reset() {
	*x = NoteMetaListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteMetaListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteMetaListReq) ProtoMessage() {}

func (x *NoteMetaListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteMetaListReq.ProtoReflect.Descriptor instead.
func (*NoteMetaListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{34}
}

func (x *NoteMetaListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *NoteMetaListReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *NoteMetaListReq) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *NoteMetaListReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NoteMetaListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *NoteMetaListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *NoteMetaListReq) GetNoteType() int64 {
	if x != nil {
		return x.NoteType
	}
	return 0
}

func (x *NoteMetaListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteMetaListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Meta    []*common.NoteMeta `protobuf:"bytes,3,rep,name=meta,proto3" json:"meta,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteMetaListRes) Reset() {
	*x = NoteMetaListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteMetaListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteMetaListRes) ProtoMessage() {}

func (x *NoteMetaListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteMetaListRes.ProtoReflect.Descriptor instead.
func (*NoteMetaListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{35}
}

func (x *NoteMetaListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteMetaListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteMetaListRes) GetMeta() []*common.NoteMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *NoteMetaListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nid   int64             `protobuf:"varint,2,opt,name=nid,proto3" json:"nid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteDataReq) Reset() {
	*x = NoteDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteDataReq) ProtoMessage() {}

func (x *NoteDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteDataReq.ProtoReflect.Descriptor instead.
func (*NoteDataReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{36}
}

func (x *NoteDataReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *NoteDataReq) GetNid() int64 {
	if x != nil {
		return x.Nid
	}
	return 0
}

func (x *NoteDataReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteHtmlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nid   int64             `protobuf:"varint,2,opt,name=nid,proto3" json:"nid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteHtmlReq) Reset() {
	*x = NoteHtmlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteHtmlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteHtmlReq) ProtoMessage() {}

func (x *NoteHtmlReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteHtmlReq.ProtoReflect.Descriptor instead.
func (*NoteHtmlReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{37}
}

func (x *NoteHtmlReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *NoteHtmlReq) GetNid() int64 {
	if x != nil {
		return x.Nid
	}
	return 0
}

func (x *NoteHtmlReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteListCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteListCountRes) Reset() {
	*x = NoteListCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteListCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteListCountRes) ProtoMessage() {}

func (x *NoteListCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteListCountRes.ProtoReflect.Descriptor instead.
func (*NoteListCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{38}
}

func (x *NoteListCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteListCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteListCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *NoteListCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Data    string            `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteDataRes) Reset() {
	*x = NoteDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteDataRes) ProtoMessage() {}

func (x *NoteDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteDataRes.ProtoReflect.Descriptor instead.
func (*NoteDataRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{39}
}

func (x *NoteDataRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteDataRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteDataRes) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *NoteDataRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteHtmlRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Data    string            `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteHtmlRes) Reset() {
	*x = NoteHtmlRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteHtmlRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteHtmlRes) ProtoMessage() {}

func (x *NoteHtmlRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteHtmlRes.ProtoReflect.Descriptor instead.
func (*NoteHtmlRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{40}
}

func (x *NoteHtmlRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteHtmlRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteHtmlRes) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *NoteHtmlRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MomentsCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MomentsCountReq) Reset() {
	*x = MomentsCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentsCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentsCountReq) ProtoMessage() {}

func (x *MomentsCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentsCountReq.ProtoReflect.Descriptor instead.
func (*MomentsCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{41}
}

func (x *MomentsCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MomentsCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MomentsCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MomentsCountRes) Reset() {
	*x = MomentsCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentsCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentsCountRes) ProtoMessage() {}

func (x *MomentsCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentsCountRes.ProtoReflect.Descriptor instead.
func (*MomentsCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{42}
}

func (x *MomentsCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *MomentsCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *MomentsCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MomentsCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type Extra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Extra) Reset() {
	*x = Extra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extra) ProtoMessage() {}

func (x *Extra) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extra.ProtoReflect.Descriptor instead.
func (*Extra) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{43}
}

func (x *Extra) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Extra) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type Moments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Id       int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Mid      string   `protobuf:"bytes,3,opt,name=mid,proto3" json:"mid,omitempty"`
	Text     string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Extra    []*Extra `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty"`
	CreateAt int32    `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (x *Moments) Reset() {
	*x = Moments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Moments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Moments) ProtoMessage() {}

func (x *Moments) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Moments.ProtoReflect.Descriptor instead.
func (*Moments) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{44}
}

func (x *Moments) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Moments) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Moments) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *Moments) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Moments) GetExtra() []*Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Moments) GetCreateAt() int32 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

type AddMomentsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
}

func (x *AddMomentsRes) Reset() {
	*x = AddMomentsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMomentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMomentsRes) ProtoMessage() {}

func (x *AddMomentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMomentsRes.ProtoReflect.Descriptor instead.
func (*AddMomentsRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{45}
}

func (x *AddMomentsRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddMomentsRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

type MomentsListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Page  int32             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MomentsListReq) Reset() {
	*x = MomentsListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentsListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentsListReq) ProtoMessage() {}

func (x *MomentsListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentsListReq.ProtoReflect.Descriptor instead.
func (*MomentsListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{46}
}

func (x *MomentsListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MomentsListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *MomentsListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MomentsListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MomentsListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Data    []*Moments   `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MomentsListRes) Reset() {
	*x = MomentsListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentsListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentsListRes) ProtoMessage() {}

func (x *MomentsListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentsListRes.ProtoReflect.Descriptor instead.
func (*MomentsListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{47}
}

func (x *MomentsListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *MomentsListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *MomentsListRes) GetData() []*Moments {
	if x != nil {
		return x.Data
	}
	return nil
}

type FileItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Size     int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Url      string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	CreateAt int64  `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	UpdateAt int64  `protobuf:"varint,7,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	Extra    string `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *FileItem) Reset() {
	*x = FileItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileItem) ProtoMessage() {}

func (x *FileItem) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileItem.ProtoReflect.Descriptor instead.
func (*FileItem) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{48}
}

func (x *FileItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FileItem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileItem) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileItem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileItem) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *FileItem) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *FileItem) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type FileDirReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Path  string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileDirReq) Reset() {
	*x = FileDirReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDirReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDirReq) ProtoMessage() {}

func (x *FileDirReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDirReq.ProtoReflect.Descriptor instead.
func (*FileDirReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{49}
}

func (x *FileDirReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FileDirReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileDirReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FileDirRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Dirs    []*FileItem  `protobuf:"bytes,3,rep,name=dirs,proto3" json:"dirs,omitempty"`
}

func (x *FileDirRes) Reset() {
	*x = FileDirRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDirRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDirRes) ProtoMessage() {}

func (x *FileDirRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDirRes.ProtoReflect.Descriptor instead.
func (*FileDirRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{50}
}

func (x *FileDirRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *FileDirRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *FileDirRes) GetDirs() []*FileItem {
	if x != nil {
		return x.Dirs
	}
	return nil
}

type AddDirReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AddDirReq) Reset() {
	*x = AddDirReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDirReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDirReq) ProtoMessage() {}

func (x *AddDirReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDirReq.ProtoReflect.Descriptor instead.
func (*AddDirReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{51}
}

func (x *AddDirReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddDirReq) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *AddDirReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AddDirRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
}

func (x *AddDirRes) Reset() {
	*x = AddDirRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDirRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDirRes) ProtoMessage() {}

func (x *AddDirRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDirRes.ProtoReflect.Descriptor instead.
func (*AddDirRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{52}
}

func (x *AddDirRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddDirRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

type AddFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Size        int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Path        string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Url         string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Thumb       string `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`
	ContentType string `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
}

func (x *AddFileReq) Reset() {
	*x = AddFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFileReq) ProtoMessage() {}

func (x *AddFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFileReq.ProtoReflect.Descriptor instead.
func (*AddFileReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{53}
}

func (x *AddFileReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddFileReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AddFileReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AddFileReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddFileReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddFileReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *AddFileReq) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type AddFileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
}

func (x *AddFileRes) Reset() {
	*x = AddFileRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFileRes) ProtoMessage() {}

func (x *AddFileRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFileRes.ProtoReflect.Descriptor instead.
func (*AddFileRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{54}
}

func (x *AddFileRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddFileRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

type FileAttrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileAttrReq) Reset() {
	*x = FileAttrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileAttrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileAttrReq) ProtoMessage() {}

func (x *FileAttrReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileAttrReq.ProtoReflect.Descriptor instead.
func (*FileAttrReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{55}
}

func (x *FileAttrReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FileAttrReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FileAttrRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode  rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg   string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Capacity int64        `protobuf:"varint,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Number   int32        `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *FileAttrRes) Reset() {
	*x = FileAttrRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileAttrRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileAttrRes) ProtoMessage() {}

func (x *FileAttrRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileAttrRes.ProtoReflect.Descriptor instead.
func (*FileAttrRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{56}
}

func (x *FileAttrRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *FileAttrRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *FileAttrRes) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *FileAttrRes) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type ThumbnailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Path  string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ThumbnailReq) Reset() {
	*x = ThumbnailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailReq) ProtoMessage() {}

func (x *ThumbnailReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailReq.ProtoReflect.Descriptor instead.
func (*ThumbnailReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{57}
}

func (x *ThumbnailReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ThumbnailReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ThumbnailReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ThumbnailRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Thumb   string       `protobuf:"bytes,3,opt,name=thumb,proto3" json:"thumb,omitempty"`
}

func (x *ThumbnailRes) Reset() {
	*x = ThumbnailRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailRes) ProtoMessage() {}

func (x *ThumbnailRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailRes.ProtoReflect.Descriptor instead.
func (*ThumbnailRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{58}
}

func (x *ThumbnailRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *ThumbnailRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ThumbnailRes) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

type SetKeyvalueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Expire int64  `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *SetKeyvalueReq) Reset() {
	*x = SetKeyvalueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetKeyvalueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyvalueReq) ProtoMessage() {}

func (x *SetKeyvalueReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyvalueReq.ProtoReflect.Descriptor instead.
func (*SetKeyvalueReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{59}
}

func (x *SetKeyvalueReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetKeyvalueReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SetKeyvalueReq) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

type SetKeyvalueRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
}

func (x *SetKeyvalueRes) Reset() {
	*x = SetKeyvalueRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetKeyvalueRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyvalueRes) ProtoMessage() {}

func (x *SetKeyvalueRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyvalueRes.ProtoReflect.Descriptor instead.
func (*SetKeyvalueRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{60}
}

func (x *SetKeyvalueRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SetKeyvalueRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

type GetKeyvalueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetKeyvalueReq) Reset() {
	*x = GetKeyvalueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyvalueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyvalueReq) ProtoMessage() {}

func (x *GetKeyvalueReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyvalueReq.ProtoReflect.Descriptor instead.
func (*GetKeyvalueReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{61}
}

func (x *GetKeyvalueReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetKeyvalueRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Value   string       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetKeyvalueRes) Reset() {
	*x = GetKeyvalueRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyvalueRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyvalueRes) ProtoMessage() {}

func (x *GetKeyvalueRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyvalueRes.ProtoReflect.Descriptor instead.
func (*GetKeyvalueRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{62}
}

func (x *GetKeyvalueRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GetKeyvalueRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetKeyvalueRes) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DelKeyvalueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DelKeyvalueReq) Reset() {
	*x = DelKeyvalueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelKeyvalueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelKeyvalueReq) ProtoMessage() {}

func (x *DelKeyvalueReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelKeyvalueReq.ProtoReflect.Descriptor instead.
func (*DelKeyvalueReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{63}
}

func (x *DelKeyvalueReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type DelKeyvalueRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
}

func (x *DelKeyvalueRes) Reset() {
	*x = DelKeyvalueRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelKeyvalueRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelKeyvalueRes) ProtoMessage() {}

func (x *DelKeyvalueRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelKeyvalueRes.ProtoReflect.Descriptor instead.
func (*DelKeyvalueRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{64}
}

func (x *DelKeyvalueRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *DelKeyvalueRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

type VersionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode  rescode.Code          `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg   string                `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Versions []*common.VersionItem `protobuf:"bytes,3,rep,name=versions,proto3" json:"versions,omitempty"`
	Extra    map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VersionRes) Reset() {
	*x = VersionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRes) ProtoMessage() {}

func (x *VersionRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRes.ProtoReflect.Descriptor instead.
func (*VersionRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{65}
}

func (x *VersionRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *VersionRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VersionRes) GetVersions() []*common.VersionItem {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *VersionRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubjectNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req   string            `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubjectNameReq) Reset() {
	*x = SubjectNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectNameReq) ProtoMessage() {}

func (x *SubjectNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectNameReq.ProtoReflect.Descriptor instead.
func (*SubjectNameReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{66}
}

func (x *SubjectNameReq) GetReq() string {
	if x != nil {
		return x.Req
	}
	return ""
}

func (x *SubjectNameReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubjectNameRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Name    string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubjectNameRes) Reset() {
	*x = SubjectNameRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectNameRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectNameRes) ProtoMessage() {}

func (x *SubjectNameRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectNameRes.ProtoReflect.Descriptor instead.
func (*SubjectNameRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{67}
}

func (x *SubjectNameRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SubjectNameRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SubjectNameRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubjectNameRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ChapterResItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    string                `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Title  string                `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Childs []*common.ChapterItem `protobuf:"bytes,3,rep,name=childs,proto3" json:"childs,omitempty"`
}

func (x *ChapterResItem) Reset() {
	*x = ChapterResItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterResItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterResItem) ProtoMessage() {}

func (x *ChapterResItem) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterResItem.ProtoReflect.Descriptor instead.
func (*ChapterResItem) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{68}
}

func (x *ChapterResItem) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ChapterResItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChapterResItem) GetChilds() []*common.ChapterItem {
	if x != nil {
		return x.Childs
	}
	return nil
}

type ChapterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode  rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg   string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Chapters []*ChapterResItem `protobuf:"bytes,3,rep,name=chapters,proto3" json:"chapters,omitempty"`
	Extra    map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChapterRes) Reset() {
	*x = ChapterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterRes) ProtoMessage() {}

func (x *ChapterRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterRes.ProtoReflect.Descriptor instead.
func (*ChapterRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{69}
}

func (x *ChapterRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *ChapterRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ChapterRes) GetChapters() []*ChapterResItem {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *ChapterRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SourceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Sources []*common.SourceItem `protobuf:"bytes,4,rep,name=sources,proto3" json:"sources,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SourceRes) Reset() {
	*x = SourceRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceRes) ProtoMessage() {}

func (x *SourceRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceRes.ProtoReflect.Descriptor instead.
func (*SourceRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{70}
}

func (x *SourceRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SourceRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SourceRes) GetSources() []*common.SourceItem {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *SourceRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TixingRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Tixings []*common.TixingItem `protobuf:"bytes,3,rep,name=tixings,proto3" json:"tixings,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TixingRes) Reset() {
	*x = TixingRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TixingRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TixingRes) ProtoMessage() {}

func (x *TixingRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TixingRes.ProtoReflect.Descriptor instead.
func (*TixingRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{71}
}

func (x *TixingRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *TixingRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *TixingRes) GetTixings() []*common.TixingItem {
	if x != nil {
		return x.Tixings
	}
	return nil
}

func (x *TixingRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TimuCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimuCountRes) Reset() {
	*x = TimuCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimuCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimuCountRes) ProtoMessage() {}

func (x *TimuCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimuCountRes.ProtoReflect.Descriptor instead.
func (*TimuCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{72}
}

func (x *TimuCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *TimuCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *TimuCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TimuCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TimuAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64               `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Timus *common.AddTimuItem `protobuf:"bytes,2,opt,name=timus,proto3" json:"timus,omitempty"`
	Extra map[string]string   `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimuAddReq) Reset() {
	*x = TimuAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimuAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimuAddReq) ProtoMessage() {}

func (x *TimuAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimuAddReq.ProtoReflect.Descriptor instead.
func (*TimuAddReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{73}
}

func (x *TimuAddReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TimuAddReq) GetTimus() *common.AddTimuItem {
	if x != nil {
		return x.Timus
	}
	return nil
}

func (x *TimuAddReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TimuAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimuAddRes) Reset() {
	*x = TimuAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimuAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimuAddRes) ProtoMessage() {}

func (x *TimuAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimuAddRes.ProtoReflect.Descriptor instead.
func (*TimuAddRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{74}
}

func (x *TimuAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *TimuAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *TimuAddRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TimuRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Timus   []*common.TimuItem `protobuf:"bytes,3,rep,name=timus,proto3" json:"timus,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimuRes) Reset() {
	*x = TimuRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimuRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimuRes) ProtoMessage() {}

func (x *TimuRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimuRes.ProtoReflect.Descriptor instead.
func (*TimuRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{75}
}

func (x *TimuRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *TimuRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *TimuRes) GetTimus() []*common.TimuItem {
	if x != nil {
		return x.Timus
	}
	return nil
}

func (x *TimuRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TimuByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"` // 用户id
	Tid   string            `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`  // 题目id
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimuByIdReq) Reset() {
	*x = TimuByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimuByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimuByIdReq) ProtoMessage() {}

func (x *TimuByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimuByIdReq.ProtoReflect.Descriptor instead.
func (*TimuByIdReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{76}
}

func (x *TimuByIdReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TimuByIdReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *TimuByIdReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TimuByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Timus   *common.TimuItem  `protobuf:"bytes,3,opt,name=timus,proto3" json:"timus,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimuByIdRes) Reset() {
	*x = TimuByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimuByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimuByIdRes) ProtoMessage() {}

func (x *TimuByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimuByIdRes.ProtoReflect.Descriptor instead.
func (*TimuByIdRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{77}
}

func (x *TimuByIdRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *TimuByIdRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *TimuByIdRes) GetTimus() *common.TimuItem {
	if x != nil {
		return x.Timus
	}
	return nil
}

func (x *TimuByIdRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CollectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Cid   string            `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
	Op    int64             `protobuf:"varint,3,opt,name=op,proto3" json:"op,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CollectReq) Reset() {
	*x = CollectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectReq) ProtoMessage() {}

func (x *CollectReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectReq.ProtoReflect.Descriptor instead.
func (*CollectReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{78}
}

func (x *CollectReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CollectReq) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *CollectReq) GetOp() int64 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *CollectReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CollectRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CollectRes) Reset() {
	*x = CollectRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectRes) ProtoMessage() {}

func (x *CollectRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectRes.ProtoReflect.Descriptor instead.
func (*CollectRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{79}
}

func (x *CollectRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CollectRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CollectRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CollectListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size int32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *CollectListReq) Reset() {
	*x = CollectListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectListReq) ProtoMessage() {}

func (x *CollectListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectListReq.ProtoReflect.Descriptor instead.
func (*CollectListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{80}
}

func (x *CollectListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CollectListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CollectListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type CollectListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Timus   []*common.TimuItem `protobuf:"bytes,3,rep,name=timus,proto3" json:"timus,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CollectListRes) Reset() {
	*x = CollectListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectListRes) ProtoMessage() {}

func (x *CollectListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectListRes.ProtoReflect.Descriptor instead.
func (*CollectListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{81}
}

func (x *CollectListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CollectListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CollectListRes) GetTimus() []*common.TimuItem {
	if x != nil {
		return x.Timus
	}
	return nil
}

func (x *CollectListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ModifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  int64            `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Tid  string           `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	Timu *common.Question `protobuf:"bytes,3,opt,name=timu,proto3" json:"timu,omitempty"`
}

func (x *ModifyReq) Reset() {
	*x = ModifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyReq) ProtoMessage() {}

func (x *ModifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyReq.ProtoReflect.Descriptor instead.
func (*ModifyReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{82}
}

func (x *ModifyReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ModifyReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *ModifyReq) GetTimu() *common.Question {
	if x != nil {
		return x.Timu
	}
	return nil
}

type ModifyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyRes) Reset() {
	*x = ModifyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRes) ProtoMessage() {}

func (x *ModifyRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRes.ProtoReflect.Descriptor instead.
func (*ModifyRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{83}
}

func (x *ModifyRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *ModifyRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ModifyRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ModifyListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Page   int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Sorted string `protobuf:"bytes,4,opt,name=sorted,proto3" json:"sorted,omitempty"`
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ModifyListReq) Reset() {
	*x = ModifyListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyListReq) ProtoMessage() {}

func (x *ModifyListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyListReq.ProtoReflect.Descriptor instead.
func (*ModifyListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{84}
}

func (x *ModifyListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ModifyListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ModifyListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ModifyListReq) GetSorted() string {
	if x != nil {
		return x.Sorted
	}
	return ""
}

func (x *ModifyListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ModifyListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Timus   []*common.ModifyItem `protobuf:"bytes,3,rep,name=timus,proto3" json:"timus,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyListRes) Reset() {
	*x = ModifyListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyListRes) ProtoMessage() {}

func (x *ModifyListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyListRes.ProtoReflect.Descriptor instead.
func (*ModifyListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{85}
}

func (x *ModifyListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *ModifyListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ModifyListRes) GetTimus() []*common.ModifyItem {
	if x != nil {
		return x.Timus
	}
	return nil
}

func (x *ModifyListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ModifyCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Status string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Extra  map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyCountReq) Reset() {
	*x = ModifyCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCountReq) ProtoMessage() {}

func (x *ModifyCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCountReq.ProtoReflect.Descriptor instead.
func (*ModifyCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{86}
}

func (x *ModifyCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ModifyCountReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ModifyCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ModifyCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyCountRes) Reset() {
	*x = ModifyCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCountRes) ProtoMessage() {}

func (x *ModifyCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCountRes.ProtoReflect.Descriptor instead.
func (*ModifyCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{87}
}

func (x *ModifyCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *ModifyCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ModifyCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ModifyCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ApproveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid    int64              `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Status string             `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Info   string             `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Dest   common.ApproveDest `protobuf:"varint,5,opt,name=dest,proto3,enum=common.ApproveDest" json:"dest,omitempty"`
	Extra  map[string]string  `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApproveReq) Reset() {
	*x = ApproveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveReq) ProtoMessage() {}

func (x *ApproveReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveReq.ProtoReflect.Descriptor instead.
func (*ApproveReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{88}
}

func (x *ApproveReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApproveReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ApproveReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApproveReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *ApproveReq) GetDest() common.ApproveDest {
	if x != nil {
		return x.Dest
	}
	return common.ApproveDest_search_tyle_APPROVE_TIMU_MODIFY
}

func (x *ApproveReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ApproveRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApproveRes) Reset() {
	*x = ApproveRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveRes) ProtoMessage() {}

func (x *ApproveRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveRes.ProtoReflect.Descriptor instead.
func (*ApproveRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{89}
}

func (x *ApproveRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *ApproveRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ApproveRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SearchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string            `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Uid     int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Style   common.SearchTyle `protobuf:"varint,3,opt,name=style,proto3,enum=common.SearchTyle" json:"style,omitempty"`
	Page    int32             `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32             `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *SearchReq) Reset() {
	*x = SearchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReq) ProtoMessage() {}

func (x *SearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReq.ProtoReflect.Descriptor instead.
func (*SearchReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{90}
}

func (x *SearchReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SearchReq) GetStyle() common.SearchTyle {
	if x != nil {
		return x.Style
	}
	return common.SearchTyle_FROM_QUESTION
}

func (x *SearchReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SearchRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode   rescode.Code             `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg    string                   `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Timestamp float64                  `protobuf:"fixed64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Total     *common.SearchHitsTotal  `protobuf:"bytes,4,opt,name=total,proto3" json:"total,omitempty"`
	Hits      []*common.SearchHitsItem `protobuf:"bytes,5,rep,name=hits,proto3" json:"hits,omitempty"`
	Extra     map[string]string        `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchRes) Reset() {
	*x = SearchRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRes) ProtoMessage() {}

func (x *SearchRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRes.ProtoReflect.Descriptor instead.
func (*SearchRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{91}
}

func (x *SearchRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SearchRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SearchRes) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SearchRes) GetTotal() *common.SearchHitsTotal {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *SearchRes) GetHits() []*common.SearchHitsItem {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *SearchRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddGradeCateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
}

func (x *AddGradeCateRes) Reset() {
	*x = AddGradeCateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGradeCateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGradeCateRes) ProtoMessage() {}

func (x *AddGradeCateRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGradeCateRes.ProtoReflect.Descriptor instead.
func (*AddGradeCateRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{92}
}

func (x *AddGradeCateRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddGradeCateRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

type GradeCateCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int64             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeCateCountRes) Reset() {
	*x = GradeCateCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeCateCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeCateCountRes) ProtoMessage() {}

func (x *GradeCateCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeCateCountRes.ProtoReflect.Descriptor instead.
func (*GradeCateCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{93}
}

func (x *GradeCateCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GradeCateCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GradeCateCountRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GradeCateCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GradeCateListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int32             `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeCateListReq) Reset() {
	*x = GradeCateListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeCateListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeCateListReq) ProtoMessage() {}

func (x *GradeCateListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeCateListReq.ProtoReflect.Descriptor instead.
func (*GradeCateListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{94}
}

func (x *GradeCateListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GradeCateListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GradeCateListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GradeCateListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code        `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string              `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.GradeCate `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string   `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeCateListRes) Reset() {
	*x = GradeCateListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeCateListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeCateListRes) ProtoMessage() {}

func (x *GradeCateListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeCateListRes.ProtoReflect.Descriptor instead.
func (*GradeCateListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{95}
}

func (x *GradeCateListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GradeCateListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GradeCateListRes) GetLists() []*common.GradeCate {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *GradeCateListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type HomeBlackDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.SchoolStatic `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string      `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HomeBlackDataRes) Reset() {
	*x = HomeBlackDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBlackDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBlackDataRes) ProtoMessage() {}

func (x *HomeBlackDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBlackDataRes.ProtoReflect.Descriptor instead.
func (*HomeBlackDataRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{96}
}

func (x *HomeBlackDataRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *HomeBlackDataRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *HomeBlackDataRes) GetLists() []*common.SchoolStatic {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *HomeBlackDataRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GradeSubjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32             `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeSubjectReq) Reset() {
	*x = GradeSubjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeSubjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeSubjectReq) ProtoMessage() {}

func (x *GradeSubjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeSubjectReq.ProtoReflect.Descriptor instead.
func (*GradeSubjectReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{97}
}

func (x *GradeSubjectReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GradeSubjectReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GradeSubjectRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.GradeSubject `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string      `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GradeSubjectRes) Reset() {
	*x = GradeSubjectRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeSubjectRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeSubjectRes) ProtoMessage() {}

func (x *GradeSubjectRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeSubjectRes.ProtoReflect.Descriptor instead.
func (*GradeSubjectRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{98}
}

func (x *GradeSubjectRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GradeSubjectRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GradeSubjectRes) GetLists() []*common.GradeSubject {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *GradeSubjectRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SchoolRollAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
}

func (x *SchoolRollAddRes) Reset() {
	*x = SchoolRollAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolRollAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolRollAddRes) ProtoMessage() {}

func (x *SchoolRollAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolRollAddRes.ProtoReflect.Descriptor instead.
func (*SchoolRollAddRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{99}
}

func (x *SchoolRollAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SchoolRollAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

type SchoolRollCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int64        `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SchoolRollCountRes) Reset() {
	*x = SchoolRollCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolRollCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolRollCountRes) ProtoMessage() {}

func (x *SchoolRollCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolRollCountRes.ProtoReflect.Descriptor instead.
func (*SchoolRollCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{100}
}

func (x *SchoolRollCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SchoolRollCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SchoolRollCountRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SchoolRollListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int32             `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchoolRollListReq) Reset() {
	*x = SchoolRollListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolRollListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolRollListReq) ProtoMessage() {}

func (x *SchoolRollListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolRollListReq.ProtoReflect.Descriptor instead.
func (*SchoolRollListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{101}
}

func (x *SchoolRollListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SchoolRollListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SchoolRollListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SchoolRollListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.SchoolRoll `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchoolRollListRes) Reset() {
	*x = SchoolRollListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchoolRollListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolRollListRes) ProtoMessage() {}

func (x *SchoolRollListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolRollListRes.ProtoReflect.Descriptor instead.
func (*SchoolRollListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{102}
}

func (x *SchoolRollListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SchoolRollListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SchoolRollListRes) GetLists() []*common.SchoolRoll {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *SchoolRollListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubjectCateAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
}

func (x *SubjectCateAddRes) Reset() {
	*x = SubjectCateAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectCateAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectCateAddRes) ProtoMessage() {}

func (x *SubjectCateAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectCateAddRes.ProtoReflect.Descriptor instead.
func (*SubjectCateAddRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{103}
}

func (x *SubjectCateAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SubjectCateAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

type SubjectCateCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string       `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int64        `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SubjectCateCountRes) Reset() {
	*x = SubjectCateCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectCateCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectCateCountRes) ProtoMessage() {}

func (x *SubjectCateCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectCateCountRes.ProtoReflect.Descriptor instead.
func (*SubjectCateCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{104}
}

func (x *SubjectCateCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SubjectCateCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SubjectCateCountRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SubjectCateListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int32             `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubjectCateListReq) Reset() {
	*x = SubjectCateListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectCateListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectCateListReq) ProtoMessage() {}

func (x *SubjectCateListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectCateListReq.ProtoReflect.Descriptor instead.
func (*SubjectCateListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{105}
}

func (x *SubjectCateListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SubjectCateListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SubjectCateListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubjectCateListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code          `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.SubjectCate `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubjectCateListRes) Reset() {
	*x = SubjectCateListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectCateListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectCateListRes) ProtoMessage() {}

func (x *SubjectCateListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectCateListRes.ProtoReflect.Descriptor instead.
func (*SubjectCateListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{106}
}

func (x *SubjectCateListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SubjectCateListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SubjectCateListRes) GetLists() []*common.SubjectCate {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *SubjectCateListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AttentionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc     string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	CreateAt int64  `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (x *AttentionItem) Reset() {
	*x = AttentionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttentionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttentionItem) ProtoMessage() {}

func (x *AttentionItem) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttentionItem.ProtoReflect.Descriptor instead.
func (*AttentionItem) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{107}
}

func (x *AttentionItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AttentionItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttentionItem) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *AttentionItem) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

type AddAttentionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item  *AttentionItem    `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddAttentionReq) Reset() {
	*x = AddAttentionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAttentionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAttentionReq) ProtoMessage() {}

func (x *AddAttentionReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAttentionReq.ProtoReflect.Descriptor instead.
func (*AddAttentionReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{108}
}

func (x *AddAttentionReq) GetItem() *AttentionItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *AddAttentionReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddAttentionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddAttentionRes) Reset() {
	*x = AddAttentionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAttentionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAttentionRes) ProtoMessage() {}

func (x *AddAttentionRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAttentionRes.ProtoReflect.Descriptor instead.
func (*AddAttentionRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{109}
}

func (x *AddAttentionRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddAttentionRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddAttentionRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DelAttentionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aid   int64             `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelAttentionReq) Reset() {
	*x = DelAttentionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAttentionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAttentionReq) ProtoMessage() {}

func (x *DelAttentionReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAttentionReq.ProtoReflect.Descriptor instead.
func (*DelAttentionReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{110}
}

func (x *DelAttentionReq) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *DelAttentionReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DelAttentionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelAttentionRes) Reset() {
	*x = DelAttentionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAttentionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAttentionRes) ProtoMessage() {}

func (x *DelAttentionRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAttentionRes.ProtoReflect.Descriptor instead.
func (*DelAttentionRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{111}
}

func (x *DelAttentionRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *DelAttentionRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *DelAttentionRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetAttentionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aid   int64             `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Page  int32             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAttentionReq) Reset() {
	*x = GetAttentionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttentionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttentionReq) ProtoMessage() {}

func (x *GetAttentionReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttentionReq.ProtoReflect.Descriptor instead.
func (*GetAttentionReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{112}
}

func (x *GetAttentionReq) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *GetAttentionReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAttentionReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetAttentionReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetAttentionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*AttentionItem  `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAttentionRes) Reset() {
	*x = GetAttentionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttentionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttentionRes) ProtoMessage() {}

func (x *GetAttentionRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttentionRes.ProtoReflect.Descriptor instead.
func (*GetAttentionRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{113}
}

func (x *GetAttentionRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GetAttentionRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetAttentionRes) GetLists() []*AttentionItem {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *GetAttentionRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddUserAttentionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aid   int64             `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddUserAttentionReq) Reset() {
	*x = AddUserAttentionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserAttentionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserAttentionReq) ProtoMessage() {}

func (x *AddUserAttentionReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserAttentionReq.ProtoReflect.Descriptor instead.
func (*AddUserAttentionReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{114}
}

func (x *AddUserAttentionReq) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *AddUserAttentionReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddUserAttentionReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddUserAttentionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddUserAttentionRes) Reset() {
	*x = AddUserAttentionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserAttentionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserAttentionRes) ProtoMessage() {}

func (x *AddUserAttentionRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserAttentionRes.ProtoReflect.Descriptor instead.
func (*AddUserAttentionRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{115}
}

func (x *AddUserAttentionRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddUserAttentionRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddUserAttentionRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetUserAttentionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserAttentionReq) Reset() {
	*x = GetUserAttentionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAttentionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAttentionReq) ProtoMessage() {}

func (x *GetUserAttentionReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAttentionReq.ProtoReflect.Descriptor instead.
func (*GetUserAttentionReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{116}
}

func (x *GetUserAttentionReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetUserAttentionReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetUserAttentionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*AttentionItem  `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserAttentionRes) Reset() {
	*x = GetUserAttentionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAttentionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAttentionRes) ProtoMessage() {}

func (x *GetUserAttentionRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAttentionRes.ProtoReflect.Descriptor instead.
func (*GetUserAttentionRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{117}
}

func (x *GetUserAttentionRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GetUserAttentionRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetUserAttentionRes) GetLists() []*AttentionItem {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *GetUserAttentionRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DelUserAttentionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aid   int64             `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelUserAttentionReq) Reset() {
	*x = DelUserAttentionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserAttentionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserAttentionReq) ProtoMessage() {}

func (x *DelUserAttentionReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserAttentionReq.ProtoReflect.Descriptor instead.
func (*DelUserAttentionReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{118}
}

func (x *DelUserAttentionReq) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *DelUserAttentionReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DelUserAttentionReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DelUserAttentionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelUserAttentionRes) Reset() {
	*x = DelUserAttentionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserAttentionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserAttentionRes) ProtoMessage() {}

func (x *DelUserAttentionRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserAttentionRes.ProtoReflect.Descriptor instead.
func (*DelUserAttentionRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{119}
}

func (x *DelUserAttentionRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *DelUserAttentionRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *DelUserAttentionRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Info  *common.UserInfo  `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetUserInfoReq) Reset() {
	*x = SetUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserInfoReq) ProtoMessage() {}

func (x *SetUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserInfoReq.ProtoReflect.Descriptor instead.
func (*SetUserInfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{120}
}

func (x *SetUserInfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SetUserInfoReq) GetInfo() *common.UserInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SetUserInfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetUserInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetUserInfoRes) Reset() {
	*x = SetUserInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserInfoRes) ProtoMessage() {}

func (x *SetUserInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserInfoRes.ProtoReflect.Descriptor instead.
func (*SetUserInfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{121}
}

func (x *SetUserInfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SetUserInfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SetUserInfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserInfoReq) Reset() {
	*x = GetUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoReq) ProtoMessage() {}

func (x *GetUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{122}
}

func (x *GetUserInfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetUserInfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetUserInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Info    *common.UserInfo  `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserInfoRes) Reset() {
	*x = GetUserInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoRes) ProtoMessage() {}

func (x *GetUserInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoRes.ProtoReflect.Descriptor instead.
func (*GetUserInfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{123}
}

func (x *GetUserInfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GetUserInfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetUserInfoRes) GetInfo() *common.UserInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetUserInfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetWechatUinfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Info  *common.WechatUserinfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Extra map[string]string      `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetWechatUinfoReq) Reset() {
	*x = SetWechatUinfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWechatUinfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWechatUinfoReq) ProtoMessage() {}

func (x *SetWechatUinfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWechatUinfoReq.ProtoReflect.Descriptor instead.
func (*SetWechatUinfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{124}
}

func (x *SetWechatUinfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SetWechatUinfoReq) GetInfo() *common.WechatUserinfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SetWechatUinfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetWechatUinfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetWechatUinfoRes) Reset() {
	*x = SetWechatUinfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWechatUinfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWechatUinfoRes) ProtoMessage() {}

func (x *SetWechatUinfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWechatUinfoRes.ProtoReflect.Descriptor instead.
func (*SetWechatUinfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{125}
}

func (x *SetWechatUinfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SetWechatUinfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SetWechatUinfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetWechatUinfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetWechatUinfoReq) Reset() {
	*x = GetWechatUinfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWechatUinfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWechatUinfoReq) ProtoMessage() {}

func (x *GetWechatUinfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWechatUinfoReq.ProtoReflect.Descriptor instead.
func (*GetWechatUinfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{126}
}

func (x *GetWechatUinfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetWechatUinfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetWechatUinfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Info    *common.WechatUserinfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Extra   map[string]string      `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetWechatUinfoRes) Reset() {
	*x = GetWechatUinfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWechatUinfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWechatUinfoRes) ProtoMessage() {}

func (x *GetWechatUinfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWechatUinfoRes.ProtoReflect.Descriptor instead.
func (*GetWechatUinfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{127}
}

func (x *GetWechatUinfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GetWechatUinfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetWechatUinfoRes) GetInfo() *common.WechatUserinfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetWechatUinfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetAlipayUinfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Info  *common.AlipayUserinfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Extra map[string]string      `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetAlipayUinfoReq) Reset() {
	*x = SetAlipayUinfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAlipayUinfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAlipayUinfoReq) ProtoMessage() {}

func (x *SetAlipayUinfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAlipayUinfoReq.ProtoReflect.Descriptor instead.
func (*SetAlipayUinfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{128}
}

func (x *SetAlipayUinfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SetAlipayUinfoReq) GetInfo() *common.AlipayUserinfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SetAlipayUinfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetAlipayUinfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetAlipayUinfoRes) Reset() {
	*x = SetAlipayUinfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAlipayUinfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAlipayUinfoRes) ProtoMessage() {}

func (x *SetAlipayUinfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAlipayUinfoRes.ProtoReflect.Descriptor instead.
func (*SetAlipayUinfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{129}
}

func (x *SetAlipayUinfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SetAlipayUinfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SetAlipayUinfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetAlipayUinfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAlipayUinfoReq) Reset() {
	*x = GetAlipayUinfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlipayUinfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlipayUinfoReq) ProtoMessage() {}

func (x *GetAlipayUinfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlipayUinfoReq.ProtoReflect.Descriptor instead.
func (*GetAlipayUinfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{130}
}

func (x *GetAlipayUinfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetAlipayUinfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetAlipayUinfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Info    *common.AlipayUserinfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Extra   map[string]string      `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAlipayUinfoRes) Reset() {
	*x = GetAlipayUinfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlipayUinfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlipayUinfoRes) ProtoMessage() {}

func (x *GetAlipayUinfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlipayUinfoRes.ProtoReflect.Descriptor instead.
func (*GetAlipayUinfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{131}
}

func (x *GetAlipayUinfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GetAlipayUinfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetAlipayUinfoRes) GetInfo() *common.AlipayUserinfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetAlipayUinfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetBaiduEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bid     string                `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid,omitempty"`
	Entitys []*common.BaiduEntity `protobuf:"bytes,2,rep,name=entitys,proto3" json:"entitys,omitempty"`
	Extra   map[string]string     `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetBaiduEntityReq) Reset() {
	*x = SetBaiduEntityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBaiduEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBaiduEntityReq) ProtoMessage() {}

func (x *SetBaiduEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBaiduEntityReq.ProtoReflect.Descriptor instead.
func (*SetBaiduEntityReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{132}
}

func (x *SetBaiduEntityReq) GetBid() string {
	if x != nil {
		return x.Bid
	}
	return ""
}

func (x *SetBaiduEntityReq) GetEntitys() []*common.BaiduEntity {
	if x != nil {
		return x.Entitys
	}
	return nil
}

func (x *SetBaiduEntityReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SetBaiduEntityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetBaiduEntityRes) Reset() {
	*x = SetBaiduEntityRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBaiduEntityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBaiduEntityRes) ProtoMessage() {}

func (x *SetBaiduEntityRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBaiduEntityRes.ProtoReflect.Descriptor instead.
func (*SetBaiduEntityRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{133}
}

func (x *SetBaiduEntityRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SetBaiduEntityRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SetBaiduEntityRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bid   string            `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid,omitempty"`
	Page  int64             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int64             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduEntityReq) Reset() {
	*x = BaiduEntityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduEntityReq) ProtoMessage() {}

func (x *BaiduEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduEntityReq.ProtoReflect.Descriptor instead.
func (*BaiduEntityReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{134}
}

func (x *BaiduEntityReq) GetBid() string {
	if x != nil {
		return x.Bid
	}
	return ""
}

func (x *BaiduEntityReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BaiduEntityReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BaiduEntityReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduEntityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code          `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Page    int64                 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size    int64                 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Entitys []*common.BaiduEntity `protobuf:"bytes,5,rep,name=entitys,proto3" json:"entitys,omitempty"`
	Extra   map[string]string     `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduEntityRes) Reset() {
	*x = BaiduEntityRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduEntityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduEntityRes) ProtoMessage() {}

func (x *BaiduEntityRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduEntityRes.ProtoReflect.Descriptor instead.
func (*BaiduEntityRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{135}
}

func (x *BaiduEntityRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *BaiduEntityRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *BaiduEntityRes) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BaiduEntityRes) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BaiduEntityRes) GetEntitys() []*common.BaiduEntity {
	if x != nil {
		return x.Entitys
	}
	return nil
}

func (x *BaiduEntityRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SearchItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string            `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Page    int32             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchItemReq) Reset() {
	*x = SearchItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchItemReq) ProtoMessage() {}

func (x *SearchItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchItemReq.ProtoReflect.Descriptor instead.
func (*SearchItemReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{136}
}

func (x *SearchItemReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchItemReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchItemReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchItemReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SearchItemRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []string          `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchItemRes) Reset() {
	*x = SearchItemRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchItemRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchItemRes) ProtoMessage() {}

func (x *SearchItemRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchItemRes.ProtoReflect.Descriptor instead.
func (*SearchItemRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{137}
}

func (x *SearchItemRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SearchItemRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SearchItemRes) GetLists() []string {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *SearchItemRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SearchHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Page  int32             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchHistoryReq) Reset() {
	*x = SearchHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchHistoryReq) ProtoMessage() {}

func (x *SearchHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchHistoryReq.ProtoReflect.Descriptor instead.
func (*SearchHistoryReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{138}
}

func (x *SearchHistoryReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SearchHistoryReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchHistoryReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchHistoryReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SearchHistoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code                `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                      `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.SearchHistoryItem `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string           `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchHistoryRes) Reset() {
	*x = SearchHistoryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchHistoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchHistoryRes) ProtoMessage() {}

func (x *SearchHistoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchHistoryRes.ProtoReflect.Descriptor instead.
func (*SearchHistoryRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{139}
}

func (x *SearchHistoryRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SearchHistoryRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SearchHistoryRes) GetLists() []*common.SearchHistoryItem {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *SearchHistoryRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshModifyRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   string            `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Id     int64             `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Reward float64           `protobuf:"fixed64,3,opt,name=reward,proto3" json:"reward,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshModifyRewardReq) Reset() {
	*x = RefreshModifyRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshModifyRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshModifyRewardReq) ProtoMessage() {}

func (x *RefreshModifyRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshModifyRewardReq.ProtoReflect.Descriptor instead.
func (*RefreshModifyRewardReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{140}
}

func (x *RefreshModifyRewardReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *RefreshModifyRewardReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefreshModifyRewardReq) GetReward() float64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *RefreshModifyRewardReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshModifyRewardRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Code    string            `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshModifyRewardRes) Reset() {
	*x = RefreshModifyRewardRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshModifyRewardRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshModifyRewardRes) ProtoMessage() {}

func (x *RefreshModifyRewardRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshModifyRewardRes.ProtoReflect.Descriptor instead.
func (*RefreshModifyRewardRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{141}
}

func (x *RefreshModifyRewardRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *RefreshModifyRewardRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *RefreshModifyRewardRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RefreshModifyRewardRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshUserCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   string            `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Userid int64             `protobuf:"varint,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Coin   float64           `protobuf:"fixed64,3,opt,name=coin,proto3" json:"coin,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshUserCoinReq) Reset() {
	*x = RefreshUserCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshUserCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshUserCoinReq) ProtoMessage() {}

func (x *RefreshUserCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshUserCoinReq.ProtoReflect.Descriptor instead.
func (*RefreshUserCoinReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{142}
}

func (x *RefreshUserCoinReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *RefreshUserCoinReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *RefreshUserCoinReq) GetCoin() float64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RefreshUserCoinReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshUserCoinRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Code    string            `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshUserCoinRes) Reset() {
	*x = RefreshUserCoinRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshUserCoinRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshUserCoinRes) ProtoMessage() {}

func (x *RefreshUserCoinRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshUserCoinRes.ProtoReflect.Descriptor instead.
func (*RefreshUserCoinRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{143}
}

func (x *RefreshUserCoinRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *RefreshUserCoinRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *RefreshUserCoinRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RefreshUserCoinRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddQuestionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  int64               `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Timu *common.AddTimuItem `protobuf:"bytes,2,opt,name=timu,proto3" json:"timu,omitempty"`
}

func (x *AddQuestionReq) Reset() {
	*x = AddQuestionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddQuestionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQuestionReq) ProtoMessage() {}

func (x *AddQuestionReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQuestionReq.ProtoReflect.Descriptor instead.
func (*AddQuestionReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{144}
}

func (x *AddQuestionReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddQuestionReq) GetTimu() *common.AddTimuItem {
	if x != nil {
		return x.Timu
	}
	return nil
}

type AddQuestionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Code    string            `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddQuestionRes) Reset() {
	*x = AddQuestionRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddQuestionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQuestionRes) ProtoMessage() {}

func (x *AddQuestionRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQuestionRes.ProtoReflect.Descriptor instead.
func (*AddQuestionRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{145}
}

func (x *AddQuestionRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddQuestionRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddQuestionRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AddQuestionRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Page   int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Sorted string `protobuf:"bytes,4,opt,name=sorted,proto3" json:"sorted,omitempty"`
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddListReq) Reset() {
	*x = AddListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddListReq) ProtoMessage() {}

func (x *AddListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddListReq.ProtoReflect.Descriptor instead.
func (*AddListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{146}
}

func (x *AddListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AddListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AddListReq) GetSorted() string {
	if x != nil {
		return x.Sorted
	}
	return ""
}

func (x *AddListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AddListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code          `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Timus   []*common.AddTimuItem `protobuf:"bytes,3,rep,name=timus,proto3" json:"timus,omitempty"`
	Extra   map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddListRes) Reset() {
	*x = AddListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddListRes) ProtoMessage() {}

func (x *AddListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddListRes.ProtoReflect.Descriptor instead.
func (*AddListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{147}
}

func (x *AddListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddListRes) GetTimus() []*common.AddTimuItem {
	if x != nil {
		return x.Timus
	}
	return nil
}

func (x *AddListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Status string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Extra  map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddCountReq) Reset() {
	*x = AddCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCountReq) ProtoMessage() {}

func (x *AddCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCountReq.ProtoReflect.Descriptor instead.
func (*AddCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{148}
}

func (x *AddCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddCountReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AddCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddCountRes) Reset() {
	*x = AddCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCountRes) ProtoMessage() {}

func (x *AddCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCountRes.ProtoReflect.Descriptor instead.
func (*AddCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{149}
}

func (x *AddCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshAddRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   string            `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Id     int64             `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Reward float64           `protobuf:"fixed64,3,opt,name=reward,proto3" json:"reward,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshAddRewardReq) Reset() {
	*x = RefreshAddRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshAddRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshAddRewardReq) ProtoMessage() {}

func (x *RefreshAddRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshAddRewardReq.ProtoReflect.Descriptor instead.
func (*RefreshAddRewardReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{150}
}

func (x *RefreshAddRewardReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *RefreshAddRewardReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RefreshAddRewardReq) GetReward() float64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *RefreshAddRewardReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshAddRewardRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Code    string            `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshAddRewardRes) Reset() {
	*x = RefreshAddRewardRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshAddRewardRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshAddRewardRes) ProtoMessage() {}

func (x *RefreshAddRewardRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshAddRewardRes.ProtoReflect.Descriptor instead.
func (*RefreshAddRewardRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{151}
}

func (x *RefreshAddRewardRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *RefreshAddRewardRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *RefreshAddRewardRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RefreshAddRewardRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TixingByVidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid   string            `protobuf:"bytes,1,opt,name=vid,proto3" json:"vid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TixingByVidReq) Reset() {
	*x = TixingByVidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TixingByVidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TixingByVidReq) ProtoMessage() {}

func (x *TixingByVidReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TixingByVidReq.ProtoReflect.Descriptor instead.
func (*TixingByVidReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{152}
}

func (x *TixingByVidReq) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *TixingByVidReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TixingByVidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Tixings []string          `protobuf:"bytes,3,rep,name=tixings,proto3" json:"tixings,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TixingByVidRes) Reset() {
	*x = TixingByVidRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TixingByVidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TixingByVidRes) ProtoMessage() {}

func (x *TixingByVidRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TixingByVidRes.ProtoReflect.Descriptor instead.
func (*TixingByVidRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{153}
}

func (x *TixingByVidRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *TixingByVidRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *TixingByVidRes) GetTixings() []string {
	if x != nil {
		return x.Tixings
	}
	return nil
}

func (x *TixingByVidRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SourceByVidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid   string            `protobuf:"bytes,1,opt,name=vid,proto3" json:"vid,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SourceByVidReq) Reset() {
	*x = SourceByVidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceByVidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceByVidReq) ProtoMessage() {}

func (x *SourceByVidReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceByVidReq.ProtoReflect.Descriptor instead.
func (*SourceByVidReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{154}
}

func (x *SourceByVidReq) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *SourceByVidReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SourceByVidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Sources []string          `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SourceByVidRes) Reset() {
	*x = SourceByVidRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceByVidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceByVidRes) ProtoMessage() {}

func (x *SourceByVidRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceByVidRes.ProtoReflect.Descriptor instead.
func (*SourceByVidRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{155}
}

func (x *SourceByVidRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SourceByVidRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SourceByVidRes) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *SourceByVidRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IdentAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64                    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LogId  string                   `protobuf:"bytes,2,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	Result *common.BaiduDocAnalysis `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Extra  map[string]string        `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentAddReq) Reset() {
	*x = IdentAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentAddReq) ProtoMessage() {}

func (x *IdentAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentAddReq.ProtoReflect.Descriptor instead.
func (*IdentAddReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{156}
}

func (x *IdentAddReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *IdentAddReq) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *IdentAddReq) GetResult() *common.BaiduDocAnalysis {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *IdentAddReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IdentAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentAddRes) Reset() {
	*x = IdentAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentAddRes) ProtoMessage() {}

func (x *IdentAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentAddRes.ProtoReflect.Descriptor instead.
func (*IdentAddRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{157}
}

func (x *IdentAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *IdentAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *IdentAddRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IdentByIidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Iid   string            `protobuf:"bytes,2,opt,name=iid,proto3" json:"iid,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentByIidReq) Reset() {
	*x = IdentByIidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentByIidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentByIidReq) ProtoMessage() {}

func (x *IdentByIidReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentByIidReq.ProtoReflect.Descriptor instead.
func (*IdentByIidReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{158}
}

func (x *IdentByIidReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *IdentByIidReq) GetIid() string {
	if x != nil {
		return x.Iid
	}
	return ""
}

func (x *IdentByIidReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IdentByIidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Result  *common.BaiduIdentItem `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Extra   map[string]string      `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentByIidRes) Reset() {
	*x = IdentByIidRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentByIidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentByIidRes) ProtoMessage() {}

func (x *IdentByIidRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentByIidRes.ProtoReflect.Descriptor instead.
func (*IdentByIidRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{159}
}

func (x *IdentByIidRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *IdentByIidRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *IdentByIidRes) GetResult() *common.BaiduIdentItem {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *IdentByIidRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IdentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Page   int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Sorted string `protobuf:"bytes,4,opt,name=sorted,proto3" json:"sorted,omitempty"`
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Iid    string `protobuf:"bytes,6,opt,name=iid,proto3" json:"iid,omitempty"`
	Sign   string `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *IdentListReq) Reset() {
	*x = IdentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentListReq) ProtoMessage() {}

func (x *IdentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentListReq.ProtoReflect.Descriptor instead.
func (*IdentListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{160}
}

func (x *IdentListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *IdentListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *IdentListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *IdentListReq) GetSorted() string {
	if x != nil {
		return x.Sorted
	}
	return ""
}

func (x *IdentListReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IdentListReq) GetIid() string {
	if x != nil {
		return x.Iid
	}
	return ""
}

func (x *IdentListReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type IdentListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code             `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                   `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Results []*common.BaiduIdentItem `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	Extra   map[string]string        `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentListRes) Reset() {
	*x = IdentListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentListRes) ProtoMessage() {}

func (x *IdentListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentListRes.ProtoReflect.Descriptor instead.
func (*IdentListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{161}
}

func (x *IdentListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *IdentListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *IdentListRes) GetResults() []*common.BaiduIdentItem {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *IdentListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IdentCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Status string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Extra  map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentCountReq) Reset() {
	*x = IdentCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentCountReq) ProtoMessage() {}

func (x *IdentCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentCountReq.ProtoReflect.Descriptor instead.
func (*IdentCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{162}
}

func (x *IdentCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *IdentCountReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IdentCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type IdentCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int32             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IdentCountRes) Reset() {
	*x = IdentCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentCountRes) ProtoMessage() {}

func (x *IdentCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentCountRes.ProtoReflect.Descriptor instead.
func (*IdentCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{163}
}

func (x *IdentCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *IdentCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *IdentCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *IdentCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshIdentRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   string            `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Iid    string            `protobuf:"bytes,2,opt,name=iid,proto3" json:"iid,omitempty"`
	Reward float64           `protobuf:"fixed64,3,opt,name=reward,proto3" json:"reward,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshIdentRewardReq) Reset() {
	*x = RefreshIdentRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshIdentRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshIdentRewardReq) ProtoMessage() {}

func (x *RefreshIdentRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshIdentRewardReq.ProtoReflect.Descriptor instead.
func (*RefreshIdentRewardReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{164}
}

func (x *RefreshIdentRewardReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *RefreshIdentRewardReq) GetIid() string {
	if x != nil {
		return x.Iid
	}
	return ""
}

func (x *RefreshIdentRewardReq) GetReward() float64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *RefreshIdentRewardReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshIdentRewardRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Code    string            `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshIdentRewardRes) Reset() {
	*x = RefreshIdentRewardRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshIdentRewardRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshIdentRewardRes) ProtoMessage() {}

func (x *RefreshIdentRewardRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshIdentRewardRes.ProtoReflect.Descriptor instead.
func (*RefreshIdentRewardRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{165}
}

func (x *RefreshIdentRewardRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *RefreshIdentRewardRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *RefreshIdentRewardRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RefreshIdentRewardRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TeacherItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Tag     string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Resume  string `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
	Subject string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Status  int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Tmlong  int64  `protobuf:"varint,6,opt,name=tmlong,proto3" json:"tmlong,omitempty"`
}

func (x *TeacherItem) Reset() {
	*x = TeacherItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeacherItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeacherItem) ProtoMessage() {}

func (x *TeacherItem) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeacherItem.ProtoReflect.Descriptor instead.
func (*TeacherItem) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{166}
}

func (x *TeacherItem) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TeacherItem) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TeacherItem) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *TeacherItem) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *TeacherItem) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TeacherItem) GetTmlong() int64 {
	if x != nil {
		return x.Tmlong
	}
	return 0
}

type UpdateTeacherReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teacher *TeacherItem      `protobuf:"bytes,1,opt,name=teacher,proto3" json:"teacher,omitempty"`
	Extra   map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateTeacherReq) Reset() {
	*x = UpdateTeacherReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeacherReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeacherReq) ProtoMessage() {}

func (x *UpdateTeacherReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeacherReq.ProtoReflect.Descriptor instead.
func (*UpdateTeacherReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{167}
}

func (x *UpdateTeacherReq) GetTeacher() *TeacherItem {
	if x != nil {
		return x.Teacher
	}
	return nil
}

func (x *UpdateTeacherReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UpdateTeacherRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateTeacherRes) Reset() {
	*x = UpdateTeacherRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeacherRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeacherRes) ProtoMessage() {}

func (x *UpdateTeacherRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeacherRes.ProtoReflect.Descriptor instead.
func (*UpdateTeacherRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{168}
}

func (x *UpdateTeacherRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *UpdateTeacherRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UpdateTeacherRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FindTeacherReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tuid    int64  `protobuf:"varint,1,opt,name=tuid,proto3" json:"tuid,omitempty"`
	Uuid    int64  `protobuf:"varint,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Subject string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	Page    int32  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Sorted  string `protobuf:"bytes,6,opt,name=sorted,proto3" json:"sorted,omitempty"`
}

func (x *FindTeacherReq) Reset() {
	*x = FindTeacherReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTeacherReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTeacherReq) ProtoMessage() {}

func (x *FindTeacherReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTeacherReq.ProtoReflect.Descriptor instead.
func (*FindTeacherReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{169}
}

func (x *FindTeacherReq) GetTuid() int64 {
	if x != nil {
		return x.Tuid
	}
	return 0
}

func (x *FindTeacherReq) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *FindTeacherReq) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *FindTeacherReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindTeacherReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FindTeacherReq) GetSorted() string {
	if x != nil {
		return x.Sorted
	}
	return ""
}

type FindTeacherRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode  rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg   string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Teachers []*TeacherItem    `protobuf:"bytes,3,rep,name=teachers,proto3" json:"teachers,omitempty"`
	Extra    map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FindTeacherRes) Reset() {
	*x = FindTeacherRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTeacherRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTeacherRes) ProtoMessage() {}

func (x *FindTeacherRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTeacherRes.ProtoReflect.Descriptor instead.
func (*FindTeacherRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{170}
}

func (x *FindTeacherRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *FindTeacherRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *FindTeacherRes) GetTeachers() []*TeacherItem {
	if x != nil {
		return x.Teachers
	}
	return nil
}

func (x *FindTeacherRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FocusTeacherReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tuid   int64             `protobuf:"varint,1,opt,name=tuid,proto3" json:"tuid,omitempty"`
	Uuid   int64             `protobuf:"varint,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Status int32             `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FocusTeacherReq) Reset() {
	*x = FocusTeacherReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FocusTeacherReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FocusTeacherReq) ProtoMessage() {}

func (x *FocusTeacherReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FocusTeacherReq.ProtoReflect.Descriptor instead.
func (*FocusTeacherReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{171}
}

func (x *FocusTeacherReq) GetTuid() int64 {
	if x != nil {
		return x.Tuid
	}
	return 0
}

func (x *FocusTeacherReq) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *FocusTeacherReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FocusTeacherReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FocusTeacherRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FocusTeacherRes) Reset() {
	*x = FocusTeacherRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FocusTeacherRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FocusTeacherRes) ProtoMessage() {}

func (x *FocusTeacherRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FocusTeacherRes.ProtoReflect.Descriptor instead.
func (*FocusTeacherRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{172}
}

func (x *FocusTeacherRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *FocusTeacherRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *FocusTeacherRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteCooperReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid    int64             `protobuf:"varint,1,opt,name=nid,proto3" json:"nid,omitempty"`
	Userid int64             `protobuf:"varint,2,opt,name=userid,proto3" json:"userid,omitempty"`
	User   []string          `protobuf:"bytes,3,rep,name=user,proto3" json:"user,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteCooperReq) Reset() {
	*x = NoteCooperReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteCooperReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteCooperReq) ProtoMessage() {}

func (x *NoteCooperReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteCooperReq.ProtoReflect.Descriptor instead.
func (*NoteCooperReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{173}
}

func (x *NoteCooperReq) GetNid() int64 {
	if x != nil {
		return x.Nid
	}
	return 0
}

func (x *NoteCooperReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *NoteCooperReq) GetUser() []string {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *NoteCooperReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteCooperRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	User    []*common.UserInfo `protobuf:"bytes,3,rep,name=user,proto3" json:"user,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteCooperRes) Reset() {
	*x = NoteCooperRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteCooperRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteCooperRes) ProtoMessage() {}

func (x *NoteCooperRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteCooperRes.ProtoReflect.Descriptor instead.
func (*NoteCooperRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{174}
}

func (x *NoteCooperRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteCooperRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteCooperRes) GetUser() []*common.UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *NoteCooperRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid    int64             `protobuf:"varint,1,opt,name=nid,proto3" json:"nid,omitempty"`
	Userid int64             `protobuf:"varint,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Tags   []string          `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteTagReq) Reset() {
	*x = NoteTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTagReq) ProtoMessage() {}

func (x *NoteTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTagReq.ProtoReflect.Descriptor instead.
func (*NoteTagReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{175}
}

func (x *NoteTagReq) GetNid() int64 {
	if x != nil {
		return x.Nid
	}
	return 0
}

func (x *NoteTagReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *NoteTagReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NoteTagReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteTagRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Tags    []string          `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteTagRes) Reset() {
	*x = NoteTagRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTagRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTagRes) ProtoMessage() {}

func (x *NoteTagRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTagRes.ProtoReflect.Descriptor instead.
func (*NoteTagRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{176}
}

func (x *NoteTagRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteTagRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteTagRes) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NoteTagRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteBgcolorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid     int64             `protobuf:"varint,1,opt,name=nid,proto3" json:"nid,omitempty"`
	Userid  int64             `protobuf:"varint,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Bgcolor string            `protobuf:"bytes,3,opt,name=bgcolor,proto3" json:"bgcolor,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteBgcolorReq) Reset() {
	*x = NoteBgcolorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteBgcolorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteBgcolorReq) ProtoMessage() {}

func (x *NoteBgcolorReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteBgcolorReq.ProtoReflect.Descriptor instead.
func (*NoteBgcolorReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{177}
}

func (x *NoteBgcolorReq) GetNid() int64 {
	if x != nil {
		return x.Nid
	}
	return 0
}

func (x *NoteBgcolorReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *NoteBgcolorReq) GetBgcolor() string {
	if x != nil {
		return x.Bgcolor
	}
	return ""
}

func (x *NoteBgcolorReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteBgcolorRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Bgcolor string            `protobuf:"bytes,3,opt,name=bgcolor,proto3" json:"bgcolor,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteBgcolorRes) Reset() {
	*x = NoteBgcolorRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteBgcolorRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteBgcolorRes) ProtoMessage() {}

func (x *NoteBgcolorRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteBgcolorRes.ProtoReflect.Descriptor instead.
func (*NoteBgcolorRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{178}
}

func (x *NoteBgcolorRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteBgcolorRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteBgcolorRes) GetBgcolor() string {
	if x != nil {
		return x.Bgcolor
	}
	return ""
}

func (x *NoteBgcolorRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteTagAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int64             `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Cn     string            `protobuf:"bytes,2,opt,name=cn,proto3" json:"cn,omitempty"`
	Eg     string            `protobuf:"bytes,3,opt,name=eg,proto3" json:"eg,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteTagAddReq) Reset() {
	*x = NoteTagAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTagAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTagAddReq) ProtoMessage() {}

func (x *NoteTagAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTagAddReq.ProtoReflect.Descriptor instead.
func (*NoteTagAddReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{179}
}

func (x *NoteTagAddReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *NoteTagAddReq) GetCn() string {
	if x != nil {
		return x.Cn
	}
	return ""
}

func (x *NoteTagAddReq) GetEg() string {
	if x != nil {
		return x.Eg
	}
	return ""
}

func (x *NoteTagAddReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteTagAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteTagAddRes) Reset() {
	*x = NoteTagAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTagAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTagAddRes) ProtoMessage() {}

func (x *NoteTagAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTagAddRes.ProtoReflect.Descriptor instead.
func (*NoteTagAddRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{180}
}

func (x *NoteTagAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteTagAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteTagAddRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteTagListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64             `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Lang   string            `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
	Status int64             `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Page   int32             `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32             `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Extra  map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteTagListReq) Reset() {
	*x = NoteTagListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTagListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTagListReq) ProtoMessage() {}

func (x *NoteTagListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTagListReq.ProtoReflect.Descriptor instead.
func (*NoteTagListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{181}
}

func (x *NoteTagListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NoteTagListReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *NoteTagListReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NoteTagListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *NoteTagListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *NoteTagListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NoteTagListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Tags    []*common.NoteTag `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NoteTagListRes) Reset() {
	*x = NoteTagListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTagListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTagListRes) ProtoMessage() {}

func (x *NoteTagListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTagListRes.ProtoReflect.Descriptor instead.
func (*NoteTagListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{182}
}

func (x *NoteTagListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *NoteTagListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *NoteTagListRes) GetTags() []*common.NoteTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NoteTagListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubmitCertReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert  *common.PersonCert `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Extra map[string]string  `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubmitCertReq) Reset() {
	*x = SubmitCertReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitCertReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCertReq) ProtoMessage() {}

func (x *SubmitCertReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCertReq.ProtoReflect.Descriptor instead.
func (*SubmitCertReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{183}
}

func (x *SubmitCertReq) GetCert() *common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *SubmitCertReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubmitCertRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubmitCertRes) Reset() {
	*x = SubmitCertRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitCertRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCertRes) ProtoMessage() {}

func (x *SubmitCertRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCertRes.ProtoReflect.Descriptor instead.
func (*SubmitCertRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{184}
}

func (x *SubmitCertRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SubmitCertRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SubmitCertRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CertUid  int64             `protobuf:"varint,2,opt,name=cert_uid,json=certUid,proto3" json:"cert_uid,omitempty"`
	CertName string            `protobuf:"bytes,3,opt,name=cert_name,json=certName,proto3" json:"cert_name,omitempty"`
	Status   string            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Info     string            `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	Extra    map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertStatusReq) Reset() {
	*x = CertStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertStatusReq) ProtoMessage() {}

func (x *CertStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertStatusReq.ProtoReflect.Descriptor instead.
func (*CertStatusReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{185}
}

func (x *CertStatusReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CertStatusReq) GetCertUid() int64 {
	if x != nil {
		return x.CertUid
	}
	return 0
}

func (x *CertStatusReq) GetCertName() string {
	if x != nil {
		return x.CertName
	}
	return ""
}

func (x *CertStatusReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CertStatusReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *CertStatusReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cert    *common.PersonCert `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertStatusRes) Reset() {
	*x = CertStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertStatusRes) ProtoMessage() {}

func (x *CertStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertStatusRes.ProtoReflect.Descriptor instead.
func (*CertStatusRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{186}
}

func (x *CertStatusRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CertStatusRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CertStatusRes) GetCert() *common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertStatusRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Status string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Idname string            `protobuf:"bytes,3,opt,name=idname,proto3" json:"idname,omitempty"`
	Idnum  string            `protobuf:"bytes,4,opt,name=idnum,proto3" json:"idnum,omitempty"`
	Page   int32             `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32             `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Extra  map[string]string `protobuf:"bytes,7,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertInfoReq) Reset() {
	*x = CertInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertInfoReq) ProtoMessage() {}

func (x *CertInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertInfoReq.ProtoReflect.Descriptor instead.
func (*CertInfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{187}
}

func (x *CertInfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CertInfoReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CertInfoReq) GetIdname() string {
	if x != nil {
		return x.Idname
	}
	return ""
}

func (x *CertInfoReq) GetIdnum() string {
	if x != nil {
		return x.Idnum
	}
	return ""
}

func (x *CertInfoReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CertInfoReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CertInfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cert    []*common.PersonCert `protobuf:"bytes,3,rep,name=cert,proto3" json:"cert,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertInfoRes) Reset() {
	*x = CertInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertInfoRes) ProtoMessage() {}

func (x *CertInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertInfoRes.ProtoReflect.Descriptor instead.
func (*CertInfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{188}
}

func (x *CertInfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CertInfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CertInfoRes) GetCert() []*common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertInfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Page  int32             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertFlowReq) Reset() {
	*x = CertFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertFlowReq) ProtoMessage() {}

func (x *CertFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertFlowReq.ProtoReflect.Descriptor instead.
func (*CertFlowReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{189}
}

func (x *CertFlowReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CertFlowReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CertFlowReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CertFlowReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cert    []*common.PersonCert `protobuf:"bytes,3,rep,name=cert,proto3" json:"cert,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertFlowRes) Reset() {
	*x = CertFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertFlowRes) ProtoMessage() {}

func (x *CertFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertFlowRes.ProtoReflect.Descriptor instead.
func (*CertFlowRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{190}
}

func (x *CertFlowRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CertFlowRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CertFlowRes) GetCert() []*common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertFlowRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddUserLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LogType  int32             `protobuf:"varint,2,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	LogInfo  string            `protobuf:"bytes,3,opt,name=log_info,json=logInfo,proto3" json:"log_info,omitempty"`
	CreateAt string            `protobuf:"bytes,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Extra    map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddUserLogReq) Reset() {
	*x = AddUserLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserLogReq) ProtoMessage() {}

func (x *AddUserLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserLogReq.ProtoReflect.Descriptor instead.
func (*AddUserLogReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{191}
}

func (x *AddUserLogReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AddUserLogReq) GetLogType() int32 {
	if x != nil {
		return x.LogType
	}
	return 0
}

func (x *AddUserLogReq) GetLogInfo() string {
	if x != nil {
		return x.LogInfo
	}
	return ""
}

func (x *AddUserLogReq) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *AddUserLogReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddUserLogRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddUserLogRes) Reset() {
	*x = AddUserLogRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserLogRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserLogRes) ProtoMessage() {}

func (x *AddUserLogRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserLogRes.ProtoReflect.Descriptor instead.
func (*AddUserLogRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{192}
}

func (x *AddUserLogRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddUserLogRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddUserLogRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryUserLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid     int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	LogType int32             `protobuf:"varint,3,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	Page    int32             `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32             `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Extra   map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryUserLogReq) Reset() {
	*x = QueryUserLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserLogReq) ProtoMessage() {}

func (x *QueryUserLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserLogReq.ProtoReflect.Descriptor instead.
func (*QueryUserLogReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{193}
}

func (x *QueryUserLogReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryUserLogReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *QueryUserLogReq) GetLogType() int32 {
	if x != nil {
		return x.LogType
	}
	return 0
}

func (x *QueryUserLogReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryUserLogReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryUserLogReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type QueryUserLogRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Logs    []*common.UserLog `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryUserLogRes) Reset() {
	*x = QueryUserLogRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserLogRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserLogRes) ProtoMessage() {}

func (x *QueryUserLogRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserLogRes.ProtoReflect.Descriptor instead.
func (*QueryUserLogRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{194}
}

func (x *QueryUserLogRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *QueryUserLogRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *QueryUserLogRes) GetLogs() []*common.UserLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *QueryUserLogRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserLogCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LogType int32             `protobuf:"varint,2,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserLogCountReq) Reset() {
	*x = UserLogCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogCountReq) ProtoMessage() {}

func (x *UserLogCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogCountReq.ProtoReflect.Descriptor instead.
func (*UserLogCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{195}
}

func (x *UserLogCountReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserLogCountReq) GetLogType() int32 {
	if x != nil {
		return x.LogType
	}
	return 0
}

func (x *UserLogCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserLogCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int64             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserLogCountRes) Reset() {
	*x = UserLogCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogCountRes) ProtoMessage() {}

func (x *UserLogCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogCountRes.ProtoReflect.Descriptor instead.
func (*UserLogCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{196}
}

func (x *UserLogCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *UserLogCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UserLogCountRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UserLogCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cron  *common.CronItem  `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron,omitempty"`
	Admin string            `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddTaskReq) Reset() {
	*x = AddTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskReq) ProtoMessage() {}

func (x *AddTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskReq.ProtoReflect.Descriptor instead.
func (*AddTaskReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{197}
}

func (x *AddTaskReq) GetCron() *common.CronItem {
	if x != nil {
		return x.Cron
	}
	return nil
}

func (x *AddTaskReq) GetAdmin() string {
	if x != nil {
		return x.Admin
	}
	return ""
}

func (x *AddTaskReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddTaskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddTaskRes) Reset() {
	*x = AddTaskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskRes) ProtoMessage() {}

func (x *AddTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskRes.ProtoReflect.Descriptor instead.
func (*AddTaskRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{198}
}

func (x *AddTaskRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddTaskRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddTaskRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repeated bool              `protobuf:"varint,1,opt,name=repeated,proto3" json:"repeated,omitempty"`
	Mutitask bool              `protobuf:"varint,2,opt,name=mutitask,proto3" json:"mutitask,omitempty"`
	StartAt  string            `protobuf:"bytes,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	Extra    map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTaskReq) Reset() {
	*x = GetTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskReq) ProtoMessage() {}

func (x *GetTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskReq.ProtoReflect.Descriptor instead.
func (*GetTaskReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{199}
}

func (x *GetTaskReq) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

func (x *GetTaskReq) GetMutitask() bool {
	if x != nil {
		return x.Mutitask
	}
	return false
}

func (x *GetTaskReq) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *GetTaskReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetTaskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Crons   []*common.CronItem `protobuf:"bytes,3,rep,name=crons,proto3" json:"crons,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTaskRes) Reset() {
	*x = GetTaskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRes) ProtoMessage() {}

func (x *GetTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRes.ProtoReflect.Descriptor instead.
func (*GetTaskRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{200}
}

func (x *GetTaskRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GetTaskRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetTaskRes) GetCrons() []*common.CronItem {
	if x != nil {
		return x.Crons
	}
	return nil
}

func (x *GetTaskRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetTaskCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repeated bool              `protobuf:"varint,1,opt,name=repeated,proto3" json:"repeated,omitempty"`
	Mutitask bool              `protobuf:"varint,2,opt,name=mutitask,proto3" json:"mutitask,omitempty"`
	StartAt  string            `protobuf:"bytes,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	Extra    map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTaskCountReq) Reset() {
	*x = GetTaskCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskCountReq) ProtoMessage() {}

func (x *GetTaskCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskCountReq.ProtoReflect.Descriptor instead.
func (*GetTaskCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{201}
}

func (x *GetTaskCountReq) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

func (x *GetTaskCountReq) GetMutitask() bool {
	if x != nil {
		return x.Mutitask
	}
	return false
}

func (x *GetTaskCountReq) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *GetTaskCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetTaskCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int64             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTaskCountRes) Reset() {
	*x = GetTaskCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskCountRes) ProtoMessage() {}

func (x *GetTaskCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskCountRes.ProtoReflect.Descriptor instead.
func (*GetTaskCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{202}
}

func (x *GetTaskCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *GetTaskCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *GetTaskCountRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetTaskCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UpdateUserinfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info  *common.UpdateUserinfoItem `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Extra map[string]string          `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateUserinfoReq) Reset() {
	*x = UpdateUserinfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserinfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserinfoReq) ProtoMessage() {}

func (x *UpdateUserinfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserinfoReq.ProtoReflect.Descriptor instead.
func (*UpdateUserinfoReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{203}
}

func (x *UpdateUserinfoReq) GetInfo() *common.UpdateUserinfoItem {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *UpdateUserinfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UpdateUserinfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Value   string            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateUserinfoRes) Reset() {
	*x = UpdateUserinfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserinfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserinfoRes) ProtoMessage() {}

func (x *UpdateUserinfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserinfoRes.ProtoReflect.Descriptor instead.
func (*UpdateUserinfoRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{204}
}

func (x *UpdateUserinfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *UpdateUserinfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UpdateUserinfoRes) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateUserinfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddPkgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Address string            `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddPkgReq) Reset() {
	*x = AddPkgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPkgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPkgReq) ProtoMessage() {}

func (x *AddPkgReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPkgReq.ProtoReflect.Descriptor instead.
func (*AddPkgReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{205}
}

func (x *AddPkgReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddPkgReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AddPkgReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddPkgReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddPkgRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddPkgRes) Reset() {
	*x = AddPkgRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPkgRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPkgRes) ProtoMessage() {}

func (x *AddPkgRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPkgRes.ProtoReflect.Descriptor instead.
func (*AddPkgRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{206}
}

func (x *AddPkgRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddPkgRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddPkgRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DelPkgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelPkgReq) Reset() {
	*x = DelPkgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPkgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPkgReq) ProtoMessage() {}

func (x *DelPkgReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPkgReq.ProtoReflect.Descriptor instead.
func (*DelPkgReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{207}
}

func (x *DelPkgReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DelPkgReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DelPkgReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DelPkgRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DelPkgRes) Reset() {
	*x = DelPkgRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPkgRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPkgRes) ProtoMessage() {}

func (x *DelPkgRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPkgRes.ProtoReflect.Descriptor instead.
func (*DelPkgRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{208}
}

func (x *DelPkgRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *DelPkgRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *DelPkgRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PkgListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Page  int64             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int64             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PkgListReq) Reset() {
	*x = PkgListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkgListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkgListReq) ProtoMessage() {}

func (x *PkgListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkgListReq.ProtoReflect.Descriptor instead.
func (*PkgListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{209}
}

func (x *PkgListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PkgListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PkgListReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PkgListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PkgListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Version []*common.PkgItem `protobuf:"bytes,3,rep,name=version,proto3" json:"version,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PkgListRes) Reset() {
	*x = PkgListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkgListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkgListRes) ProtoMessage() {}

func (x *PkgListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkgListRes.ProtoReflect.Descriptor instead.
func (*PkgListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{210}
}

func (x *PkgListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *PkgListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *PkgListRes) GetVersion() []*common.PkgItem {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PkgListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PkgCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PkgCountReq) Reset() {
	*x = PkgCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkgCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkgCountReq) ProtoMessage() {}

func (x *PkgCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkgCountReq.ProtoReflect.Descriptor instead.
func (*PkgCountReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{211}
}

func (x *PkgCountReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PkgCountReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PkgCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Count   int64             `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PkgCountRes) Reset() {
	*x = PkgCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkgCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkgCountRes) ProtoMessage() {}

func (x *PkgCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkgCountRes.ProtoReflect.Descriptor instead.
func (*PkgCountRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{212}
}

func (x *PkgCountRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *PkgCountRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *PkgCountRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PkgCountRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SponsorAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sponsor *common.SponsorItem `protobuf:"bytes,1,opt,name=sponsor,proto3" json:"sponsor,omitempty"`
	Extra   map[string]string   `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SponsorAddReq) Reset() {
	*x = SponsorAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SponsorAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SponsorAddReq) ProtoMessage() {}

func (x *SponsorAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SponsorAddReq.ProtoReflect.Descriptor instead.
func (*SponsorAddReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{213}
}

func (x *SponsorAddReq) GetSponsor() *common.SponsorItem {
	if x != nil {
		return x.Sponsor
	}
	return nil
}

func (x *SponsorAddReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SponsorAddRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SponsorAddRes) Reset() {
	*x = SponsorAddRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SponsorAddRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SponsorAddRes) ProtoMessage() {}

func (x *SponsorAddRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SponsorAddRes.ProtoReflect.Descriptor instead.
func (*SponsorAddRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{214}
}

func (x *SponsorAddRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SponsorAddRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SponsorAddRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SponsorListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int32             `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Uid   int64             `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SponsorListReq) Reset() {
	*x = SponsorListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SponsorListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SponsorListReq) ProtoMessage() {}

func (x *SponsorListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SponsorListReq.ProtoReflect.Descriptor instead.
func (*SponsorListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{215}
}

func (x *SponsorListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SponsorListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SponsorListReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SponsorListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SponsorListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code          `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Lists   []*common.SponsorItem `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists,omitempty"`
	Extra   map[string]string     `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SponsorListRes) Reset() {
	*x = SponsorListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SponsorListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SponsorListRes) ProtoMessage() {}

func (x *SponsorListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SponsorListRes.ProtoReflect.Descriptor instead.
func (*SponsorListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{216}
}

func (x *SponsorListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SponsorListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SponsorListRes) GetLists() []*common.SponsorItem {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *SponsorListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipLimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vip   int32             `protobuf:"varint,1,opt,name=vip,proto3" json:"vip,omitempty"`   // 等级
	Type  int32             `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"` // 限制类型  0:修改试题  1:添加试题  2:浏览试题  3:下载试题
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipLimitReq) Reset() {
	*x = VipLimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLimitReq) ProtoMessage() {}

func (x *VipLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLimitReq.ProtoReflect.Descriptor instead.
func (*VipLimitReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{217}
}

func (x *VipLimitReq) GetVip() int32 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *VipLimitReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *VipLimitReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipLimitRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Limit   int64             `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipLimitRes) Reset() {
	*x = VipLimitRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLimitRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLimitRes) ProtoMessage() {}

func (x *VipLimitRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLimitRes.ProtoReflect.Descriptor instead.
func (*VipLimitRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{218}
}

func (x *VipLimitRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *VipLimitRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipLimitRes) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VipLimitRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32              `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size     int32              `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Products *common.VipProduct `protobuf:"bytes,3,opt,name=products,proto3" json:"products,omitempty"`
	Extra    map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipProductReq) Reset() {
	*x = VipProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipProductReq) ProtoMessage() {}

func (x *VipProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipProductReq.ProtoReflect.Descriptor instead.
func (*VipProductReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{219}
}

func (x *VipProductReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *VipProductReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VipProductReq) GetProducts() *common.VipProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *VipProductReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipProductRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode  rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg   string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Products []*common.VipProduct `protobuf:"bytes,3,rep,name=products,proto3" json:"products,omitempty"`
	Extra    map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipProductRes) Reset() {
	*x = VipProductRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipProductRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipProductRes) ProtoMessage() {}

func (x *VipProductRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipProductRes.ProtoReflect.Descriptor instead.
func (*VipProductRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{220}
}

func (x *VipProductRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *VipProductRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipProductRes) GetProducts() []*common.VipProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *VipProductRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *common.VipOrder  `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipPayReq) Reset() {
	*x = VipPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPayReq) ProtoMessage() {}

func (x *VipPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPayReq.ProtoReflect.Descriptor instead.
func (*VipPayReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{221}
}

func (x *VipPayReq) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipPayReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipPayRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Order   *common.VipOrder  `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipPayRes) Reset() {
	*x = VipPayRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPayRes) ProtoMessage() {}

func (x *VipPayRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPayRes.ProtoReflect.Descriptor instead.
func (*VipPayRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{222}
}

func (x *VipPayRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *VipPayRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipPayRes) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipPayRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipOrderStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *common.VipOrder  `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipOrderStatusReq) Reset() {
	*x = VipOrderStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipOrderStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipOrderStatusReq) ProtoMessage() {}

func (x *VipOrderStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipOrderStatusReq.ProtoReflect.Descriptor instead.
func (*VipOrderStatusReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{223}
}

func (x *VipOrderStatusReq) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipOrderStatusReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipOrderStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Order   *common.VipOrder  `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipOrderStatusRes) Reset() {
	*x = VipOrderStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipOrderStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipOrderStatusRes) ProtoMessage() {}

func (x *VipOrderStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipOrderStatusRes.ProtoReflect.Descriptor instead.
func (*VipOrderStatusRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{224}
}

func (x *VipOrderStatusRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *VipOrderStatusRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipOrderStatusRes) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipOrderStatusRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipOrderListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *common.VipOrder  `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Page  int32             `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipOrderListReq) Reset() {
	*x = VipOrderListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipOrderListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipOrderListReq) ProtoMessage() {}

func (x *VipOrderListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipOrderListReq.ProtoReflect.Descriptor instead.
func (*VipOrderListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{225}
}

func (x *VipOrderListReq) GetOrder() *common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipOrderListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *VipOrderListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VipOrderListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipOrderListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Order   []*common.VipOrder `protobuf:"bytes,3,rep,name=order,proto3" json:"order,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipOrderListRes) Reset() {
	*x = VipOrderListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipOrderListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipOrderListRes) ProtoMessage() {}

func (x *VipOrderListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipOrderListRes.ProtoReflect.Descriptor instead.
func (*VipOrderListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{226}
}

func (x *VipOrderListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *VipOrderListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipOrderListRes) GetOrder() []*common.VipOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *VipOrderListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserScoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  string            `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Op    int32             `protobuf:"varint,2,opt,name=op,proto3" json:"op,omitempty"` // 操作  0:获取 1:添加  2:更新
	Score *common.UserScore `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserScoreReq) Reset() {
	*x = UserScoreReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScoreReq) ProtoMessage() {}

func (x *UserScoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScoreReq.ProtoReflect.Descriptor instead.
func (*UserScoreReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{227}
}

func (x *UserScoreReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *UserScoreReq) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *UserScoreReq) GetScore() *common.UserScore {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *UserScoreReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserScoreRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Score   *common.UserScore `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserScoreRes) Reset() {
	*x = UserScoreRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScoreRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScoreRes) ProtoMessage() {}

func (x *UserScoreRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScoreRes.ProtoReflect.Descriptor instead.
func (*UserScoreRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{228}
}

func (x *UserScoreRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *UserScoreRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UserScoreRes) GetScore() *common.UserScore {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *UserScoreRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserVipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  string            `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Op    int32             `protobuf:"varint,2,opt,name=op,proto3" json:"op,omitempty"` // 操作  0:获取 1:添加/更新
	Vip   *common.UserVip   `protobuf:"bytes,3,opt,name=vip,proto3" json:"vip,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserVipReq) Reset() {
	*x = UserVipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVipReq) ProtoMessage() {}

func (x *UserVipReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVipReq.ProtoReflect.Descriptor instead.
func (*UserVipReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{229}
}

func (x *UserVipReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *UserVipReq) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *UserVipReq) GetVip() *common.UserVip {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *UserVipReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserVipRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Vip     *common.UserVip   `protobuf:"bytes,3,opt,name=vip,proto3" json:"vip,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserVipRes) Reset() {
	*x = UserVipRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVipRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVipRes) ProtoMessage() {}

func (x *UserVipRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVipRes.ProtoReflect.Descriptor instead.
func (*UserVipRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{230}
}

func (x *UserVipRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *UserVipRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UserVipRes) GetVip() *common.UserVip {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *UserVipRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipDescReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op    int32             `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"` // 操作  0:获取 1:添加/更新
	Desc  *common.VipDesc   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipDescReq) Reset() {
	*x = VipDescReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipDescReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipDescReq) ProtoMessage() {}

func (x *VipDescReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipDescReq.ProtoReflect.Descriptor instead.
func (*VipDescReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{231}
}

func (x *VipDescReq) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *VipDescReq) GetDesc() *common.VipDesc {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *VipDescReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type VipDescRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Desc    *common.VipDesc   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VipDescRes) Reset() {
	*x = VipDescRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipDescRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipDescRes) ProtoMessage() {}

func (x *VipDescRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipDescRes.ProtoReflect.Descriptor instead.
func (*VipDescRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{232}
}

func (x *VipDescRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *VipDescRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *VipDescRes) GetDesc() *common.VipDesc {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *VipDescRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FootLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op      int32             `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"` // 操作  0:获取 1:添加/更新
	FootLog *common.FootLog   `protobuf:"bytes,2,opt,name=foot_log,json=footLog,proto3" json:"foot_log,omitempty"`
	Page    int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Extra   map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FootLogReq) Reset() {
	*x = FootLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLogReq) ProtoMessage() {}

func (x *FootLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLogReq.ProtoReflect.Descriptor instead.
func (*FootLogReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{233}
}

func (x *FootLogReq) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *FootLogReq) GetFootLog() *common.FootLog {
	if x != nil {
		return x.FootLog
	}
	return nil
}

func (x *FootLogReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FootLogReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FootLogReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type FootLogRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Desc    []*common.FootLog `protobuf:"bytes,3,rep,name=desc,proto3" json:"desc,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FootLogRes) Reset() {
	*x = FootLogRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootLogRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootLogRes) ProtoMessage() {}

func (x *FootLogRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootLogRes.ProtoReflect.Descriptor instead.
func (*FootLogRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{234}
}

func (x *FootLogRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *FootLogRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *FootLogRes) GetDesc() []*common.FootLog {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *FootLogRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddExamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exam  *common.ExamItem  `protobuf:"bytes,1,opt,name=exam,proto3" json:"exam,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddExamReq) Reset() {
	*x = AddExamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExamReq) ProtoMessage() {}

func (x *AddExamReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExamReq.ProtoReflect.Descriptor instead.
func (*AddExamReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{235}
}

func (x *AddExamReq) GetExam() *common.ExamItem {
	if x != nil {
		return x.Exam
	}
	return nil
}

func (x *AddExamReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AddExamRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Desc    []*common.FootLog `protobuf:"bytes,3,rep,name=desc,proto3" json:"desc,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddExamRes) Reset() {
	*x = AddExamRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExamRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExamRes) ProtoMessage() {}

func (x *AddExamRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExamRes.ProtoReflect.Descriptor instead.
func (*AddExamRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{236}
}

func (x *AddExamRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AddExamRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AddExamRes) GetDesc() []*common.FootLog {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *AddExamRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ExamListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req   *common.ReqExam   `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	Extra map[string]string `protobuf:"bytes,2,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExamListReq) Reset() {
	*x = ExamListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamListReq) ProtoMessage() {}

func (x *ExamListReq) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamListReq.ProtoReflect.Descriptor instead.
func (*ExamListReq) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{237}
}

func (x *ExamListReq) GetReq() *common.ReqExam {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *ExamListReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ExamListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Exams   []*common.ExamItem `protobuf:"bytes,3,rep,name=exams,proto3" json:"exams,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExamListRes) Reset() {
	*x = ExamListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamListRes) ProtoMessage() {}

func (x *ExamListRes) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamListRes.ProtoReflect.Descriptor instead.
func (*ExamListRes) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{238}
}

func (x *ExamListRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *ExamListRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *ExamListRes) GetExams() []*common.ExamItem {
	if x != nil {
		return x.Exams
	}
	return nil
}

func (x *ExamListRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_datanode_proto protoreflect.FileDescriptor

var file_datanode_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x15, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x77, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x57, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x67, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x41, 0x74,
	0x22, 0x91, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x02, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x57, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x72, 0x65, 0x67, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x01, 0x0a,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x0c,
	0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a,
	0x0e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75,
	0x69, 0x64, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x75, 0x69, 0x64, 0x32, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a,
	0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75,
	0x69, 0x64, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x75, 0x69, 0x64, 0x32, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a,
	0x0e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x0a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x69,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x69,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x41, 0x74, 0x22, 0x5c,
	0x0a, 0x06, 0x46, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0xa0, 0x01, 0x0a,
	0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x22,
	0xe8, 0x01, 0x0a, 0x09, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2a,
	0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xcd, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc6, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75,
	0x69, 0x64, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x75, 0x69, 0x64, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xbf, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x75, 0x69, 0x64, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x75, 0x69, 0x64, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x37,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69,
	0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x69, 0x64, 0x31, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x6b, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3,
	0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6b,
	0x65, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01,
	0x0a, 0x0d, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x4c,
	0x69, 0x6b, 0x65, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a,
	0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9e, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x74, 0x6d, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe6, 0x01, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x02, 0x0a, 0x0f, 0x4e, 0x6f,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xee, 0x01, 0x0a,
	0x0f, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x01,
	0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x69,
	0x64, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x74, 0x6d, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x10, 0x4e, 0x6f,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a,
	0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x74, 0x6d, 0x6c,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x07, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x22, 0x50, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x0e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbc,
	0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xa3, 0x01,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x75, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x52, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x69, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x69, 0x72, 0x73, 0x22, 0x49, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x44, 0x69, 0x72, 0x52,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x0a, 0x41,
	0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x22, 0x91, 0x01, 0x0a, 0x0b, 0x46,
	0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82,
	0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a,
	0x0c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x22, 0x50, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x51, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x22, 0x22, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x67, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x4b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x51, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x22, 0xef, 0x01,
	0x0a, 0x0a, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2f, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x97, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x72, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x0e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x22, 0xf4, 0x01,
	0x0a, 0x0a, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xea, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x2c, 0x0a, 0x07, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x78, 0x69, 0x6e,
	0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8,
	0x01, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x54, 0x69,
	0x6d, 0x75, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x69,
	0x6d, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x74, 0x69, 0x6d, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x75, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x75, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x75, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x75,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d,
	0x75, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x75, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x54,
	0x69, 0x6d, 0x75, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x36,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x75, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe8, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x75, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x75, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x75, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x0a,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x35,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xbe, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x4a, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xee, 0x01, 0x0a,
	0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x26, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x75, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a,
	0x09, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x75, 0x22, 0xbc, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x79, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xee,
	0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xaf, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xdc, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf4, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x48, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x69,
	0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x22, 0xe2, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x10, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x01, 0x0a, 0x10, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x27, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf6, 0x01, 0x0a, 0x10, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x48, 0x6f, 0x6d, 0x65,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x0f, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a,
	0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x53, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x22, 0x6b, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x52, 0x6f, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf6, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x28,
	0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c,
	0x6c, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x54, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x22, 0x6c, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x01, 0x0a,
	0x12, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x3d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xb4,
	0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12,
	0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x99, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x13,
	0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xff, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbd, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xec, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc9, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55,
	0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x9d, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf8, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x62, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x53,
	0x65, 0x74, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x42,
	0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x42, 0x61,
	0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x0e,
	0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc3, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x05,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3b, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd1, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x75, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x75, 0x22, 0xda, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe9, 0x01, 0x0a,
	0x0a, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x05,
	0x74, 0x69, 0x6d, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x75, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x74, 0x69, 0x6d, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x64, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x41, 0x64, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x64, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x64, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0e, 0x54, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x56,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x54, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x56, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a,
	0x0e, 0x54, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x56, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x56, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x97, 0x01, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x56, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x76, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x56, 0x69, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x56, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x56, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a,
	0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x69, 0x64, 0x75, 0x44, 0x6f, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x01, 0x0a,
	0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x49, 0x69, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x49, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x01,
	0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xf4,
	0x01, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd1, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6d, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x6d, 0x6c, 0x6f, 0x6e, 0x67, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x07,
	0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x12, 0x3b, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x54,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x08, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x0f, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a,
	0x0f, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x6f, 0x63, 0x75,
	0x73, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x0d,
	0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x24,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x0e,
	0x4e, 0x6f, 0x74, 0x65, 0x42, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x67, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x42, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x65,
	0x42, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x42, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x4e,
	0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x63, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x65, 0x67, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf2, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x43, 0x65, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x65, 0x72, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xec, 0x01, 0x0a, 0x0d, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x38,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xff, 0x01, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x36, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb9, 0x01, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x0b,
	0x43, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x04,
	0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04,
	0x63, 0x65, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde,
	0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb9, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x24,
	0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x63, 0x72, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x01, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x69, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x69, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x35,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe6, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x26, 0x0a, 0x05, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x69,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x69,
	0x74, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x34, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6b, 0x67,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xbc, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x34,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6b, 0x67, 0x52,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9,
	0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x0a, 0x50, 0x6b,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50,
	0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe9, 0x01, 0x0a, 0x0a, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x6b, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6b, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x50, 0x6b, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x50, 0x6b, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x50, 0x6b, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6b, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb2, 0x01, 0x0a, 0x0d, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x01, 0x0a,
	0x0e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1,
	0x01, 0x0a, 0x0e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73,
	0x6f, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x0b, 0x56, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x76, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x56,
	0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf4, 0x01, 0x0a, 0x0d, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x56, 0x69, 0x70,
	0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56,
	0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4,
	0x01, 0x0a, 0x09, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x11,
	0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56,
	0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x01, 0x0a,
	0x0f, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xce, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x6f, 0x70, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xeb, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4,
	0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x21, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x52,
	0x03, 0x76, 0x69, 0x70, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x69, 0x70, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x56, 0x69,
	0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x35, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3,
	0x01, 0x0a, 0x0a, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x23,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69,
	0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x0a, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x66, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x0a, 0x46, 0x6f, 0x6f,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x35, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3,
	0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a,
	0x04, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x65,
	0x78, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6f, 0x74,
	0x4c, 0x6f, 0x67, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x0b, 0x45,
	0x78, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x36, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe8, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x12, 0x26, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xde, 0x3f, 0x0a, 0x0f, 0x44,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x4c, 0x69,
	0x6b, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6b,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08,
	0x4c, 0x69, 0x6b, 0x65, 0x73, 0x41, 0x64, 0x64, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x4c, 0x69, 0x6b, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x4e, 0x6f, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x74, 0x6d,
	0x6c, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x0c, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x64, 0x64, 0x12, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x69, 0x72, 0x4f, 0x6e, 0x65, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69,
	0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69,
	0x72, 0x41, 0x64, 0x64, 0x12, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x59, 0x75, 0x6e,
	0x53, 0x61, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x4b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x78, 0x69, 0x6e,
	0x67, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x75, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x16, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x75, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x11, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x75, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x75, 0x42, 0x79, 0x49, 0x64, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x75, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x75, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x75, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x75, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x75, 0x41, 0x64, 0x64, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x75, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x75, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x08, 0x4f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x74, 0x65, 0x1a, 0x19, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0e, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0d, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x12, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f,
	0x6c, 0x6c, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x44,
	0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x12, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x55, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x41,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x61,
	0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x69, 0x64, 0x75,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x42,
	0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x64, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x41, 0x64, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0b, 0x54, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x56, 0x69, 0x64, 0x12, 0x18,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x78, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x56, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x54, 0x69, 0x78, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x56, 0x69, 0x64, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79,
	0x56, 0x69, 0x64, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x56, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x79, 0x56, 0x69, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x49, 0x69, 0x64, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49,
	0x69, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x0c, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x54, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x4e, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x4e,
	0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x67, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x42, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x67, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x4e, 0x6f, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x4e,
	0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x17,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x08, 0x43, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x15, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x19,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x50,
	0x6b, 0x67, 0x12, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x34,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x50, 0x6b, 0x67, 0x12, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x6b, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x6b, 0x67, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x08, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6b, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a,
	0x0a, 0x08, 0x50, 0x6b, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6b, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x6b, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x53, 0x70,
	0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b,
	0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x08, 0x56, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0a, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x44,
	0x65, 0x73, 0x63, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x06, 0x56, 0x69, 0x70, 0x50,
	0x61, 0x79, 0x12, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69,
	0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c,
	0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x12, 0x14,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07,
	0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x45, 0x78, 0x61, 0x6d,
	0x12, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x09, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_datanode_proto_rawDescOnce sync.Once
	file_datanode_proto_rawDescData = file_datanode_proto_rawDesc
)

func file_datanode_proto_rawDescGZIP() []byte {
	file_datanode_proto_rawDescOnce.Do(func() {
		file_datanode_proto_rawDescData = protoimpl.X.CompressGZIP(file_datanode_proto_rawDescData)
	})
	return file_datanode_proto_rawDescData
}

var file_datanode_proto_msgTypes = make([]protoimpl.MessageInfo, 439)
var file_datanode_proto_goTypes = []interface{}{
	(*User)(nil),                      // 0: datanode.User
	(*UserInfoReq)(nil),               // 1: datanode.UserInfoReq
	(*NewUserReq)(nil),                // 2: datanode.NewUserReq
	(*SearchUserReq)(nil),             // 3: datanode.SearchUserReq
	(*SearchUserRes)(nil),             // 4: datanode.SearchUserRes
	(*UserRes)(nil),                   // 5: datanode.UserRes
	(*AddFriendReq)(nil),              // 6: datanode.AddFriendReq
	(*AddFriendRes)(nil),              // 7: datanode.AddFriendRes
	(*AgreeFriendReq)(nil),            // 8: datanode.AgreeFriendReq
	(*FriendsListReq)(nil),            // 9: datanode.FriendsListReq
	(*AgreeFriendRes)(nil),            // 10: datanode.AgreeFriendRes
	(*FriendItem)(nil),                // 11: datanode.FriendItem
	(*Fgroup)(nil),                    // 12: datanode.Fgroup
	(*Friend)(nil),                    // 13: datanode.friend
	(*FriendRes)(nil),                 // 14: datanode.FriendRes
	(*CreateGroupReq)(nil),            // 15: datanode.CreateGroupReq
	(*CreateGroupRes)(nil),            // 16: datanode.CreateGroupRes
	(*RenameGroupReq)(nil),            // 17: datanode.RenameGroupReq
	(*RenameGroupRes)(nil),            // 18: datanode.RenameGroupRes
	(*AddFriendNoteReq)(nil),          // 19: datanode.AddFriendNoteReq
	(*AddFriendNoteRes)(nil),          // 20: datanode.AddFriendNoteRes
	(*MoveGroupReq)(nil),              // 21: datanode.MoveGroupReq
	(*MoveGroupRes)(nil),              // 22: datanode.MoveGroupRes
	(*RemoveFriendReq)(nil),           // 23: datanode.RemoveFriendReq
	(*LikesCountReq)(nil),             // 24: datanode.LikesCountReq
	(*LikesAddReq)(nil),               // 25: datanode.LikesAddReq
	(*LikesListReq)(nil),              // 26: datanode.LikesListReq
	(*RemoveFriendRes)(nil),           // 27: datanode.RemoveFriendRes
	(*LikesCountRes)(nil),             // 28: datanode.LikesCountRes
	(*LikesAddRes)(nil),               // 29: datanode.LikesAddRes
	(*Likes)(nil),                     // 30: datanode.Likes
	(*LikesListRes)(nil),              // 31: datanode.LikesListRes
	(*UpdateNoteReq)(nil),             // 32: datanode.UpdateNoteReq
	(*NoteMetaRes)(nil),               // 33: datanode.NoteMetaRes
	(*NoteMetaListReq)(nil),           // 34: datanode.NoteMetaListReq
	(*NoteMetaListRes)(nil),           // 35: datanode.NoteMetaListRes
	(*NoteDataReq)(nil),               // 36: datanode.NoteDataReq
	(*NoteHtmlReq)(nil),               // 37: datanode.NoteHtmlReq
	(*NoteListCountRes)(nil),          // 38: datanode.NoteListCountRes
	(*NoteDataRes)(nil),               // 39: datanode.NoteDataRes
	(*NoteHtmlRes)(nil),               // 40: datanode.NoteHtmlRes
	(*MomentsCountReq)(nil),           // 41: datanode.MomentsCountReq
	(*MomentsCountRes)(nil),           // 42: datanode.MomentsCountRes
	(*Extra)(nil),                     // 43: datanode.Extra
	(*Moments)(nil),                   // 44: datanode.Moments
	(*AddMomentsRes)(nil),             // 45: datanode.AddMomentsRes
	(*MomentsListReq)(nil),            // 46: datanode.MomentsListReq
	(*MomentsListRes)(nil),            // 47: datanode.MomentsListRes
	(*FileItem)(nil),                  // 48: datanode.FileItem
	(*FileDirReq)(nil),                // 49: datanode.FileDirReq
	(*FileDirRes)(nil),                // 50: datanode.FileDirRes
	(*AddDirReq)(nil),                 // 51: datanode.AddDirReq
	(*AddDirRes)(nil),                 // 52: datanode.AddDirRes
	(*AddFileReq)(nil),                // 53: datanode.AddFileReq
	(*AddFileRes)(nil),                // 54: datanode.AddFileRes
	(*FileAttrReq)(nil),               // 55: datanode.FileAttrReq
	(*FileAttrRes)(nil),               // 56: datanode.FileAttrRes
	(*ThumbnailReq)(nil),              // 57: datanode.ThumbnailReq
	(*ThumbnailRes)(nil),              // 58: datanode.ThumbnailRes
	(*SetKeyvalueReq)(nil),            // 59: datanode.SetKeyvalueReq
	(*SetKeyvalueRes)(nil),            // 60: datanode.SetKeyvalueRes
	(*GetKeyvalueReq)(nil),            // 61: datanode.GetKeyvalueReq
	(*GetKeyvalueRes)(nil),            // 62: datanode.GetKeyvalueRes
	(*DelKeyvalueReq)(nil),            // 63: datanode.DelKeyvalueReq
	(*DelKeyvalueRes)(nil),            // 64: datanode.DelKeyvalueRes
	(*VersionRes)(nil),                // 65: datanode.VersionRes
	(*SubjectNameReq)(nil),            // 66: datanode.SubjectNameReq
	(*SubjectNameRes)(nil),            // 67: datanode.SubjectNameRes
	(*ChapterResItem)(nil),            // 68: datanode.ChapterResItem
	(*ChapterRes)(nil),                // 69: datanode.ChapterRes
	(*SourceRes)(nil),                 // 70: datanode.SourceRes
	(*TixingRes)(nil),                 // 71: datanode.TixingRes
	(*TimuCountRes)(nil),              // 72: datanode.TimuCountRes
	(*TimuAddReq)(nil),                // 73: datanode.TimuAddReq
	(*TimuAddRes)(nil),                // 74: datanode.TimuAddRes
	(*TimuRes)(nil),                   // 75: datanode.TimuRes
	(*TimuByIdReq)(nil),               // 76: datanode.TimuByIdReq
	(*TimuByIdRes)(nil),               // 77: datanode.TimuByIdRes
	(*CollectReq)(nil),                // 78: datanode.CollectReq
	(*CollectRes)(nil),                // 79: datanode.CollectRes
	(*CollectListReq)(nil),            // 80: datanode.CollectListReq
	(*CollectListRes)(nil),            // 81: datanode.CollectListRes
	(*ModifyReq)(nil),                 // 82: datanode.ModifyReq
	(*ModifyRes)(nil),                 // 83: datanode.ModifyRes
	(*ModifyListReq)(nil),             // 84: datanode.ModifyListReq
	(*ModifyListRes)(nil),             // 85: datanode.ModifyListRes
	(*ModifyCountReq)(nil),            // 86: datanode.ModifyCountReq
	(*ModifyCountRes)(nil),            // 87: datanode.ModifyCountRes
	(*ApproveReq)(nil),                // 88: datanode.ApproveReq
	(*ApproveRes)(nil),                // 89: datanode.ApproveRes
	(*SearchReq)(nil),                 // 90: datanode.SearchReq
	(*SearchRes)(nil),                 // 91: datanode.SearchRes
	(*AddGradeCateRes)(nil),           // 92: datanode.AddGradeCateRes
	(*GradeCateCountRes)(nil),         // 93: datanode.GradeCateCountRes
	(*GradeCateListReq)(nil),          // 94: datanode.GradeCateListReq
	(*GradeCateListRes)(nil),          // 95: datanode.GradeCateListRes
	(*HomeBlackDataRes)(nil),          // 96: datanode.HomeBlackDataRes
	(*GradeSubjectReq)(nil),           // 97: datanode.GradeSubjectReq
	(*GradeSubjectRes)(nil),           // 98: datanode.GradeSubjectRes
	(*SchoolRollAddRes)(nil),          // 99: datanode.SchoolRollAddRes
	(*SchoolRollCountRes)(nil),        // 100: datanode.SchoolRollCountRes
	(*SchoolRollListReq)(nil),         // 101: datanode.SchoolRollListReq
	(*SchoolRollListRes)(nil),         // 102: datanode.SchoolRollListRes
	(*SubjectCateAddRes)(nil),         // 103: datanode.SubjectCateAddRes
	(*SubjectCateCountRes)(nil),       // 104: datanode.SubjectCateCountRes
	(*SubjectCateListReq)(nil),        // 105: datanode.SubjectCateListReq
	(*SubjectCateListRes)(nil),        // 106: datanode.SubjectCateListRes
	(*AttentionItem)(nil),             // 107: datanode.AttentionItem
	(*AddAttentionReq)(nil),           // 108: datanode.AddAttentionReq
	(*AddAttentionRes)(nil),           // 109: datanode.AddAttentionRes
	(*DelAttentionReq)(nil),           // 110: datanode.DelAttentionReq
	(*DelAttentionRes)(nil),           // 111: datanode.DelAttentionRes
	(*GetAttentionReq)(nil),           // 112: datanode.GetAttentionReq
	(*GetAttentionRes)(nil),           // 113: datanode.GetAttentionRes
	(*AddUserAttentionReq)(nil),       // 114: datanode.AddUserAttentionReq
	(*AddUserAttentionRes)(nil),       // 115: datanode.AddUserAttentionRes
	(*GetUserAttentionReq)(nil),       // 116: datanode.GetUserAttentionReq
	(*GetUserAttentionRes)(nil),       // 117: datanode.GetUserAttentionRes
	(*DelUserAttentionReq)(nil),       // 118: datanode.DelUserAttentionReq
	(*DelUserAttentionRes)(nil),       // 119: datanode.DelUserAttentionRes
	(*SetUserInfoReq)(nil),            // 120: datanode.SetUserInfoReq
	(*SetUserInfoRes)(nil),            // 121: datanode.SetUserInfoRes
	(*GetUserInfoReq)(nil),            // 122: datanode.GetUserInfoReq
	(*GetUserInfoRes)(nil),            // 123: datanode.GetUserInfoRes
	(*SetWechatUinfoReq)(nil),         // 124: datanode.SetWechatUinfoReq
	(*SetWechatUinfoRes)(nil),         // 125: datanode.SetWechatUinfoRes
	(*GetWechatUinfoReq)(nil),         // 126: datanode.GetWechatUinfoReq
	(*GetWechatUinfoRes)(nil),         // 127: datanode.GetWechatUinfoRes
	(*SetAlipayUinfoReq)(nil),         // 128: datanode.SetAlipayUinfoReq
	(*SetAlipayUinfoRes)(nil),         // 129: datanode.SetAlipayUinfoRes
	(*GetAlipayUinfoReq)(nil),         // 130: datanode.GetAlipayUinfoReq
	(*GetAlipayUinfoRes)(nil),         // 131: datanode.GetAlipayUinfoRes
	(*SetBaiduEntityReq)(nil),         // 132: datanode.SetBaiduEntityReq
	(*SetBaiduEntityRes)(nil),         // 133: datanode.SetBaiduEntityRes
	(*BaiduEntityReq)(nil),            // 134: datanode.BaiduEntityReq
	(*BaiduEntityRes)(nil),            // 135: datanode.BaiduEntityRes
	(*SearchItemReq)(nil),             // 136: datanode.SearchItemReq
	(*SearchItemRes)(nil),             // 137: datanode.SearchItemRes
	(*SearchHistoryReq)(nil),          // 138: datanode.SearchHistoryReq
	(*SearchHistoryRes)(nil),          // 139: datanode.SearchHistoryRes
	(*RefreshModifyRewardReq)(nil),    // 140: datanode.RefreshModifyRewardReq
	(*RefreshModifyRewardRes)(nil),    // 141: datanode.RefreshModifyRewardRes
	(*RefreshUserCoinReq)(nil),        // 142: datanode.RefreshUserCoinReq
	(*RefreshUserCoinRes)(nil),        // 143: datanode.RefreshUserCoinRes
	(*AddQuestionReq)(nil),            // 144: datanode.AddQuestionReq
	(*AddQuestionRes)(nil),            // 145: datanode.AddQuestionRes
	(*AddListReq)(nil),                // 146: datanode.AddListReq
	(*AddListRes)(nil),                // 147: datanode.AddListRes
	(*AddCountReq)(nil),               // 148: datanode.AddCountReq
	(*AddCountRes)(nil),               // 149: datanode.AddCountRes
	(*RefreshAddRewardReq)(nil),       // 150: datanode.RefreshAddRewardReq
	(*RefreshAddRewardRes)(nil),       // 151: datanode.RefreshAddRewardRes
	(*TixingByVidReq)(nil),            // 152: datanode.TixingByVidReq
	(*TixingByVidRes)(nil),            // 153: datanode.TixingByVidRes
	(*SourceByVidReq)(nil),            // 154: datanode.SourceByVidReq
	(*SourceByVidRes)(nil),            // 155: datanode.SourceByVidRes
	(*IdentAddReq)(nil),               // 156: datanode.IdentAddReq
	(*IdentAddRes)(nil),               // 157: datanode.IdentAddRes
	(*IdentByIidReq)(nil),             // 158: datanode.IdentByIidReq
	(*IdentByIidRes)(nil),             // 159: datanode.IdentByIidRes
	(*IdentListReq)(nil),              // 160: datanode.IdentListReq
	(*IdentListRes)(nil),              // 161: datanode.IdentListRes
	(*IdentCountReq)(nil),             // 162: datanode.IdentCountReq
	(*IdentCountRes)(nil),             // 163: datanode.IdentCountRes
	(*RefreshIdentRewardReq)(nil),     // 164: datanode.RefreshIdentRewardReq
	(*RefreshIdentRewardRes)(nil),     // 165: datanode.RefreshIdentRewardRes
	(*TeacherItem)(nil),               // 166: datanode.TeacherItem
	(*UpdateTeacherReq)(nil),          // 167: datanode.UpdateTeacherReq
	(*UpdateTeacherRes)(nil),          // 168: datanode.UpdateTeacherRes
	(*FindTeacherReq)(nil),            // 169: datanode.FindTeacherReq
	(*FindTeacherRes)(nil),            // 170: datanode.FindTeacherRes
	(*FocusTeacherReq)(nil),           // 171: datanode.FocusTeacherReq
	(*FocusTeacherRes)(nil),           // 172: datanode.FocusTeacherRes
	(*NoteCooperReq)(nil),             // 173: datanode.NoteCooperReq
	(*NoteCooperRes)(nil),             // 174: datanode.NoteCooperRes
	(*NoteTagReq)(nil),                // 175: datanode.NoteTagReq
	(*NoteTagRes)(nil),                // 176: datanode.NoteTagRes
	(*NoteBgcolorReq)(nil),            // 177: datanode.NoteBgcolorReq
	(*NoteBgcolorRes)(nil),            // 178: datanode.NoteBgcolorRes
	(*NoteTagAddReq)(nil),             // 179: datanode.NoteTagAddReq
	(*NoteTagAddRes)(nil),             // 180: datanode.NoteTagAddRes
	(*NoteTagListReq)(nil),            // 181: datanode.NoteTagListReq
	(*NoteTagListRes)(nil),            // 182: datanode.NoteTagListRes
	(*SubmitCertReq)(nil),             // 183: datanode.SubmitCertReq
	(*SubmitCertRes)(nil),             // 184: datanode.SubmitCertRes
	(*CertStatusReq)(nil),             // 185: datanode.CertStatusReq
	(*CertStatusRes)(nil),             // 186: datanode.CertStatusRes
	(*CertInfoReq)(nil),               // 187: datanode.CertInfoReq
	(*CertInfoRes)(nil),               // 188: datanode.CertInfoRes
	(*CertFlowReq)(nil),               // 189: datanode.CertFlowReq
	(*CertFlowRes)(nil),               // 190: datanode.CertFlowRes
	(*AddUserLogReq)(nil),             // 191: datanode.AddUserLogReq
	(*AddUserLogRes)(nil),             // 192: datanode.AddUserLogRes
	(*QueryUserLogReq)(nil),           // 193: datanode.QueryUserLogReq
	(*QueryUserLogRes)(nil),           // 194: datanode.QueryUserLogRes
	(*UserLogCountReq)(nil),           // 195: datanode.UserLogCountReq
	(*UserLogCountRes)(nil),           // 196: datanode.UserLogCountRes
	(*AddTaskReq)(nil),                // 197: datanode.AddTaskReq
	(*AddTaskRes)(nil),                // 198: datanode.AddTaskRes
	(*GetTaskReq)(nil),                // 199: datanode.GetTaskReq
	(*GetTaskRes)(nil),                // 200: datanode.GetTaskRes
	(*GetTaskCountReq)(nil),           // 201: datanode.GetTaskCountReq
	(*GetTaskCountRes)(nil),           // 202: datanode.GetTaskCountRes
	(*UpdateUserinfoReq)(nil),         // 203: datanode.UpdateUserinfoReq
	(*UpdateUserinfoRes)(nil),         // 204: datanode.UpdateUserinfoRes
	(*AddPkgReq)(nil),                 // 205: datanode.AddPkgReq
	(*AddPkgRes)(nil),                 // 206: datanode.AddPkgRes
	(*DelPkgReq)(nil),                 // 207: datanode.DelPkgReq
	(*DelPkgRes)(nil),                 // 208: datanode.DelPkgRes
	(*PkgListReq)(nil),                // 209: datanode.PkgListReq
	(*PkgListRes)(nil),                // 210: datanode.PkgListRes
	(*PkgCountReq)(nil),               // 211: datanode.PkgCountReq
	(*PkgCountRes)(nil),               // 212: datanode.PkgCountRes
	(*SponsorAddReq)(nil),             // 213: datanode.SponsorAddReq
	(*SponsorAddRes)(nil),             // 214: datanode.SponsorAddRes
	(*SponsorListReq)(nil),            // 215: datanode.SponsorListReq
	(*SponsorListRes)(nil),            // 216: datanode.SponsorListRes
	(*VipLimitReq)(nil),               // 217: datanode.VipLimitReq
	(*VipLimitRes)(nil),               // 218: datanode.VipLimitRes
	(*VipProductReq)(nil),             // 219: datanode.VipProductReq
	(*VipProductRes)(nil),             // 220: datanode.VipProductRes
	(*VipPayReq)(nil),                 // 221: datanode.VipPayReq
	(*VipPayRes)(nil),                 // 222: datanode.VipPayRes
	(*VipOrderStatusReq)(nil),         // 223: datanode.VipOrderStatusReq
	(*VipOrderStatusRes)(nil),         // 224: datanode.VipOrderStatusRes
	(*VipOrderListReq)(nil),           // 225: datanode.VipOrderListReq
	(*VipOrderListRes)(nil),           // 226: datanode.VipOrderListRes
	(*UserScoreReq)(nil),              // 227: datanode.UserScoreReq
	(*UserScoreRes)(nil),              // 228: datanode.UserScoreRes
	(*UserVipReq)(nil),                // 229: datanode.UserVipReq
	(*UserVipRes)(nil),                // 230: datanode.UserVipRes
	(*VipDescReq)(nil),                // 231: datanode.VipDescReq
	(*VipDescRes)(nil),                // 232: datanode.VipDescRes
	(*FootLogReq)(nil),                // 233: datanode.FootLogReq
	(*FootLogRes)(nil),                // 234: datanode.FootLogRes
	(*AddExamReq)(nil),                // 235: datanode.AddExamReq
	(*AddExamRes)(nil),                // 236: datanode.AddExamRes
	(*ExamListReq)(nil),               // 237: datanode.ExamListReq
	(*ExamListRes)(nil),               // 238: datanode.ExamListRes
	nil,                               // 239: datanode.UserInfoReq.ExtraEntry
	nil,                               // 240: datanode.NewUserReq.ExtraEntry
	nil,                               // 241: datanode.SearchUserReq.ExtraEntry
	nil,                               // 242: datanode.SearchUserRes.ExtraEntry
	nil,                               // 243: datanode.UserRes.ExtraEntry
	nil,                               // 244: datanode.AddFriendReq.ExtraEntry
	nil,                               // 245: datanode.AddFriendRes.ExtraEntry
	nil,                               // 246: datanode.AgreeFriendReq.ExtraEntry
	nil,                               // 247: datanode.FriendsListReq.ExtraEntry
	nil,                               // 248: datanode.AgreeFriendRes.ExtraEntry
	nil,                               // 249: datanode.FriendRes.ExtraEntry
	nil,                               // 250: datanode.CreateGroupReq.ExtraEntry
	nil,                               // 251: datanode.CreateGroupRes.ExtraEntry
	nil,                               // 252: datanode.RenameGroupReq.ExtraEntry
	nil,                               // 253: datanode.RenameGroupRes.ExtraEntry
	nil,                               // 254: datanode.AddFriendNoteReq.ExtraEntry
	nil,                               // 255: datanode.AddFriendNoteRes.ExtraEntry
	nil,                               // 256: datanode.MoveGroupReq.ExtraEntry
	nil,                               // 257: datanode.MoveGroupRes.ExtraEntry
	nil,                               // 258: datanode.RemoveFriendReq.ExtraEntry
	nil,                               // 259: datanode.LikesCountReq.ExtraEntry
	nil,                               // 260: datanode.LikesAddReq.ExtraEntry
	nil,                               // 261: datanode.LikesListReq.ExtraEntry
	nil,                               // 262: datanode.RemoveFriendRes.ExtraEntry
	nil,                               // 263: datanode.LikesCountRes.ExtraEntry
	nil,                               // 264: datanode.LikesAddRes.ExtraEntry
	nil,                               // 265: datanode.LikesListRes.ExtraEntry
	nil,                               // 266: datanode.UpdateNoteReq.ExtraEntry
	nil,                               // 267: datanode.NoteMetaRes.ExtraEntry
	nil,                               // 268: datanode.NoteMetaListReq.ExtraEntry
	nil,                               // 269: datanode.NoteMetaListRes.ExtraEntry
	nil,                               // 270: datanode.NoteDataReq.ExtraEntry
	nil,                               // 271: datanode.NoteHtmlReq.ExtraEntry
	nil,                               // 272: datanode.NoteListCountRes.ExtraEntry
	nil,                               // 273: datanode.NoteDataRes.ExtraEntry
	nil,                               // 274: datanode.NoteHtmlRes.ExtraEntry
	nil,                               // 275: datanode.MomentsCountReq.ExtraEntry
	nil,                               // 276: datanode.MomentsCountRes.ExtraEntry
	nil,                               // 277: datanode.MomentsListReq.ExtraEntry
	nil,                               // 278: datanode.FileDirReq.ExtraEntry
	nil,                               // 279: datanode.FileAttrReq.ExtraEntry
	nil,                               // 280: datanode.ThumbnailReq.ExtraEntry
	nil,                               // 281: datanode.VersionRes.ExtraEntry
	nil,                               // 282: datanode.SubjectNameReq.ExtraEntry
	nil,                               // 283: datanode.SubjectNameRes.ExtraEntry
	nil,                               // 284: datanode.ChapterRes.ExtraEntry
	nil,                               // 285: datanode.SourceRes.ExtraEntry
	nil,                               // 286: datanode.TixingRes.ExtraEntry
	nil,                               // 287: datanode.TimuCountRes.ExtraEntry
	nil,                               // 288: datanode.TimuAddReq.ExtraEntry
	nil,                               // 289: datanode.TimuAddRes.ExtraEntry
	nil,                               // 290: datanode.TimuRes.ExtraEntry
	nil,                               // 291: datanode.TimuByIdReq.ExtraEntry
	nil,                               // 292: datanode.TimuByIdRes.ExtraEntry
	nil,                               // 293: datanode.CollectReq.ExtraEntry
	nil,                               // 294: datanode.CollectRes.ExtraEntry
	nil,                               // 295: datanode.CollectListRes.ExtraEntry
	nil,                               // 296: datanode.ModifyRes.ExtraEntry
	nil,                               // 297: datanode.ModifyListRes.ExtraEntry
	nil,                               // 298: datanode.ModifyCountReq.ExtraEntry
	nil,                               // 299: datanode.ModifyCountRes.ExtraEntry
	nil,                               // 300: datanode.ApproveReq.ExtraEntry
	nil,                               // 301: datanode.ApproveRes.ExtraEntry
	nil,                               // 302: datanode.SearchRes.ExtraEntry
	nil,                               // 303: datanode.GradeCateCountRes.ExtraEntry
	nil,                               // 304: datanode.GradeCateListReq.ExtraEntry
	nil,                               // 305: datanode.GradeCateListRes.ExtraEntry
	nil,                               // 306: datanode.HomeBlackDataRes.ExtraEntry
	nil,                               // 307: datanode.GradeSubjectReq.ExtraEntry
	nil,                               // 308: datanode.GradeSubjectRes.ExtraEntry
	nil,                               // 309: datanode.SchoolRollListReq.ExtraEntry
	nil,                               // 310: datanode.SchoolRollListRes.ExtraEntry
	nil,                               // 311: datanode.SubjectCateListReq.ExtraEntry
	nil,                               // 312: datanode.SubjectCateListRes.ExtraEntry
	nil,                               // 313: datanode.AddAttentionReq.ExtraEntry
	nil,                               // 314: datanode.AddAttentionRes.ExtraEntry
	nil,                               // 315: datanode.DelAttentionReq.ExtraEntry
	nil,                               // 316: datanode.DelAttentionRes.ExtraEntry
	nil,                               // 317: datanode.GetAttentionReq.ExtraEntry
	nil,                               // 318: datanode.GetAttentionRes.ExtraEntry
	nil,                               // 319: datanode.AddUserAttentionReq.ExtraEntry
	nil,                               // 320: datanode.AddUserAttentionRes.ExtraEntry
	nil,                               // 321: datanode.GetUserAttentionReq.ExtraEntry
	nil,                               // 322: datanode.GetUserAttentionRes.ExtraEntry
	nil,                               // 323: datanode.DelUserAttentionReq.ExtraEntry
	nil,                               // 324: datanode.DelUserAttentionRes.ExtraEntry
	nil,                               // 325: datanode.SetUserInfoReq.ExtraEntry
	nil,                               // 326: datanode.SetUserInfoRes.ExtraEntry
	nil,                               // 327: datanode.GetUserInfoReq.ExtraEntry
	nil,                               // 328: datanode.GetUserInfoRes.ExtraEntry
	nil,                               // 329: datanode.SetWechatUinfoReq.ExtraEntry
	nil,                               // 330: datanode.SetWechatUinfoRes.ExtraEntry
	nil,                               // 331: datanode.GetWechatUinfoReq.ExtraEntry
	nil,                               // 332: datanode.GetWechatUinfoRes.ExtraEntry
	nil,                               // 333: datanode.SetAlipayUinfoReq.ExtraEntry
	nil,                               // 334: datanode.SetAlipayUinfoRes.ExtraEntry
	nil,                               // 335: datanode.GetAlipayUinfoReq.ExtraEntry
	nil,                               // 336: datanode.GetAlipayUinfoRes.ExtraEntry
	nil,                               // 337: datanode.SetBaiduEntityReq.ExtraEntry
	nil,                               // 338: datanode.SetBaiduEntityRes.ExtraEntry
	nil,                               // 339: datanode.BaiduEntityReq.ExtraEntry
	nil,                               // 340: datanode.BaiduEntityRes.ExtraEntry
	nil,                               // 341: datanode.SearchItemReq.ExtraEntry
	nil,                               // 342: datanode.SearchItemRes.ExtraEntry
	nil,                               // 343: datanode.SearchHistoryReq.ExtraEntry
	nil,                               // 344: datanode.SearchHistoryRes.ExtraEntry
	nil,                               // 345: datanode.RefreshModifyRewardReq.ExtraEntry
	nil,                               // 346: datanode.RefreshModifyRewardRes.ExtraEntry
	nil,                               // 347: datanode.RefreshUserCoinReq.ExtraEntry
	nil,                               // 348: datanode.RefreshUserCoinRes.ExtraEntry
	nil,                               // 349: datanode.AddQuestionRes.ExtraEntry
	nil,                               // 350: datanode.AddListRes.ExtraEntry
	nil,                               // 351: datanode.AddCountReq.ExtraEntry
	nil,                               // 352: datanode.AddCountRes.ExtraEntry
	nil,                               // 353: datanode.RefreshAddRewardReq.ExtraEntry
	nil,                               // 354: datanode.RefreshAddRewardRes.ExtraEntry
	nil,                               // 355: datanode.TixingByVidReq.ExtraEntry
	nil,                               // 356: datanode.TixingByVidRes.ExtraEntry
	nil,                               // 357: datanode.SourceByVidReq.ExtraEntry
	nil,                               // 358: datanode.SourceByVidRes.ExtraEntry
	nil,                               // 359: datanode.IdentAddReq.ExtraEntry
	nil,                               // 360: datanode.IdentAddRes.ExtraEntry
	nil,                               // 361: datanode.IdentByIidReq.ExtraEntry
	nil,                               // 362: datanode.IdentByIidRes.ExtraEntry
	nil,                               // 363: datanode.IdentListRes.ExtraEntry
	nil,                               // 364: datanode.IdentCountReq.ExtraEntry
	nil,                               // 365: datanode.IdentCountRes.ExtraEntry
	nil,                               // 366: datanode.RefreshIdentRewardReq.ExtraEntry
	nil,                               // 367: datanode.RefreshIdentRewardRes.ExtraEntry
	nil,                               // 368: datanode.UpdateTeacherReq.ExtraEntry
	nil,                               // 369: datanode.UpdateTeacherRes.ExtraEntry
	nil,                               // 370: datanode.FindTeacherRes.ExtraEntry
	nil,                               // 371: datanode.FocusTeacherReq.ExtraEntry
	nil,                               // 372: datanode.FocusTeacherRes.ExtraEntry
	nil,                               // 373: datanode.NoteCooperReq.ExtraEntry
	nil,                               // 374: datanode.NoteCooperRes.ExtraEntry
	nil,                               // 375: datanode.NoteTagReq.ExtraEntry
	nil,                               // 376: datanode.NoteTagRes.ExtraEntry
	nil,                               // 377: datanode.NoteBgcolorReq.ExtraEntry
	nil,                               // 378: datanode.NoteBgcolorRes.ExtraEntry
	nil,                               // 379: datanode.NoteTagAddReq.ExtraEntry
	nil,                               // 380: datanode.NoteTagAddRes.ExtraEntry
	nil,                               // 381: datanode.NoteTagListReq.ExtraEntry
	nil,                               // 382: datanode.NoteTagListRes.ExtraEntry
	nil,                               // 383: datanode.SubmitCertReq.ExtraEntry
	nil,                               // 384: datanode.SubmitCertRes.ExtraEntry
	nil,                               // 385: datanode.CertStatusReq.ExtraEntry
	nil,                               // 386: datanode.CertStatusRes.ExtraEntry
	nil,                               // 387: datanode.CertInfoReq.ExtraEntry
	nil,                               // 388: datanode.CertInfoRes.ExtraEntry
	nil,                               // 389: datanode.CertFlowReq.ExtraEntry
	nil,                               // 390: datanode.CertFlowRes.ExtraEntry
	nil,                               // 391: datanode.AddUserLogReq.ExtraEntry
	nil,                               // 392: datanode.AddUserLogRes.ExtraEntry
	nil,                               // 393: datanode.QueryUserLogReq.ExtraEntry
	nil,                               // 394: datanode.QueryUserLogRes.ExtraEntry
	nil,                               // 395: datanode.UserLogCountReq.ExtraEntry
	nil,                               // 396: datanode.UserLogCountRes.ExtraEntry
	nil,                               // 397: datanode.AddTaskReq.ExtraEntry
	nil,                               // 398: datanode.AddTaskRes.ExtraEntry
	nil,                               // 399: datanode.GetTaskReq.ExtraEntry
	nil,                               // 400: datanode.GetTaskRes.ExtraEntry
	nil,                               // 401: datanode.GetTaskCountReq.ExtraEntry
	nil,                               // 402: datanode.GetTaskCountRes.ExtraEntry
	nil,                               // 403: datanode.UpdateUserinfoReq.ExtraEntry
	nil,                               // 404: datanode.UpdateUserinfoRes.ExtraEntry
	nil,                               // 405: datanode.AddPkgReq.ExtraEntry
	nil,                               // 406: datanode.AddPkgRes.ExtraEntry
	nil,                               // 407: datanode.DelPkgReq.ExtraEntry
	nil,                               // 408: datanode.DelPkgRes.ExtraEntry
	nil,                               // 409: datanode.PkgListReq.ExtraEntry
	nil,                               // 410: datanode.PkgListRes.ExtraEntry
	nil,                               // 411: datanode.PkgCountReq.ExtraEntry
	nil,                               // 412: datanode.PkgCountRes.ExtraEntry
	nil,                               // 413: datanode.SponsorAddReq.ExtraEntry
	nil,                               // 414: datanode.SponsorAddRes.ExtraEntry
	nil,                               // 415: datanode.SponsorListReq.ExtraEntry
	nil,                               // 416: datanode.SponsorListRes.ExtraEntry
	nil,                               // 417: datanode.VipLimitReq.ExtraEntry
	nil,                               // 418: datanode.VipLimitRes.ExtraEntry
	nil,                               // 419: datanode.VipProductReq.ExtraEntry
	nil,                               // 420: datanode.VipProductRes.ExtraEntry
	nil,                               // 421: datanode.VipPayReq.ExtraEntry
	nil,                               // 422: datanode.VipPayRes.ExtraEntry
	nil,                               // 423: datanode.VipOrderStatusReq.ExtraEntry
	nil,                               // 424: datanode.VipOrderStatusRes.ExtraEntry
	nil,                               // 425: datanode.VipOrderListReq.ExtraEntry
	nil,                               // 426: datanode.VipOrderListRes.ExtraEntry
	nil,                               // 427: datanode.UserScoreReq.ExtraEntry
	nil,                               // 428: datanode.UserScoreRes.ExtraEntry
	nil,                               // 429: datanode.UserVipReq.ExtraEntry
	nil,                               // 430: datanode.UserVipRes.ExtraEntry
	nil,                               // 431: datanode.VipDescReq.ExtraEntry
	nil,                               // 432: datanode.VipDescRes.ExtraEntry
	nil,                               // 433: datanode.FootLogReq.ExtraEntry
	nil,                               // 434: datanode.FootLogRes.ExtraEntry
	nil,                               // 435: datanode.AddExamReq.ExtraEntry
	nil,                               // 436: datanode.AddExamRes.ExtraEntry
	nil,                               // 437: datanode.ExamListReq.ExtraEntry
	nil,                               // 438: datanode.ExamListRes.ExtraEntry
	(rescode.Code)(0),                 // 439: rescode.Code
	(*common.NoteMeta)(nil),           // 440: common.NoteMeta
	(*common.VersionItem)(nil),        // 441: common.VersionItem
	(*common.ChapterItem)(nil),        // 442: common.ChapterItem
	(*common.SourceItem)(nil),         // 443: common.SourceItem
	(*common.TixingItem)(nil),         // 444: common.TixingItem
	(*common.AddTimuItem)(nil),        // 445: common.AddTimuItem
	(*common.TimuItem)(nil),           // 446: common.TimuItem
	(*common.Question)(nil),           // 447: common.Question
	(*common.ModifyItem)(nil),         // 448: common.ModifyItem
	(common.ApproveDest)(0),           // 449: common.ApproveDest
	(common.SearchTyle)(0),            // 450: common.SearchTyle
	(*common.SearchHitsTotal)(nil),    // 451: common.SearchHitsTotal
	(*common.SearchHitsItem)(nil),     // 452: common.SearchHitsItem
	(*common.GradeCate)(nil),          // 453: common.GradeCate
	(*common.SchoolStatic)(nil),       // 454: common.SchoolStatic
	(*common.GradeSubject)(nil),       // 455: common.GradeSubject
	(*common.SchoolRoll)(nil),         // 456: common.SchoolRoll
	(*common.SubjectCate)(nil),        // 457: common.SubjectCate
	(*common.UserInfo)(nil),           // 458: common.UserInfo
	(*common.WechatUserinfo)(nil),     // 459: common.WechatUserinfo
	(*common.AlipayUserinfo)(nil),     // 460: common.AlipayUserinfo
	(*common.BaiduEntity)(nil),        // 461: common.BaiduEntity
	(*common.SearchHistoryItem)(nil),  // 462: common.SearchHistoryItem
	(*common.BaiduDocAnalysis)(nil),   // 463: common.BaiduDocAnalysis
	(*common.BaiduIdentItem)(nil),     // 464: common.BaiduIdentItem
	(*common.NoteTag)(nil),            // 465: common.NoteTag
	(*common.PersonCert)(nil),         // 466: common.PersonCert
	(*common.UserLog)(nil),            // 467: common.UserLog
	(*common.CronItem)(nil),           // 468: common.CronItem
	(*common.UpdateUserinfoItem)(nil), // 469: common.UpdateUserinfoItem
	(*common.PkgItem)(nil),            // 470: common.PkgItem
	(*common.SponsorItem)(nil),        // 471: common.SponsorItem
	(*common.VipProduct)(nil),         // 472: common.VipProduct
	(*common.VipOrder)(nil),           // 473: common.VipOrder
	(*common.UserScore)(nil),          // 474: common.UserScore
	(*common.UserVip)(nil),            // 475: common.UserVip
	(*common.VipDesc)(nil),            // 476: common.VipDesc
	(*common.FootLog)(nil),            // 477: common.FootLog
	(*common.ExamItem)(nil),           // 478: common.ExamItem
	(*common.ReqExam)(nil),            // 479: common.ReqExam
	(*common.QuestionQuery)(nil),      // 480: common.QuestionQuery
	(*common.Request)(nil),            // 481: common.Request
}
var file_datanode_proto_depIdxs = []int32{
	239, // 0: datanode.UserInfoReq.extra:type_name -> datanode.UserInfoReq.ExtraEntry
	240, // 1: datanode.NewUserReq.extra:type_name -> datanode.NewUserReq.ExtraEntry
	241, // 2: datanode.SearchUserReq.extra:type_name -> datanode.SearchUserReq.ExtraEntry
	0,   // 3: datanode.SearchUserRes.users:type_name -> datanode.User
	242, // 4: datanode.SearchUserRes.extra:type_name -> datanode.SearchUserRes.ExtraEntry
	439, // 5: datanode.UserRes.rescode:type_name -> rescode.Code
	0,   // 6: datanode.UserRes.user:type_name -> datanode.User
	243, // 7: datanode.UserRes.extra:type_name -> datanode.UserRes.ExtraEntry
	244, // 8: datanode.AddFriendReq.extra:type_name -> datanode.AddFriendReq.ExtraEntry
	439, // 9: datanode.AddFriendRes.rescode:type_name -> rescode.Code
	245, // 10: datanode.AddFriendRes.extra:type_name -> datanode.AddFriendRes.ExtraEntry
	246, // 11: datanode.AgreeFriendReq.extra:type_name -> datanode.AgreeFriendReq.ExtraEntry
	247, // 12: datanode.FriendsListReq.extra:type_name -> datanode.FriendsListReq.ExtraEntry
	439, // 13: datanode.AgreeFriendRes.rescode:type_name -> rescode.Code
	248, // 14: datanode.AgreeFriendRes.extra:type_name -> datanode.AgreeFriendRes.ExtraEntry
	11,  // 15: datanode.Fgroup.lists:type_name -> datanode.FriendItem
	12,  // 16: datanode.friend.data:type_name -> datanode.Fgroup
	11,  // 17: datanode.friend.invite:type_name -> datanode.FriendItem
	11,  // 18: datanode.friend.blacks:type_name -> datanode.FriendItem
	439, // 19: datanode.FriendRes.rescode:type_name -> rescode.Code
	13,  // 20: datanode.FriendRes.friends:type_name -> datanode.friend
	249, // 21: datanode.FriendRes.extra:type_name -> datanode.FriendRes.ExtraEntry
	250, // 22: datanode.CreateGroupReq.extra:type_name -> datanode.CreateGroupReq.ExtraEntry
	439, // 23: datanode.CreateGroupRes.rescode:type_name -> rescode.Code
	251, // 24: datanode.CreateGroupRes.extra:type_name -> datanode.CreateGroupRes.ExtraEntry
	252, // 25: datanode.RenameGroupReq.extra:type_name -> datanode.RenameGroupReq.ExtraEntry
	439, // 26: datanode.RenameGroupRes.rescode:type_name -> rescode.Code
	253, // 27: datanode.RenameGroupRes.extra:type_name -> datanode.RenameGroupRes.ExtraEntry
	254, // 28: datanode.AddFriendNoteReq.extra:type_name -> datanode.AddFriendNoteReq.ExtraEntry
	439, // 29: datanode.AddFriendNoteRes.rescode:type_name -> rescode.Code
	255, // 30: datanode.AddFriendNoteRes.extra:type_name -> datanode.AddFriendNoteRes.ExtraEntry
	256, // 31: datanode.MoveGroupReq.extra:type_name -> datanode.MoveGroupReq.ExtraEntry
	439, // 32: datanode.MoveGroupRes.rescode:type_name -> rescode.Code
	257, // 33: datanode.MoveGroupRes.extra:type_name -> datanode.MoveGroupRes.ExtraEntry
	258, // 34: datanode.RemoveFriendReq.extra:type_name -> datanode.RemoveFriendReq.ExtraEntry
	259, // 35: datanode.LikesCountReq.extra:type_name -> datanode.LikesCountReq.ExtraEntry
	260, // 36: datanode.LikesAddReq.extra:type_name -> datanode.LikesAddReq.ExtraEntry
	261, // 37: datanode.LikesListReq.extra:type_name -> datanode.LikesListReq.ExtraEntry
	439, // 38: datanode.RemoveFriendRes.rescode:type_name -> rescode.Code
	262, // 39: datanode.RemoveFriendRes.extra:type_name -> datanode.RemoveFriendRes.ExtraEntry
	439, // 40: datanode.LikesCountRes.rescode:type_name -> rescode.Code
	263, // 41: datanode.LikesCountRes.extra:type_name -> datanode.LikesCountRes.ExtraEntry
	439, // 42: datanode.LikesAddRes.rescode:type_name -> rescode.Code
	264, // 43: datanode.LikesAddRes.extra:type_name -> datanode.LikesAddRes.ExtraEntry
	439, // 44: datanode.LikesListRes.rescode:type_name -> rescode.Code
	30,  // 45: datanode.LikesListRes.data:type_name -> datanode.Likes
	265, // 46: datanode.LikesListRes.extra:type_name -> datanode.LikesListRes.ExtraEntry
	266, // 47: datanode.UpdateNoteReq.extra:type_name -> datanode.UpdateNoteReq.ExtraEntry
	439, // 48: datanode.NoteMetaRes.rescode:type_name -> rescode.Code
	440, // 49: datanode.NoteMetaRes.meta:type_name -> common.NoteMeta
	267, // 50: datanode.NoteMetaRes.extra:type_name -> datanode.NoteMetaRes.ExtraEntry
	268, // 51: datanode.NoteMetaListReq.extra:type_name -> datanode.NoteMetaListReq.ExtraEntry
	439, // 52: datanode.NoteMetaListRes.rescode:type_name -> rescode.Code
	440, // 53: datanode.NoteMetaListRes.meta:type_name -> common.NoteMeta
	269, // 54: datanode.NoteMetaListRes.extra:type_name -> datanode.NoteMetaListRes.ExtraEntry
	270, // 55: datanode.NoteDataReq.extra:type_name -> datanode.NoteDataReq.ExtraEntry
	271, // 56: datanode.NoteHtmlReq.extra:type_name -> datanode.NoteHtmlReq.ExtraEntry
	439, // 57: datanode.NoteListCountRes.rescode:type_name -> rescode.Code
	272, // 58: datanode.NoteListCountRes.extra:type_name -> datanode.NoteListCountRes.ExtraEntry
	439, // 59: datanode.NoteDataRes.rescode:type_name -> rescode.Code
	273, // 60: datanode.NoteDataRes.extra:type_name -> datanode.NoteDataRes.ExtraEntry
	439, // 61: datanode.NoteHtmlRes.rescode:type_name -> rescode.Code
	274, // 62: datanode.NoteHtmlRes.extra:type_name -> datanode.NoteHtmlRes.ExtraEntry
	275, // 63: datanode.MomentsCountReq.extra:type_name -> datanode.MomentsCountReq.ExtraEntry
	439, // 64: datanode.MomentsCountRes.rescode:type_name -> rescode.Code
	276, // 65: datanode.MomentsCountRes.extra:type_name -> datanode.MomentsCountRes.ExtraEntry
	43,  // 66: datanode.Moments.extra:type_name -> datanode.Extra
	439, // 67: datanode.AddMomentsRes.rescode:type_name -> rescode.Code
	277, // 68: datanode.MomentsListReq.extra:type_name -> datanode.MomentsListReq.ExtraEntry
	439, // 69: datanode.MomentsListRes.rescode:type_name -> rescode.Code
	44,  // 70: datanode.MomentsListRes.data:type_name -> datanode.Moments
	278, // 71: datanode.FileDirReq.extra:type_name -> datanode.FileDirReq.ExtraEntry
	439, // 72: datanode.FileDirRes.rescode:type_name -> rescode.Code
	48,  // 73: datanode.FileDirRes.dirs:type_name -> datanode.FileItem
	439, // 74: datanode.AddDirRes.rescode:type_name -> rescode.Code
	439, // 75: datanode.AddFileRes.rescode:type_name -> rescode.Code
	279, // 76: datanode.FileAttrReq.extra:type_name -> datanode.FileAttrReq.ExtraEntry
	439, // 77: datanode.FileAttrRes.rescode:type_name -> rescode.Code
	280, // 78: datanode.ThumbnailReq.extra:type_name -> datanode.ThumbnailReq.ExtraEntry
	439, // 79: datanode.ThumbnailRes.rescode:type_name -> rescode.Code
	439, // 80: datanode.SetKeyvalueRes.rescode:type_name -> rescode.Code
	439, // 81: datanode.GetKeyvalueRes.rescode:type_name -> rescode.Code
	439, // 82: datanode.DelKeyvalueRes.rescode:type_name -> rescode.Code
	439, // 83: datanode.VersionRes.rescode:type_name -> rescode.Code
	441, // 84: datanode.VersionRes.versions:type_name -> common.VersionItem
	281, // 85: datanode.VersionRes.extra:type_name -> datanode.VersionRes.ExtraEntry
	282, // 86: datanode.SubjectNameReq.extra:type_name -> datanode.SubjectNameReq.ExtraEntry
	439, // 87: datanode.SubjectNameRes.rescode:type_name -> rescode.Code
	283, // 88: datanode.SubjectNameRes.extra:type_name -> datanode.SubjectNameRes.ExtraEntry
	442, // 89: datanode.ChapterResItem.childs:type_name -> common.ChapterItem
	439, // 90: datanode.ChapterRes.rescode:type_name -> rescode.Code
	68,  // 91: datanode.ChapterRes.chapters:type_name -> datanode.ChapterResItem
	284, // 92: datanode.ChapterRes.extra:type_name -> datanode.ChapterRes.ExtraEntry
	439, // 93: datanode.SourceRes.rescode:type_name -> rescode.Code
	443, // 94: datanode.SourceRes.sources:type_name -> common.SourceItem
	285, // 95: datanode.SourceRes.extra:type_name -> datanode.SourceRes.ExtraEntry
	439, // 96: datanode.TixingRes.rescode:type_name -> rescode.Code
	444, // 97: datanode.TixingRes.tixings:type_name -> common.TixingItem
	286, // 98: datanode.TixingRes.extra:type_name -> datanode.TixingRes.ExtraEntry
	439, // 99: datanode.TimuCountRes.rescode:type_name -> rescode.Code
	287, // 100: datanode.TimuCountRes.extra:type_name -> datanode.TimuCountRes.ExtraEntry
	445, // 101: datanode.TimuAddReq.timus:type_name -> common.AddTimuItem
	288, // 102: datanode.TimuAddReq.extra:type_name -> datanode.TimuAddReq.ExtraEntry
	439, // 103: datanode.TimuAddRes.rescode:type_name -> rescode.Code
	289, // 104: datanode.TimuAddRes.extra:type_name -> datanode.TimuAddRes.ExtraEntry
	439, // 105: datanode.TimuRes.rescode:type_name -> rescode.Code
	446, // 106: datanode.TimuRes.timus:type_name -> common.TimuItem
	290, // 107: datanode.TimuRes.extra:type_name -> datanode.TimuRes.ExtraEntry
	291, // 108: datanode.TimuByIdReq.extra:type_name -> datanode.TimuByIdReq.ExtraEntry
	439, // 109: datanode.TimuByIdRes.rescode:type_name -> rescode.Code
	446, // 110: datanode.TimuByIdRes.timus:type_name -> common.TimuItem
	292, // 111: datanode.TimuByIdRes.extra:type_name -> datanode.TimuByIdRes.ExtraEntry
	293, // 112: datanode.CollectReq.extra:type_name -> datanode.CollectReq.ExtraEntry
	439, // 113: datanode.CollectRes.rescode:type_name -> rescode.Code
	294, // 114: datanode.CollectRes.extra:type_name -> datanode.CollectRes.ExtraEntry
	439, // 115: datanode.CollectListRes.rescode:type_name -> rescode.Code
	446, // 116: datanode.CollectListRes.timus:type_name -> common.TimuItem
	295, // 117: datanode.CollectListRes.extra:type_name -> datanode.CollectListRes.ExtraEntry
	447, // 118: datanode.ModifyReq.timu:type_name -> common.Question
	439, // 119: datanode.ModifyRes.rescode:type_name -> rescode.Code
	296, // 120: datanode.ModifyRes.extra:type_name -> datanode.ModifyRes.ExtraEntry
	439, // 121: datanode.ModifyListRes.rescode:type_name -> rescode.Code
	448, // 122: datanode.ModifyListRes.timus:type_name -> common.ModifyItem
	297, // 123: datanode.ModifyListRes.extra:type_name -> datanode.ModifyListRes.ExtraEntry
	298, // 124: datanode.ModifyCountReq.extra:type_name -> datanode.ModifyCountReq.ExtraEntry
	439, // 125: datanode.ModifyCountRes.rescode:type_name -> rescode.Code
	299, // 126: datanode.ModifyCountRes.extra:type_name -> datanode.ModifyCountRes.ExtraEntry
	449, // 127: datanode.ApproveReq.dest:type_name -> common.ApproveDest
	300, // 128: datanode.ApproveReq.extra:type_name -> datanode.ApproveReq.ExtraEntry
	439, // 129: datanode.ApproveRes.rescode:type_name -> rescode.Code
	301, // 130: datanode.ApproveRes.extra:type_name -> datanode.ApproveRes.ExtraEntry
	450, // 131: datanode.SearchReq.style:type_name -> common.SearchTyle
	439, // 132: datanode.SearchRes.rescode:type_name -> rescode.Code
	451, // 133: datanode.SearchRes.total:type_name -> common.SearchHitsTotal
	452, // 134: datanode.SearchRes.hits:type_name -> common.SearchHitsItem
	302, // 135: datanode.SearchRes.extra:type_name -> datanode.SearchRes.ExtraEntry
	439, // 136: datanode.AddGradeCateRes.rescode:type_name -> rescode.Code
	439, // 137: datanode.GradeCateCountRes.rescode:type_name -> rescode.Code
	303, // 138: datanode.GradeCateCountRes.extra:type_name -> datanode.GradeCateCountRes.ExtraEntry
	304, // 139: datanode.GradeCateListReq.extra:type_name -> datanode.GradeCateListReq.ExtraEntry
	439, // 140: datanode.GradeCateListRes.rescode:type_name -> rescode.Code
	453, // 141: datanode.GradeCateListRes.lists:type_name -> common.GradeCate
	305, // 142: datanode.GradeCateListRes.extra:type_name -> datanode.GradeCateListRes.ExtraEntry
	439, // 143: datanode.HomeBlackDataRes.rescode:type_name -> rescode.Code
	454, // 144: datanode.HomeBlackDataRes.lists:type_name -> common.SchoolStatic
	306, // 145: datanode.HomeBlackDataRes.extra:type_name -> datanode.HomeBlackDataRes.ExtraEntry
	307, // 146: datanode.GradeSubjectReq.extra:type_name -> datanode.GradeSubjectReq.ExtraEntry
	439, // 147: datanode.GradeSubjectRes.rescode:type_name -> rescode.Code
	455, // 148: datanode.GradeSubjectRes.lists:type_name -> common.GradeSubject
	308, // 149: datanode.GradeSubjectRes.extra:type_name -> datanode.GradeSubjectRes.ExtraEntry
	439, // 150: datanode.SchoolRollAddRes.rescode:type_name -> rescode.Code
	439, // 151: datanode.SchoolRollCountRes.rescode:type_name -> rescode.Code
	309, // 152: datanode.SchoolRollListReq.extra:type_name -> datanode.SchoolRollListReq.ExtraEntry
	439, // 153: datanode.SchoolRollListRes.rescode:type_name -> rescode.Code
	456, // 154: datanode.SchoolRollListRes.lists:type_name -> common.SchoolRoll
	310, // 155: datanode.SchoolRollListRes.extra:type_name -> datanode.SchoolRollListRes.ExtraEntry
	439, // 156: datanode.SubjectCateAddRes.rescode:type_name -> rescode.Code
	439, // 157: datanode.SubjectCateCountRes.rescode:type_name -> rescode.Code
	311, // 158: datanode.SubjectCateListReq.extra:type_name -> datanode.SubjectCateListReq.ExtraEntry
	439, // 159: datanode.SubjectCateListRes.rescode:type_name -> rescode.Code
	457, // 160: datanode.SubjectCateListRes.lists:type_name -> common.SubjectCate
	312, // 161: datanode.SubjectCateListRes.extra:type_name -> datanode.SubjectCateListRes.ExtraEntry
	107, // 162: datanode.AddAttentionReq.item:type_name -> datanode.AttentionItem
	313, // 163: datanode.AddAttentionReq.extra:type_name -> datanode.AddAttentionReq.ExtraEntry
	439, // 164: datanode.AddAttentionRes.rescode:type_name -> rescode.Code
	314, // 165: datanode.AddAttentionRes.extra:type_name -> datanode.AddAttentionRes.ExtraEntry
	315, // 166: datanode.DelAttentionReq.extra:type_name -> datanode.DelAttentionReq.ExtraEntry
	439, // 167: datanode.DelAttentionRes.rescode:type_name -> rescode.Code
	316, // 168: datanode.DelAttentionRes.extra:type_name -> datanode.DelAttentionRes.ExtraEntry
	317, // 169: datanode.GetAttentionReq.extra:type_name -> datanode.GetAttentionReq.ExtraEntry
	439, // 170: datanode.GetAttentionRes.rescode:type_name -> rescode.Code
	107, // 171: datanode.GetAttentionRes.lists:type_name -> datanode.AttentionItem
	318, // 172: datanode.GetAttentionRes.extra:type_name -> datanode.GetAttentionRes.ExtraEntry
	319, // 173: datanode.AddUserAttentionReq.extra:type_name -> datanode.AddUserAttentionReq.ExtraEntry
	439, // 174: datanode.AddUserAttentionRes.rescode:type_name -> rescode.Code
	320, // 175: datanode.AddUserAttentionRes.extra:type_name -> datanode.AddUserAttentionRes.ExtraEntry
	321, // 176: datanode.GetUserAttentionReq.extra:type_name -> datanode.GetUserAttentionReq.ExtraEntry
	439, // 177: datanode.GetUserAttentionRes.rescode:type_name -> rescode.Code
	107, // 178: datanode.GetUserAttentionRes.lists:type_name -> datanode.AttentionItem
	322, // 179: datanode.GetUserAttentionRes.extra:type_name -> datanode.GetUserAttentionRes.ExtraEntry
	323, // 180: datanode.DelUserAttentionReq.extra:type_name -> datanode.DelUserAttentionReq.ExtraEntry
	439, // 181: datanode.DelUserAttentionRes.rescode:type_name -> rescode.Code
	324, // 182: datanode.DelUserAttentionRes.extra:type_name -> datanode.DelUserAttentionRes.ExtraEntry
	458, // 183: datanode.SetUserInfoReq.info:type_name -> common.UserInfo
	325, // 184: datanode.SetUserInfoReq.extra:type_name -> datanode.SetUserInfoReq.ExtraEntry
	439, // 185: datanode.SetUserInfoRes.rescode:type_name -> rescode.Code
	326, // 186: datanode.SetUserInfoRes.extra:type_name -> datanode.SetUserInfoRes.ExtraEntry
	327, // 187: datanode.GetUserInfoReq.extra:type_name -> datanode.GetUserInfoReq.ExtraEntry
	439, // 188: datanode.GetUserInfoRes.rescode:type_name -> rescode.Code
	458, // 189: datanode.GetUserInfoRes.info:type_name -> common.UserInfo
	328, // 190: datanode.GetUserInfoRes.extra:type_name -> datanode.GetUserInfoRes.ExtraEntry
	459, // 191: datanode.SetWechatUinfoReq.info:type_name -> common.WechatUserinfo
	329, // 192: datanode.SetWechatUinfoReq.extra:type_name -> datanode.SetWechatUinfoReq.ExtraEntry
	439, // 193: datanode.SetWechatUinfoRes.rescode:type_name -> rescode.Code
	330, // 194: datanode.SetWechatUinfoRes.extra:type_name -> datanode.SetWechatUinfoRes.ExtraEntry
	331, // 195: datanode.GetWechatUinfoReq.extra:type_name -> datanode.GetWechatUinfoReq.ExtraEntry
	439, // 196: datanode.GetWechatUinfoRes.rescode:type_name -> rescode.Code
	459, // 197: datanode.GetWechatUinfoRes.info:type_name -> common.WechatUserinfo
	332, // 198: datanode.GetWechatUinfoRes.extra:type_name -> datanode.GetWechatUinfoRes.ExtraEntry
	460, // 199: datanode.SetAlipayUinfoReq.info:type_name -> common.AlipayUserinfo
	333, // 200: datanode.SetAlipayUinfoReq.extra:type_name -> datanode.SetAlipayUinfoReq.ExtraEntry
	439, // 201: datanode.SetAlipayUinfoRes.rescode:type_name -> rescode.Code
	334, // 202: datanode.SetAlipayUinfoRes.extra:type_name -> datanode.SetAlipayUinfoRes.ExtraEntry
	335, // 203: datanode.GetAlipayUinfoReq.extra:type_name -> datanode.GetAlipayUinfoReq.ExtraEntry
	439, // 204: datanode.GetAlipayUinfoRes.rescode:type_name -> rescode.Code
	460, // 205: datanode.GetAlipayUinfoRes.info:type_name -> common.AlipayUserinfo
	336, // 206: datanode.GetAlipayUinfoRes.extra:type_name -> datanode.GetAlipayUinfoRes.ExtraEntry
	461, // 207: datanode.SetBaiduEntityReq.entitys:type_name -> common.BaiduEntity
	337, // 208: datanode.SetBaiduEntityReq.extra:type_name -> datanode.SetBaiduEntityReq.ExtraEntry
	439, // 209: datanode.SetBaiduEntityRes.rescode:type_name -> rescode.Code
	338, // 210: datanode.SetBaiduEntityRes.extra:type_name -> datanode.SetBaiduEntityRes.ExtraEntry
	339, // 211: datanode.BaiduEntityReq.extra:type_name -> datanode.BaiduEntityReq.ExtraEntry
	439, // 212: datanode.BaiduEntityRes.rescode:type_name -> rescode.Code
	461, // 213: datanode.BaiduEntityRes.entitys:type_name -> common.BaiduEntity
	340, // 214: datanode.BaiduEntityRes.extra:type_name -> datanode.BaiduEntityRes.ExtraEntry
	341, // 215: datanode.SearchItemReq.extra:type_name -> datanode.SearchItemReq.ExtraEntry
	439, // 216: datanode.SearchItemRes.rescode:type_name -> rescode.Code
	342, // 217: datanode.SearchItemRes.extra:type_name -> datanode.SearchItemRes.ExtraEntry
	343, // 218: datanode.SearchHistoryReq.extra:type_name -> datanode.SearchHistoryReq.ExtraEntry
	439, // 219: datanode.SearchHistoryRes.rescode:type_name -> rescode.Code
	462, // 220: datanode.SearchHistoryRes.lists:type_name -> common.SearchHistoryItem
	344, // 221: datanode.SearchHistoryRes.extra:type_name -> datanode.SearchHistoryRes.ExtraEntry
	345, // 222: datanode.RefreshModifyRewardReq.extra:type_name -> datanode.RefreshModifyRewardReq.ExtraEntry
	439, // 223: datanode.RefreshModifyRewardRes.rescode:type_name -> rescode.Code
	346, // 224: datanode.RefreshModifyRewardRes.extra:type_name -> datanode.RefreshModifyRewardRes.ExtraEntry
	347, // 225: datanode.RefreshUserCoinReq.extra:type_name -> datanode.RefreshUserCoinReq.ExtraEntry
	439, // 226: datanode.RefreshUserCoinRes.rescode:type_name -> rescode.Code
	348, // 227: datanode.RefreshUserCoinRes.extra:type_name -> datanode.RefreshUserCoinRes.ExtraEntry
	445, // 228: datanode.AddQuestionReq.timu:type_name -> common.AddTimuItem
	439, // 229: datanode.AddQuestionRes.rescode:type_name -> rescode.Code
	349, // 230: datanode.AddQuestionRes.extra:type_name -> datanode.AddQuestionRes.ExtraEntry
	439, // 231: datanode.AddListRes.rescode:type_name -> rescode.Code
	445, // 232: datanode.AddListRes.timus:type_name -> common.AddTimuItem
	350, // 233: datanode.AddListRes.extra:type_name -> datanode.AddListRes.ExtraEntry
	351, // 234: datanode.AddCountReq.extra:type_name -> datanode.AddCountReq.ExtraEntry
	439, // 235: datanode.AddCountRes.rescode:type_name -> rescode.Code
	352, // 236: datanode.AddCountRes.extra:type_name -> datanode.AddCountRes.ExtraEntry
	353, // 237: datanode.RefreshAddRewardReq.extra:type_name -> datanode.RefreshAddRewardReq.ExtraEntry
	439, // 238: datanode.RefreshAddRewardRes.rescode:type_name -> rescode.Code
	354, // 239: datanode.RefreshAddRewardRes.extra:type_name -> datanode.RefreshAddRewardRes.ExtraEntry
	355, // 240: datanode.TixingByVidReq.extra:type_name -> datanode.TixingByVidReq.ExtraEntry
	439, // 241: datanode.TixingByVidRes.rescode:type_name -> rescode.Code
	356, // 242: datanode.TixingByVidRes.extra:type_name -> datanode.TixingByVidRes.ExtraEntry
	357, // 243: datanode.SourceByVidReq.extra:type_name -> datanode.SourceByVidReq.ExtraEntry
	439, // 244: datanode.SourceByVidRes.rescode:type_name -> rescode.Code
	358, // 245: datanode.SourceByVidRes.extra:type_name -> datanode.SourceByVidRes.ExtraEntry
	463, // 246: datanode.IdentAddReq.result:type_name -> common.BaiduDocAnalysis
	359, // 247: datanode.IdentAddReq.extra:type_name -> datanode.IdentAddReq.ExtraEntry
	439, // 248: datanode.IdentAddRes.rescode:type_name -> rescode.Code
	360, // 249: datanode.IdentAddRes.extra:type_name -> datanode.IdentAddRes.ExtraEntry
	361, // 250: datanode.IdentByIidReq.extra:type_name -> datanode.IdentByIidReq.ExtraEntry
	439, // 251: datanode.IdentByIidRes.rescode:type_name -> rescode.Code
	464, // 252: datanode.IdentByIidRes.result:type_name -> common.BaiduIdentItem
	362, // 253: datanode.IdentByIidRes.extra:type_name -> datanode.IdentByIidRes.ExtraEntry
	439, // 254: datanode.IdentListRes.rescode:type_name -> rescode.Code
	464, // 255: datanode.IdentListRes.results:type_name -> common.BaiduIdentItem
	363, // 256: datanode.IdentListRes.extra:type_name -> datanode.IdentListRes.ExtraEntry
	364, // 257: datanode.IdentCountReq.extra:type_name -> datanode.IdentCountReq.ExtraEntry
	439, // 258: datanode.IdentCountRes.rescode:type_name -> rescode.Code
	365, // 259: datanode.IdentCountRes.extra:type_name -> datanode.IdentCountRes.ExtraEntry
	366, // 260: datanode.RefreshIdentRewardReq.extra:type_name -> datanode.RefreshIdentRewardReq.ExtraEntry
	439, // 261: datanode.RefreshIdentRewardRes.rescode:type_name -> rescode.Code
	367, // 262: datanode.RefreshIdentRewardRes.extra:type_name -> datanode.RefreshIdentRewardRes.ExtraEntry
	166, // 263: datanode.UpdateTeacherReq.teacher:type_name -> datanode.TeacherItem
	368, // 264: datanode.UpdateTeacherReq.extra:type_name -> datanode.UpdateTeacherReq.ExtraEntry
	439, // 265: datanode.UpdateTeacherRes.rescode:type_name -> rescode.Code
	369, // 266: datanode.UpdateTeacherRes.extra:type_name -> datanode.UpdateTeacherRes.ExtraEntry
	439, // 267: datanode.FindTeacherRes.rescode:type_name -> rescode.Code
	166, // 268: datanode.FindTeacherRes.teachers:type_name -> datanode.TeacherItem
	370, // 269: datanode.FindTeacherRes.extra:type_name -> datanode.FindTeacherRes.ExtraEntry
	371, // 270: datanode.FocusTeacherReq.extra:type_name -> datanode.FocusTeacherReq.ExtraEntry
	439, // 271: datanode.FocusTeacherRes.rescode:type_name -> rescode.Code
	372, // 272: datanode.FocusTeacherRes.extra:type_name -> datanode.FocusTeacherRes.ExtraEntry
	373, // 273: datanode.NoteCooperReq.extra:type_name -> datanode.NoteCooperReq.ExtraEntry
	439, // 274: datanode.NoteCooperRes.rescode:type_name -> rescode.Code
	458, // 275: datanode.NoteCooperRes.user:type_name -> common.UserInfo
	374, // 276: datanode.NoteCooperRes.extra:type_name -> datanode.NoteCooperRes.ExtraEntry
	375, // 277: datanode.NoteTagReq.extra:type_name -> datanode.NoteTagReq.ExtraEntry
	439, // 278: datanode.NoteTagRes.rescode:type_name -> rescode.Code
	376, // 279: datanode.NoteTagRes.extra:type_name -> datanode.NoteTagRes.ExtraEntry
	377, // 280: datanode.NoteBgcolorReq.extra:type_name -> datanode.NoteBgcolorReq.ExtraEntry
	439, // 281: datanode.NoteBgcolorRes.rescode:type_name -> rescode.Code
	378, // 282: datanode.NoteBgcolorRes.extra:type_name -> datanode.NoteBgcolorRes.ExtraEntry
	379, // 283: datanode.NoteTagAddReq.extra:type_name -> datanode.NoteTagAddReq.ExtraEntry
	439, // 284: datanode.NoteTagAddRes.rescode:type_name -> rescode.Code
	380, // 285: datanode.NoteTagAddRes.extra:type_name -> datanode.NoteTagAddRes.ExtraEntry
	381, // 286: datanode.NoteTagListReq.extra:type_name -> datanode.NoteTagListReq.ExtraEntry
	439, // 287: datanode.NoteTagListRes.rescode:type_name -> rescode.Code
	465, // 288: datanode.NoteTagListRes.tags:type_name -> common.NoteTag
	382, // 289: datanode.NoteTagListRes.extra:type_name -> datanode.NoteTagListRes.ExtraEntry
	466, // 290: datanode.SubmitCertReq.cert:type_name -> common.PersonCert
	383, // 291: datanode.SubmitCertReq.extra:type_name -> datanode.SubmitCertReq.ExtraEntry
	439, // 292: datanode.SubmitCertRes.rescode:type_name -> rescode.Code
	384, // 293: datanode.SubmitCertRes.extra:type_name -> datanode.SubmitCertRes.ExtraEntry
	385, // 294: datanode.CertStatusReq.extra:type_name -> datanode.CertStatusReq.ExtraEntry
	439, // 295: datanode.CertStatusRes.rescode:type_name -> rescode.Code
	466, // 296: datanode.CertStatusRes.cert:type_name -> common.PersonCert
	386, // 297: datanode.CertStatusRes.extra:type_name -> datanode.CertStatusRes.ExtraEntry
	387, // 298: datanode.CertInfoReq.extra:type_name -> datanode.CertInfoReq.ExtraEntry
	439, // 299: datanode.CertInfoRes.rescode:type_name -> rescode.Code
	466, // 300: datanode.CertInfoRes.cert:type_name -> common.PersonCert
	388, // 301: datanode.CertInfoRes.extra:type_name -> datanode.CertInfoRes.ExtraEntry
	389, // 302: datanode.CertFlowReq.extra:type_name -> datanode.CertFlowReq.ExtraEntry
	439, // 303: datanode.CertFlowRes.rescode:type_name -> rescode.Code
	466, // 304: datanode.CertFlowRes.cert:type_name -> common.PersonCert
	390, // 305: datanode.CertFlowRes.extra:type_name -> datanode.CertFlowRes.ExtraEntry
	391, // 306: datanode.AddUserLogReq.extra:type_name -> datanode.AddUserLogReq.ExtraEntry
	439, // 307: datanode.AddUserLogRes.rescode:type_name -> rescode.Code
	392, // 308: datanode.AddUserLogRes.extra:type_name -> datanode.AddUserLogRes.ExtraEntry
	393, // 309: datanode.QueryUserLogReq.extra:type_name -> datanode.QueryUserLogReq.ExtraEntry
	439, // 310: datanode.QueryUserLogRes.rescode:type_name -> rescode.Code
	467, // 311: datanode.QueryUserLogRes.logs:type_name -> common.UserLog
	394, // 312: datanode.QueryUserLogRes.extra:type_name -> datanode.QueryUserLogRes.ExtraEntry
	395, // 313: datanode.UserLogCountReq.extra:type_name -> datanode.UserLogCountReq.ExtraEntry
	439, // 314: datanode.UserLogCountRes.rescode:type_name -> rescode.Code
	396, // 315: datanode.UserLogCountRes.extra:type_name -> datanode.UserLogCountRes.ExtraEntry
	468, // 316: datanode.AddTaskReq.cron:type_name -> common.CronItem
	397, // 317: datanode.AddTaskReq.extra:type_name -> datanode.AddTaskReq.ExtraEntry
	439, // 318: datanode.AddTaskRes.rescode:type_name -> rescode.Code
	398, // 319: datanode.AddTaskRes.extra:type_name -> datanode.AddTaskRes.ExtraEntry
	399, // 320: datanode.GetTaskReq.extra:type_name -> datanode.GetTaskReq.ExtraEntry
	439, // 321: datanode.GetTaskRes.rescode:type_name -> rescode.Code
	468, // 322: datanode.GetTaskRes.crons:type_name -> common.CronItem
	400, // 323: datanode.GetTaskRes.extra:type_name -> datanode.GetTaskRes.ExtraEntry
	401, // 324: datanode.GetTaskCountReq.extra:type_name -> datanode.GetTaskCountReq.ExtraEntry
	439, // 325: datanode.GetTaskCountRes.rescode:type_name -> rescode.Code
	402, // 326: datanode.GetTaskCountRes.extra:type_name -> datanode.GetTaskCountRes.ExtraEntry
	469, // 327: datanode.UpdateUserinfoReq.info:type_name -> common.UpdateUserinfoItem
	403, // 328: datanode.UpdateUserinfoReq.extra:type_name -> datanode.UpdateUserinfoReq.ExtraEntry
	439, // 329: datanode.UpdateUserinfoRes.rescode:type_name -> rescode.Code
	404, // 330: datanode.UpdateUserinfoRes.extra:type_name -> datanode.UpdateUserinfoRes.ExtraEntry
	405, // 331: datanode.AddPkgReq.extra:type_name -> datanode.AddPkgReq.ExtraEntry
	439, // 332: datanode.AddPkgRes.rescode:type_name -> rescode.Code
	406, // 333: datanode.AddPkgRes.extra:type_name -> datanode.AddPkgRes.ExtraEntry
	407, // 334: datanode.DelPkgReq.extra:type_name -> datanode.DelPkgReq.ExtraEntry
	439, // 335: datanode.DelPkgRes.rescode:type_name -> rescode.Code
	408, // 336: datanode.DelPkgRes.extra:type_name -> datanode.DelPkgRes.ExtraEntry
	409, // 337: datanode.PkgListReq.extra:type_name -> datanode.PkgListReq.ExtraEntry
	439, // 338: datanode.PkgListRes.rescode:type_name -> rescode.Code
	470, // 339: datanode.PkgListRes.version:type_name -> common.PkgItem
	410, // 340: datanode.PkgListRes.extra:type_name -> datanode.PkgListRes.ExtraEntry
	411, // 341: datanode.PkgCountReq.extra:type_name -> datanode.PkgCountReq.ExtraEntry
	439, // 342: datanode.PkgCountRes.rescode:type_name -> rescode.Code
	412, // 343: datanode.PkgCountRes.extra:type_name -> datanode.PkgCountRes.ExtraEntry
	471, // 344: datanode.SponsorAddReq.sponsor:type_name -> common.SponsorItem
	413, // 345: datanode.SponsorAddReq.extra:type_name -> datanode.SponsorAddReq.ExtraEntry
	439, // 346: datanode.SponsorAddRes.rescode:type_name -> rescode.Code
	414, // 347: datanode.SponsorAddRes.extra:type_name -> datanode.SponsorAddRes.ExtraEntry
	415, // 348: datanode.SponsorListReq.extra:type_name -> datanode.SponsorListReq.ExtraEntry
	439, // 349: datanode.SponsorListRes.rescode:type_name -> rescode.Code
	471, // 350: datanode.SponsorListRes.lists:type_name -> common.SponsorItem
	416, // 351: datanode.SponsorListRes.extra:type_name -> datanode.SponsorListRes.ExtraEntry
	417, // 352: datanode.VipLimitReq.extra:type_name -> datanode.VipLimitReq.ExtraEntry
	439, // 353: datanode.VipLimitRes.rescode:type_name -> rescode.Code
	418, // 354: datanode.VipLimitRes.extra:type_name -> datanode.VipLimitRes.ExtraEntry
	472, // 355: datanode.VipProductReq.products:type_name -> common.VipProduct
	419, // 356: datanode.VipProductReq.extra:type_name -> datanode.VipProductReq.ExtraEntry
	439, // 357: datanode.VipProductRes.rescode:type_name -> rescode.Code
	472, // 358: datanode.VipProductRes.products:type_name -> common.VipProduct
	420, // 359: datanode.VipProductRes.extra:type_name -> datanode.VipProductRes.ExtraEntry
	473, // 360: datanode.VipPayReq.order:type_name -> common.VipOrder
	421, // 361: datanode.VipPayReq.extra:type_name -> datanode.VipPayReq.ExtraEntry
	439, // 362: datanode.VipPayRes.rescode:type_name -> rescode.Code
	473, // 363: datanode.VipPayRes.order:type_name -> common.VipOrder
	422, // 364: datanode.VipPayRes.extra:type_name -> datanode.VipPayRes.ExtraEntry
	473, // 365: datanode.VipOrderStatusReq.order:type_name -> common.VipOrder
	423, // 366: datanode.VipOrderStatusReq.extra:type_name -> datanode.VipOrderStatusReq.ExtraEntry
	439, // 367: datanode.VipOrderStatusRes.rescode:type_name -> rescode.Code
	473, // 368: datanode.VipOrderStatusRes.order:type_name -> common.VipOrder
	424, // 369: datanode.VipOrderStatusRes.extra:type_name -> datanode.VipOrderStatusRes.ExtraEntry
	473, // 370: datanode.VipOrderListReq.order:type_name -> common.VipOrder
	425, // 371: datanode.VipOrderListReq.extra:type_name -> datanode.VipOrderListReq.ExtraEntry
	439, // 372: datanode.VipOrderListRes.rescode:type_name -> rescode.Code
	473, // 373: datanode.VipOrderListRes.order:type_name -> common.VipOrder
	426, // 374: datanode.VipOrderListRes.extra:type_name -> datanode.VipOrderListRes.ExtraEntry
	474, // 375: datanode.UserScoreReq.score:type_name -> common.UserScore
	427, // 376: datanode.UserScoreReq.extra:type_name -> datanode.UserScoreReq.ExtraEntry
	439, // 377: datanode.UserScoreRes.rescode:type_name -> rescode.Code
	474, // 378: datanode.UserScoreRes.score:type_name -> common.UserScore
	428, // 379: datanode.UserScoreRes.extra:type_name -> datanode.UserScoreRes.ExtraEntry
	475, // 380: datanode.UserVipReq.vip:type_name -> common.UserVip
	429, // 381: datanode.UserVipReq.extra:type_name -> datanode.UserVipReq.ExtraEntry
	439, // 382: datanode.UserVipRes.rescode:type_name -> rescode.Code
	475, // 383: datanode.UserVipRes.vip:type_name -> common.UserVip
	430, // 384: datanode.UserVipRes.extra:type_name -> datanode.UserVipRes.ExtraEntry
	476, // 385: datanode.VipDescReq.desc:type_name -> common.VipDesc
	431, // 386: datanode.VipDescReq.extra:type_name -> datanode.VipDescReq.ExtraEntry
	439, // 387: datanode.VipDescRes.rescode:type_name -> rescode.Code
	476, // 388: datanode.VipDescRes.desc:type_name -> common.VipDesc
	432, // 389: datanode.VipDescRes.extra:type_name -> datanode.VipDescRes.ExtraEntry
	477, // 390: datanode.FootLogReq.foot_log:type_name -> common.FootLog
	433, // 391: datanode.FootLogReq.extra:type_name -> datanode.FootLogReq.ExtraEntry
	439, // 392: datanode.FootLogRes.rescode:type_name -> rescode.Code
	477, // 393: datanode.FootLogRes.desc:type_name -> common.FootLog
	434, // 394: datanode.FootLogRes.extra:type_name -> datanode.FootLogRes.ExtraEntry
	478, // 395: datanode.AddExamReq.exam:type_name -> common.ExamItem
	435, // 396: datanode.AddExamReq.extra:type_name -> datanode.AddExamReq.ExtraEntry
	439, // 397: datanode.AddExamRes.rescode:type_name -> rescode.Code
	477, // 398: datanode.AddExamRes.desc:type_name -> common.FootLog
	436, // 399: datanode.AddExamRes.extra:type_name -> datanode.AddExamRes.ExtraEntry
	479, // 400: datanode.ExamListReq.req:type_name -> common.ReqExam
	437, // 401: datanode.ExamListReq.extra:type_name -> datanode.ExamListReq.ExtraEntry
	439, // 402: datanode.ExamListRes.rescode:type_name -> rescode.Code
	478, // 403: datanode.ExamListRes.exams:type_name -> common.ExamItem
	438, // 404: datanode.ExamListRes.extra:type_name -> datanode.ExamListRes.ExtraEntry
	2,   // 405: datanode.DatanodeService.CreateUser:input_type -> datanode.NewUserReq
	1,   // 406: datanode.DatanodeService.UserInfo:input_type -> datanode.UserInfoReq
	3,   // 407: datanode.DatanodeService.SearchUser:input_type -> datanode.SearchUserReq
	203, // 408: datanode.DatanodeService.UpdateUserInfo:input_type -> datanode.UpdateUserinfoReq
	108, // 409: datanode.DatanodeService.AddAttention:input_type -> datanode.AddAttentionReq
	110, // 410: datanode.DatanodeService.DelAttention:input_type -> datanode.DelAttentionReq
	112, // 411: datanode.DatanodeService.GetAttention:input_type -> datanode.GetAttentionReq
	114, // 412: datanode.DatanodeService.AddUserAttention:input_type -> datanode.AddUserAttentionReq
	118, // 413: datanode.DatanodeService.DelUserAttention:input_type -> datanode.DelUserAttentionReq
	116, // 414: datanode.DatanodeService.GetUserAttention:input_type -> datanode.GetUserAttentionReq
	6,   // 415: datanode.DatanodeService.AddFriends:input_type -> datanode.AddFriendReq
	8,   // 416: datanode.DatanodeService.AgreeFriends:input_type -> datanode.AgreeFriendReq
	9,   // 417: datanode.DatanodeService.FriendsList:input_type -> datanode.FriendsListReq
	15,  // 418: datanode.DatanodeService.CreateGroup:input_type -> datanode.CreateGroupReq
	17,  // 419: datanode.DatanodeService.RenameGroup:input_type -> datanode.RenameGroupReq
	19,  // 420: datanode.DatanodeService.AddNoteFriend:input_type -> datanode.AddFriendNoteReq
	21,  // 421: datanode.DatanodeService.MoveToNewGroup:input_type -> datanode.MoveGroupReq
	23,  // 422: datanode.DatanodeService.RemoveFriend:input_type -> datanode.RemoveFriendReq
	24,  // 423: datanode.DatanodeService.LikesCount:input_type -> datanode.LikesCountReq
	25,  // 424: datanode.DatanodeService.LikesAdd:input_type -> datanode.LikesAddReq
	26,  // 425: datanode.DatanodeService.LikesList:input_type -> datanode.LikesListReq
	32,  // 426: datanode.DatanodeService.UpdateNote:input_type -> datanode.UpdateNoteReq
	34,  // 427: datanode.DatanodeService.NoteMetaList:input_type -> datanode.NoteMetaListReq
	34,  // 428: datanode.DatanodeService.NoteListCount:input_type -> datanode.NoteMetaListReq
	36,  // 429: datanode.DatanodeService.NoteData:input_type -> datanode.NoteDataReq
	37,  // 430: datanode.DatanodeService.NoteHtml:input_type -> datanode.NoteHtmlReq
	41,  // 431: datanode.DatanodeService.MomentsCount:input_type -> datanode.MomentsCountReq
	44,  // 432: datanode.DatanodeService.MomentsAdd:input_type -> datanode.Moments
	46,  // 433: datanode.DatanodeService.MomentsList:input_type -> datanode.MomentsListReq
	49,  // 434: datanode.DatanodeService.FileDirOne:input_type -> datanode.FileDirReq
	51,  // 435: datanode.DatanodeService.FileDirAdd:input_type -> datanode.AddDirReq
	53,  // 436: datanode.DatanodeService.AddFile:input_type -> datanode.AddFileReq
	55,  // 437: datanode.DatanodeService.YunSaveAttr:input_type -> datanode.FileAttrReq
	57,  // 438: datanode.DatanodeService.Thumbnail:input_type -> datanode.ThumbnailReq
	59,  // 439: datanode.DatanodeService.SetKeyValue:input_type -> datanode.SetKeyvalueReq
	61,  // 440: datanode.DatanodeService.GetKeyValue:input_type -> datanode.GetKeyvalueReq
	63,  // 441: datanode.DatanodeService.DelKeyValue:input_type -> datanode.DelKeyvalueReq
	480, // 442: datanode.DatanodeService.QuestionVersion:input_type -> common.QuestionQuery
	480, // 443: datanode.DatanodeService.QuestionChapter:input_type -> common.QuestionQuery
	66,  // 444: datanode.DatanodeService.SubjectName:input_type -> datanode.SubjectNameReq
	480, // 445: datanode.DatanodeService.QuestionSource:input_type -> common.QuestionQuery
	480, // 446: datanode.DatanodeService.QuestionTixing:input_type -> common.QuestionQuery
	480, // 447: datanode.DatanodeService.QuestionTimuCount:input_type -> common.QuestionQuery
	480, // 448: datanode.DatanodeService.QuestionTimu:input_type -> common.QuestionQuery
	76,  // 449: datanode.DatanodeService.QuestionTimuById:input_type -> datanode.TimuByIdReq
	78,  // 450: datanode.DatanodeService.CollectTimu:input_type -> datanode.CollectReq
	80,  // 451: datanode.DatanodeService.QueryCollectTimu:input_type -> datanode.CollectListReq
	82,  // 452: datanode.DatanodeService.ModifyQuestion:input_type -> datanode.ModifyReq
	84,  // 453: datanode.DatanodeService.ModifyList:input_type -> datanode.ModifyListReq
	86,  // 454: datanode.DatanodeService.ModifyCount:input_type -> datanode.ModifyCountReq
	73,  // 455: datanode.DatanodeService.QuestionTimuAdd:input_type -> datanode.TimuAddReq
	146, // 456: datanode.DatanodeService.AddList:input_type -> datanode.AddListReq
	148, // 457: datanode.DatanodeService.AddCount:input_type -> datanode.AddCountReq
	88,  // 458: datanode.DatanodeService.Approve:input_type -> datanode.ApproveReq
	90,  // 459: datanode.DatanodeService.OnSearch:input_type -> datanode.SearchReq
	453, // 460: datanode.DatanodeService.GradeCateAdd:input_type -> common.GradeCate
	481, // 461: datanode.DatanodeService.GradeCateCount:input_type -> common.Request
	94,  // 462: datanode.DatanodeService.GradeCateList:input_type -> datanode.GradeCateListReq
	481, // 463: datanode.DatanodeService.HomeBlackData:input_type -> common.Request
	97,  // 464: datanode.DatanodeService.GradeSubject:input_type -> datanode.GradeSubjectReq
	456, // 465: datanode.DatanodeService.SchoolRollAdd:input_type -> common.SchoolRoll
	481, // 466: datanode.DatanodeService.SchoolRollCount:input_type -> common.Request
	101, // 467: datanode.DatanodeService.SchoolList:input_type -> datanode.SchoolRollListReq
	457, // 468: datanode.DatanodeService.SubjectCateAdd:input_type -> common.SubjectCate
	481, // 469: datanode.DatanodeService.SubjectCateCount:input_type -> common.Request
	105, // 470: datanode.DatanodeService.SubjectCateList:input_type -> datanode.SubjectCateListReq
	120, // 471: datanode.DatanodeService.SetUserInfo:input_type -> datanode.SetUserInfoReq
	122, // 472: datanode.DatanodeService.GetUserInfo:input_type -> datanode.GetUserInfoReq
	124, // 473: datanode.DatanodeService.SetWechatUinfo:input_type -> datanode.SetWechatUinfoReq
	126, // 474: datanode.DatanodeService.GetWechatUinfo:input_type -> datanode.GetWechatUinfoReq
	128, // 475: datanode.DatanodeService.SetAlipayUinfo:input_type -> datanode.SetAlipayUinfoReq
	130, // 476: datanode.DatanodeService.GetAlipayUinfo:input_type -> datanode.GetAlipayUinfoReq
	132, // 477: datanode.DatanodeService.SetBaiduEntity:input_type -> datanode.SetBaiduEntityReq
	134, // 478: datanode.DatanodeService.BaiduEntity:input_type -> datanode.BaiduEntityReq
	138, // 479: datanode.DatanodeService.SearchHistory:input_type -> datanode.SearchHistoryReq
	136, // 480: datanode.DatanodeService.SearchItem:input_type -> datanode.SearchItemReq
	140, // 481: datanode.DatanodeService.RefreshModifyReward:input_type -> datanode.RefreshModifyRewardReq
	150, // 482: datanode.DatanodeService.RefreshAddReward:input_type -> datanode.RefreshAddRewardReq
	142, // 483: datanode.DatanodeService.RefreshUserCoin:input_type -> datanode.RefreshUserCoinReq
	152, // 484: datanode.DatanodeService.TixingByVid:input_type -> datanode.TixingByVidReq
	154, // 485: datanode.DatanodeService.SourceByVid:input_type -> datanode.SourceByVidReq
	156, // 486: datanode.DatanodeService.IdentAdd:input_type -> datanode.IdentAddReq
	158, // 487: datanode.DatanodeService.IdentByIid:input_type -> datanode.IdentByIidReq
	160, // 488: datanode.DatanodeService.IdentList:input_type -> datanode.IdentListReq
	162, // 489: datanode.DatanodeService.IdentCount:input_type -> datanode.IdentCountReq
	164, // 490: datanode.DatanodeService.RefreshIdentReward:input_type -> datanode.RefreshIdentRewardReq
	167, // 491: datanode.DatanodeService.UpdateTeacher:input_type -> datanode.UpdateTeacherReq
	169, // 492: datanode.DatanodeService.GetTeacher:input_type -> datanode.FindTeacherReq
	171, // 493: datanode.DatanodeService.FocusTeacher:input_type -> datanode.FocusTeacherReq
	173, // 494: datanode.DatanodeService.NoteCooper:input_type -> datanode.NoteCooperReq
	175, // 495: datanode.DatanodeService.NoteTag:input_type -> datanode.NoteTagReq
	177, // 496: datanode.DatanodeService.NoteBgcolor:input_type -> datanode.NoteBgcolorReq
	179, // 497: datanode.DatanodeService.NoteTagAdd:input_type -> datanode.NoteTagAddReq
	181, // 498: datanode.DatanodeService.NoteTagList:input_type -> datanode.NoteTagListReq
	183, // 499: datanode.DatanodeService.SubmitCert:input_type -> datanode.SubmitCertReq
	185, // 500: datanode.DatanodeService.CertStatus:input_type -> datanode.CertStatusReq
	187, // 501: datanode.DatanodeService.CertInfo:input_type -> datanode.CertInfoReq
	189, // 502: datanode.DatanodeService.CertFlow:input_type -> datanode.CertFlowReq
	191, // 503: datanode.DatanodeService.AddUserLog:input_type -> datanode.AddUserLogReq
	193, // 504: datanode.DatanodeService.QueryUserLog:input_type -> datanode.QueryUserLogReq
	195, // 505: datanode.DatanodeService.UserLogCount:input_type -> datanode.UserLogCountReq
	197, // 506: datanode.DatanodeService.AddTask:input_type -> datanode.AddTaskReq
	199, // 507: datanode.DatanodeService.GetTask:input_type -> datanode.GetTaskReq
	201, // 508: datanode.DatanodeService.GetTaskCount:input_type -> datanode.GetTaskCountReq
	205, // 509: datanode.DatanodeService.AddPkg:input_type -> datanode.AddPkgReq
	207, // 510: datanode.DatanodeService.DelPkg:input_type -> datanode.DelPkgReq
	209, // 511: datanode.DatanodeService.PkgLists:input_type -> datanode.PkgListReq
	211, // 512: datanode.DatanodeService.PkgCount:input_type -> datanode.PkgCountReq
	213, // 513: datanode.DatanodeService.SponsorAdd:input_type -> datanode.SponsorAddReq
	215, // 514: datanode.DatanodeService.SponsorList:input_type -> datanode.SponsorListReq
	217, // 515: datanode.DatanodeService.VipLimit:input_type -> datanode.VipLimitReq
	219, // 516: datanode.DatanodeService.VipProduct:input_type -> datanode.VipProductReq
	231, // 517: datanode.DatanodeService.VipDesc:input_type -> datanode.VipDescReq
	221, // 518: datanode.DatanodeService.VipPay:input_type -> datanode.VipPayReq
	223, // 519: datanode.DatanodeService.VipOrderStatus:input_type -> datanode.VipOrderStatusReq
	225, // 520: datanode.DatanodeService.VipOrderList:input_type -> datanode.VipOrderListReq
	227, // 521: datanode.DatanodeService.UserScore:input_type -> datanode.UserScoreReq
	229, // 522: datanode.DatanodeService.UserVip:input_type -> datanode.UserVipReq
	233, // 523: datanode.DatanodeService.FootLog:input_type -> datanode.FootLogReq
	235, // 524: datanode.DatanodeService.AddExam:input_type -> datanode.AddExamReq
	237, // 525: datanode.DatanodeService.ExamLists:input_type -> datanode.ExamListReq
	5,   // 526: datanode.DatanodeService.CreateUser:output_type -> datanode.UserRes
	5,   // 527: datanode.DatanodeService.UserInfo:output_type -> datanode.UserRes
	4,   // 528: datanode.DatanodeService.SearchUser:output_type -> datanode.SearchUserRes
	204, // 529: datanode.DatanodeService.UpdateUserInfo:output_type -> datanode.UpdateUserinfoRes
	109, // 530: datanode.DatanodeService.AddAttention:output_type -> datanode.AddAttentionRes
	111, // 531: datanode.DatanodeService.DelAttention:output_type -> datanode.DelAttentionRes
	113, // 532: datanode.DatanodeService.GetAttention:output_type -> datanode.GetAttentionRes
	115, // 533: datanode.DatanodeService.AddUserAttention:output_type -> datanode.AddUserAttentionRes
	119, // 534: datanode.DatanodeService.DelUserAttention:output_type -> datanode.DelUserAttentionRes
	117, // 535: datanode.DatanodeService.GetUserAttention:output_type -> datanode.GetUserAttentionRes
	7,   // 536: datanode.DatanodeService.AddFriends:output_type -> datanode.AddFriendRes
	10,  // 537: datanode.DatanodeService.AgreeFriends:output_type -> datanode.AgreeFriendRes
	14,  // 538: datanode.DatanodeService.FriendsList:output_type -> datanode.FriendRes
	16,  // 539: datanode.DatanodeService.CreateGroup:output_type -> datanode.CreateGroupRes
	18,  // 540: datanode.DatanodeService.RenameGroup:output_type -> datanode.RenameGroupRes
	20,  // 541: datanode.DatanodeService.AddNoteFriend:output_type -> datanode.AddFriendNoteRes
	22,  // 542: datanode.DatanodeService.MoveToNewGroup:output_type -> datanode.MoveGroupRes
	27,  // 543: datanode.DatanodeService.RemoveFriend:output_type -> datanode.RemoveFriendRes
	28,  // 544: datanode.DatanodeService.LikesCount:output_type -> datanode.LikesCountRes
	29,  // 545: datanode.DatanodeService.LikesAdd:output_type -> datanode.LikesAddRes
	31,  // 546: datanode.DatanodeService.LikesList:output_type -> datanode.LikesListRes
	33,  // 547: datanode.DatanodeService.UpdateNote:output_type -> datanode.NoteMetaRes
	35,  // 548: datanode.DatanodeService.NoteMetaList:output_type -> datanode.NoteMetaListRes
	38,  // 549: datanode.DatanodeService.NoteListCount:output_type -> datanode.NoteListCountRes
	39,  // 550: datanode.DatanodeService.NoteData:output_type -> datanode.NoteDataRes
	40,  // 551: datanode.DatanodeService.NoteHtml:output_type -> datanode.NoteHtmlRes
	42,  // 552: datanode.DatanodeService.MomentsCount:output_type -> datanode.MomentsCountRes
	45,  // 553: datanode.DatanodeService.MomentsAdd:output_type -> datanode.AddMomentsRes
	47,  // 554: datanode.DatanodeService.MomentsList:output_type -> datanode.MomentsListRes
	50,  // 555: datanode.DatanodeService.FileDirOne:output_type -> datanode.FileDirRes
	52,  // 556: datanode.DatanodeService.FileDirAdd:output_type -> datanode.AddDirRes
	54,  // 557: datanode.DatanodeService.AddFile:output_type -> datanode.AddFileRes
	56,  // 558: datanode.DatanodeService.YunSaveAttr:output_type -> datanode.FileAttrRes
	58,  // 559: datanode.DatanodeService.Thumbnail:output_type -> datanode.ThumbnailRes
	60,  // 560: datanode.DatanodeService.SetKeyValue:output_type -> datanode.SetKeyvalueRes
	62,  // 561: datanode.DatanodeService.GetKeyValue:output_type -> datanode.GetKeyvalueRes
	64,  // 562: datanode.DatanodeService.DelKeyValue:output_type -> datanode.DelKeyvalueRes
	65,  // 563: datanode.DatanodeService.QuestionVersion:output_type -> datanode.VersionRes
	69,  // 564: datanode.DatanodeService.QuestionChapter:output_type -> datanode.ChapterRes
	67,  // 565: datanode.DatanodeService.SubjectName:output_type -> datanode.SubjectNameRes
	70,  // 566: datanode.DatanodeService.QuestionSource:output_type -> datanode.SourceRes
	71,  // 567: datanode.DatanodeService.QuestionTixing:output_type -> datanode.TixingRes
	72,  // 568: datanode.DatanodeService.QuestionTimuCount:output_type -> datanode.TimuCountRes
	75,  // 569: datanode.DatanodeService.QuestionTimu:output_type -> datanode.TimuRes
	77,  // 570: datanode.DatanodeService.QuestionTimuById:output_type -> datanode.TimuByIdRes
	79,  // 571: datanode.DatanodeService.CollectTimu:output_type -> datanode.CollectRes
	81,  // 572: datanode.DatanodeService.QueryCollectTimu:output_type -> datanode.CollectListRes
	83,  // 573: datanode.DatanodeService.ModifyQuestion:output_type -> datanode.ModifyRes
	85,  // 574: datanode.DatanodeService.ModifyList:output_type -> datanode.ModifyListRes
	87,  // 575: datanode.DatanodeService.ModifyCount:output_type -> datanode.ModifyCountRes
	74,  // 576: datanode.DatanodeService.QuestionTimuAdd:output_type -> datanode.TimuAddRes
	147, // 577: datanode.DatanodeService.AddList:output_type -> datanode.AddListRes
	149, // 578: datanode.DatanodeService.AddCount:output_type -> datanode.AddCountRes
	89,  // 579: datanode.DatanodeService.Approve:output_type -> datanode.ApproveRes
	91,  // 580: datanode.DatanodeService.OnSearch:output_type -> datanode.SearchRes
	92,  // 581: datanode.DatanodeService.GradeCateAdd:output_type -> datanode.AddGradeCateRes
	93,  // 582: datanode.DatanodeService.GradeCateCount:output_type -> datanode.GradeCateCountRes
	95,  // 583: datanode.DatanodeService.GradeCateList:output_type -> datanode.GradeCateListRes
	96,  // 584: datanode.DatanodeService.HomeBlackData:output_type -> datanode.HomeBlackDataRes
	98,  // 585: datanode.DatanodeService.GradeSubject:output_type -> datanode.GradeSubjectRes
	99,  // 586: datanode.DatanodeService.SchoolRollAdd:output_type -> datanode.SchoolRollAddRes
	100, // 587: datanode.DatanodeService.SchoolRollCount:output_type -> datanode.SchoolRollCountRes
	102, // 588: datanode.DatanodeService.SchoolList:output_type -> datanode.SchoolRollListRes
	103, // 589: datanode.DatanodeService.SubjectCateAdd:output_type -> datanode.SubjectCateAddRes
	104, // 590: datanode.DatanodeService.SubjectCateCount:output_type -> datanode.SubjectCateCountRes
	106, // 591: datanode.DatanodeService.SubjectCateList:output_type -> datanode.SubjectCateListRes
	121, // 592: datanode.DatanodeService.SetUserInfo:output_type -> datanode.SetUserInfoRes
	123, // 593: datanode.DatanodeService.GetUserInfo:output_type -> datanode.GetUserInfoRes
	125, // 594: datanode.DatanodeService.SetWechatUinfo:output_type -> datanode.SetWechatUinfoRes
	127, // 595: datanode.DatanodeService.GetWechatUinfo:output_type -> datanode.GetWechatUinfoRes
	129, // 596: datanode.DatanodeService.SetAlipayUinfo:output_type -> datanode.SetAlipayUinfoRes
	131, // 597: datanode.DatanodeService.GetAlipayUinfo:output_type -> datanode.GetAlipayUinfoRes
	133, // 598: datanode.DatanodeService.SetBaiduEntity:output_type -> datanode.SetBaiduEntityRes
	135, // 599: datanode.DatanodeService.BaiduEntity:output_type -> datanode.BaiduEntityRes
	139, // 600: datanode.DatanodeService.SearchHistory:output_type -> datanode.SearchHistoryRes
	137, // 601: datanode.DatanodeService.SearchItem:output_type -> datanode.SearchItemRes
	141, // 602: datanode.DatanodeService.RefreshModifyReward:output_type -> datanode.RefreshModifyRewardRes
	151, // 603: datanode.DatanodeService.RefreshAddReward:output_type -> datanode.RefreshAddRewardRes
	143, // 604: datanode.DatanodeService.RefreshUserCoin:output_type -> datanode.RefreshUserCoinRes
	153, // 605: datanode.DatanodeService.TixingByVid:output_type -> datanode.TixingByVidRes
	155, // 606: datanode.DatanodeService.SourceByVid:output_type -> datanode.SourceByVidRes
	157, // 607: datanode.DatanodeService.IdentAdd:output_type -> datanode.IdentAddRes
	159, // 608: datanode.DatanodeService.IdentByIid:output_type -> datanode.IdentByIidRes
	161, // 609: datanode.DatanodeService.IdentList:output_type -> datanode.IdentListRes
	163, // 610: datanode.DatanodeService.IdentCount:output_type -> datanode.IdentCountRes
	165, // 611: datanode.DatanodeService.RefreshIdentReward:output_type -> datanode.RefreshIdentRewardRes
	168, // 612: datanode.DatanodeService.UpdateTeacher:output_type -> datanode.UpdateTeacherRes
	170, // 613: datanode.DatanodeService.GetTeacher:output_type -> datanode.FindTeacherRes
	172, // 614: datanode.DatanodeService.FocusTeacher:output_type -> datanode.FocusTeacherRes
	174, // 615: datanode.DatanodeService.NoteCooper:output_type -> datanode.NoteCooperRes
	176, // 616: datanode.DatanodeService.NoteTag:output_type -> datanode.NoteTagRes
	178, // 617: datanode.DatanodeService.NoteBgcolor:output_type -> datanode.NoteBgcolorRes
	180, // 618: datanode.DatanodeService.NoteTagAdd:output_type -> datanode.NoteTagAddRes
	182, // 619: datanode.DatanodeService.NoteTagList:output_type -> datanode.NoteTagListRes
	184, // 620: datanode.DatanodeService.SubmitCert:output_type -> datanode.SubmitCertRes
	186, // 621: datanode.DatanodeService.CertStatus:output_type -> datanode.CertStatusRes
	188, // 622: datanode.DatanodeService.CertInfo:output_type -> datanode.CertInfoRes
	190, // 623: datanode.DatanodeService.CertFlow:output_type -> datanode.CertFlowRes
	192, // 624: datanode.DatanodeService.AddUserLog:output_type -> datanode.AddUserLogRes
	194, // 625: datanode.DatanodeService.QueryUserLog:output_type -> datanode.QueryUserLogRes
	196, // 626: datanode.DatanodeService.UserLogCount:output_type -> datanode.UserLogCountRes
	198, // 627: datanode.DatanodeService.AddTask:output_type -> datanode.AddTaskRes
	200, // 628: datanode.DatanodeService.GetTask:output_type -> datanode.GetTaskRes
	202, // 629: datanode.DatanodeService.GetTaskCount:output_type -> datanode.GetTaskCountRes
	206, // 630: datanode.DatanodeService.AddPkg:output_type -> datanode.AddPkgRes
	208, // 631: datanode.DatanodeService.DelPkg:output_type -> datanode.DelPkgRes
	210, // 632: datanode.DatanodeService.PkgLists:output_type -> datanode.PkgListRes
	212, // 633: datanode.DatanodeService.PkgCount:output_type -> datanode.PkgCountRes
	214, // 634: datanode.DatanodeService.SponsorAdd:output_type -> datanode.SponsorAddRes
	216, // 635: datanode.DatanodeService.SponsorList:output_type -> datanode.SponsorListRes
	218, // 636: datanode.DatanodeService.VipLimit:output_type -> datanode.VipLimitRes
	220, // 637: datanode.DatanodeService.VipProduct:output_type -> datanode.VipProductRes
	232, // 638: datanode.DatanodeService.VipDesc:output_type -> datanode.VipDescRes
	222, // 639: datanode.DatanodeService.VipPay:output_type -> datanode.VipPayRes
	224, // 640: datanode.DatanodeService.VipOrderStatus:output_type -> datanode.VipOrderStatusRes
	226, // 641: datanode.DatanodeService.VipOrderList:output_type -> datanode.VipOrderListRes
	228, // 642: datanode.DatanodeService.UserScore:output_type -> datanode.UserScoreRes
	230, // 643: datanode.DatanodeService.UserVip:output_type -> datanode.UserVipRes
	234, // 644: datanode.DatanodeService.FootLog:output_type -> datanode.FootLogRes
	236, // 645: datanode.DatanodeService.AddExam:output_type -> datanode.AddExamRes
	238, // 646: datanode.DatanodeService.ExamLists:output_type -> datanode.ExamListRes
	526, // [526:647] is the sub-list for method output_type
	405, // [405:526] is the sub-list for method input_type
	405, // [405:405] is the sub-list for extension type_name
	405, // [405:405] is the sub-list for extension extendee
	0,   // [0:405] is the sub-list for field type_name
}

func init() { file_datanode_proto_init() }
func file_datanode_proto_init() {
	if File_datanode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_datanode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgreeFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendsListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgreeFriendRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fgroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Friend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameGroupRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendNoteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFriendNoteRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveGroupRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikesCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikesAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikesListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFriendRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikesCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikesAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Likes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikesListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNoteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteMetaRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteMetaListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteMetaListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteHtmlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteListCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteHtmlRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentsCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentsCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Moments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMomentsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentsListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentsListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDirReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDirRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDirReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDirRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFileRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileAttrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileAttrRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThumbnailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThumbnailRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetKeyvalueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetKeyvalueRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyvalueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyvalueRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelKeyvalueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelKeyvalueRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectNameRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterResItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TixingRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimuCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimuAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimuAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimuRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimuByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimuByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGradeCateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeCateCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeCateListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeCateListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBlackDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeSubjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeSubjectRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolRollAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolRollCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolRollListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchoolRollListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectCateAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectCateCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectCateListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectCateListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttentionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAttentionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAttentionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAttentionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAttentionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttentionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttentionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserAttentionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserAttentionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAttentionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAttentionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserAttentionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserAttentionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWechatUinfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWechatUinfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWechatUinfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWechatUinfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAlipayUinfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAlipayUinfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlipayUinfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlipayUinfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBaiduEntityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBaiduEntityRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduEntityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduEntityRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchItemRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchHistoryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshModifyRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshModifyRewardRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshUserCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshUserCoinRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddQuestionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddQuestionRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshAddRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshAddRewardRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TixingByVidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TixingByVidRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceByVidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceByVidRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentByIidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentByIidRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshIdentRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshIdentRewardRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeacherItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTeacherReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTeacherRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTeacherReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTeacherRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FocusTeacherReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FocusTeacherRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteCooperReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteCooperRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTagRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteBgcolorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteBgcolorRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTagAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTagAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTagListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTagListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitCertReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitCertRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserLogRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserLogRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTaskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserinfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserinfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPkgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPkgRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPkgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPkgRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkgListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkgListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkgCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PkgCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SponsorAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SponsorAddRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SponsorListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SponsorListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLimitRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipProductRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPayRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipOrderStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipOrderStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipOrderListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipOrderListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScoreReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScoreRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVipRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipDescReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipDescRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootLogRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExamRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datanode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   439,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_datanode_proto_goTypes,
		DependencyIndexes: file_datanode_proto_depIdxs,
		MessageInfos:      file_datanode_proto_msgTypes,
	}.Build()
	File_datanode_proto = out.File
	file_datanode_proto_rawDesc = nil
	file_datanode_proto_goTypes = nil
	file_datanode_proto_depIdxs = nil
}
