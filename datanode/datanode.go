// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package datanode

import (
	"bytes"
	"context"
	"fmt"
	"reflect"

	"github.com/heegspace/heegproto/rescode"
	"github.com/heegspace/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = rescode.GoUnusedProtection__

// Attributes:
//  - UID
//  - Account
//  - PassWd
//  - UserName
//  - Brithday
//  - CardID
//  - Address
//  - NickName
//  - Avatar
//  - Phone
//  - LoginAt
//  - LoginIP
//  - LastAt
//  - Status
//  - Role
//  - Email
//  - ContactName
//  - BrandName
//  - CompanyName
//  - Attention
//  - UpdateAt
//  - Vip
//  - Coin
type User struct {
	UID         string  `thrift:"uid,1" db:"uid" json:"uid"`
	Account     string  `thrift:"account,2" db:"account" json:"account"`
	PassWd      string  `thrift:"pass_wd,3" db:"pass_wd" json:"pass_wd"`
	UserName    string  `thrift:"user_name,4" db:"user_name" json:"user_name"`
	Brithday    string  `thrift:"brithday,5" db:"brithday" json:"brithday"`
	CardID      string  `thrift:"card_id,6" db:"card_id" json:"card_id"`
	Address     string  `thrift:"address,7" db:"address" json:"address"`
	NickName    string  `thrift:"nick_name,8" db:"nick_name" json:"nick_name"`
	Avatar      string  `thrift:"avatar,9" db:"avatar" json:"avatar"`
	Phone       string  `thrift:"phone,10" db:"phone" json:"phone"`
	LoginAt     string  `thrift:"login_at,11" db:"login_at" json:"login_at"`
	LoginIP     string  `thrift:"login_ip,12" db:"login_ip" json:"login_ip"`
	LastAt      string  `thrift:"last_at,13" db:"last_at" json:"last_at"`
	Status      int16   `thrift:"status,14" db:"status" json:"status"`
	Role        int64   `thrift:"role,15" db:"role" json:"role"`
	Email       string  `thrift:"email,16" db:"email" json:"email"`
	ContactName string  `thrift:"contact_name,17" db:"contact_name" json:"contact_name"`
	BrandName   string  `thrift:"brand_name,18" db:"brand_name" json:"brand_name"`
	CompanyName string  `thrift:"company_name,19" db:"company_name" json:"company_name"`
	Attention   string  `thrift:"attention,20" db:"attention" json:"attention"`
	UpdateAt    string  `thrift:"update_at,21" db:"update_at" json:"update_at"`
	Vip         int64   `thrift:"vip,22" db:"vip" json:"vip"`
	Coin        float64 `thrift:"coin,23" db:"coin" json:"coin"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) GetUID() string {
	return p.UID
}

func (p *User) GetAccount() string {
	return p.Account
}

func (p *User) GetPassWd() string {
	return p.PassWd
}

func (p *User) GetUserName() string {
	return p.UserName
}

func (p *User) GetBrithday() string {
	return p.Brithday
}

func (p *User) GetCardID() string {
	return p.CardID
}

func (p *User) GetAddress() string {
	return p.Address
}

func (p *User) GetNickName() string {
	return p.NickName
}

func (p *User) GetAvatar() string {
	return p.Avatar
}

func (p *User) GetPhone() string {
	return p.Phone
}

func (p *User) GetLoginAt() string {
	return p.LoginAt
}

func (p *User) GetLoginIP() string {
	return p.LoginIP
}

func (p *User) GetLastAt() string {
	return p.LastAt
}

func (p *User) GetStatus() int16 {
	return p.Status
}

func (p *User) GetRole() int64 {
	return p.Role
}

func (p *User) GetEmail() string {
	return p.Email
}

func (p *User) GetContactName() string {
	return p.ContactName
}

func (p *User) GetBrandName() string {
	return p.BrandName
}

func (p *User) GetCompanyName() string {
	return p.CompanyName
}

func (p *User) GetAttention() string {
	return p.Attention
}

func (p *User) GetUpdateAt() string {
	return p.UpdateAt
}

func (p *User) GetVip() int64 {
	return p.Vip
}

func (p *User) GetCoin() float64 {
	return p.Coin
}
func (p *User) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField16(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField17(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField18(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField19(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField23(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *User) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *User) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Account = v
	}
	return nil
}

func (p *User) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PassWd = v
	}
	return nil
}

func (p *User) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *User) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Brithday = v
	}
	return nil
}

func (p *User) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CardID = v
	}
	return nil
}

func (p *User) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *User) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.NickName = v
	}
	return nil
}

func (p *User) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *User) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *User) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.LoginAt = v
	}
	return nil
}

func (p *User) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.LoginIP = v
	}
	return nil
}

func (p *User) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.LastAt = v
	}
	return nil
}

func (p *User) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *User) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Role = v
	}
	return nil
}

func (p *User) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *User) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.ContactName = v
	}
	return nil
}

func (p *User) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.BrandName = v
	}
	return nil
}

func (p *User) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.CompanyName = v
	}
	return nil
}

func (p *User) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Attention = v
	}
	return nil
}

func (p *User) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.UpdateAt = v
	}
	return nil
}

func (p *User) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.Vip = v
	}
	return nil
}

func (p *User) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.Coin = v
	}
	return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("user"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("account", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err)
	}
	if err := oprot.WriteString(string(p.Account)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err)
	}
	return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pass_wd", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pass_wd: ", p), err)
	}
	if err := oprot.WriteString(string(p.PassWd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pass_wd (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pass_wd: ", p), err)
	}
	return err
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_name (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_name: ", p), err)
	}
	return err
}

func (p *User) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("brithday", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:brithday: ", p), err)
	}
	if err := oprot.WriteString(string(p.Brithday)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.brithday (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:brithday: ", p), err)
	}
	return err
}

func (p *User) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("card_id", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:card_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.CardID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.card_id (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:card_id: ", p), err)
	}
	return err
}

func (p *User) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("address", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:address: ", p), err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.address (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:address: ", p), err)
	}
	return err
}

func (p *User) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nick_name", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:nick_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.NickName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nick_name (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:nick_name: ", p), err)
	}
	return err
}

func (p *User) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:avatar: ", p), err)
	}
	if err := oprot.WriteString(string(p.Avatar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.avatar (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:avatar: ", p), err)
	}
	return err
}

func (p *User) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:phone: ", p), err)
	}
	return err
}

func (p *User) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login_at", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:login_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.LoginAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login_at (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:login_at: ", p), err)
	}
	return err
}

func (p *User) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login_ip", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:login_ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.LoginIP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login_ip (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:login_ip: ", p), err)
	}
	return err
}

func (p *User) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("last_at", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:last_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.LastAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.last_at (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:last_at: ", p), err)
	}
	return err
}

func (p *User) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I16, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:status: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:status: ", p), err)
	}
	return err
}

func (p *User) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role", thrift.I64, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:role: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Role)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.role (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:role: ", p), err)
	}
	return err
}

func (p *User) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:email: ", p), err)
	}
	return err
}

func (p *User) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contact_name", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:contact_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.ContactName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contact_name (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:contact_name: ", p), err)
	}
	return err
}

func (p *User) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("brand_name", thrift.STRING, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:brand_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.BrandName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.brand_name (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:brand_name: ", p), err)
	}
	return err
}

func (p *User) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("company_name", thrift.STRING, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:company_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.CompanyName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.company_name (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:company_name: ", p), err)
	}
	return err
}

func (p *User) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attention", thrift.STRING, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:attention: ", p), err)
	}
	if err := oprot.WriteString(string(p.Attention)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attention (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:attention: ", p), err)
	}
	return err
}

func (p *User) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("update_at", thrift.STRING, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:update_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.UpdateAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.update_at (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:update_at: ", p), err)
	}
	return err
}

func (p *User) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vip", thrift.I64, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:vip: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Vip)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vip (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:vip: ", p), err)
	}
	return err
}

func (p *User) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("coin", thrift.DOUBLE, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:coin: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Coin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.coin (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:coin: ", p), err)
	}
	return err
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - UID
type UserInfoReq struct {
	UID string `thrift:"uid,1" db:"uid" json:"uid"`
}

func NewUserInfoReq() *UserInfoReq {
	return &UserInfoReq{}
}

func (p *UserInfoReq) GetUID() string {
	return p.UID
}
func (p *UserInfoReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *UserInfoReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("user_info_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *UserInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoReq(%+v)", *p)
}

// Attributes:
//  - Account
//  - Code
//  - PassWd
//  - ClientIP
//  - Role
type NewUserReq_ struct {
	Account  string `thrift:"account,1" db:"account" json:"account"`
	Code     string `thrift:"code,2" db:"code" json:"code"`
	PassWd   string `thrift:"pass_wd,3" db:"pass_wd" json:"pass_wd"`
	ClientIP string `thrift:"client_ip,4" db:"client_ip" json:"client_ip"`
	Role     int32  `thrift:"role,5" db:"role" json:"role"`
}

func NewNewUserReq_() *NewUserReq_ {
	return &NewUserReq_{}
}

func (p *NewUserReq_) GetAccount() string {
	return p.Account
}

func (p *NewUserReq_) GetCode() string {
	return p.Code
}

func (p *NewUserReq_) GetPassWd() string {
	return p.PassWd
}

func (p *NewUserReq_) GetClientIP() string {
	return p.ClientIP
}

func (p *NewUserReq_) GetRole() int32 {
	return p.Role
}
func (p *NewUserReq_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NewUserReq_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Account = v
	}
	return nil
}

func (p *NewUserReq_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *NewUserReq_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PassWd = v
	}
	return nil
}

func (p *NewUserReq_) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ClientIP = v
	}
	return nil
}

func (p *NewUserReq_) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Role = v
	}
	return nil
}

func (p *NewUserReq_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("new_user_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NewUserReq_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err)
	}
	if err := oprot.WriteString(string(p.Account)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err)
	}
	return err
}

func (p *NewUserReq_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code: ", p), err)
	}
	return err
}

func (p *NewUserReq_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pass_wd", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pass_wd: ", p), err)
	}
	if err := oprot.WriteString(string(p.PassWd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pass_wd (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pass_wd: ", p), err)
	}
	return err
}

func (p *NewUserReq_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("client_ip", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:client_ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClientIP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.client_ip (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:client_ip: ", p), err)
	}
	return err
}

func (p *NewUserReq_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:role: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Role)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.role (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:role: ", p), err)
	}
	return err
}

func (p *NewUserReq_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NewUserReq_(%+v)", *p)
}

// Attributes:
//  - Uids
//  - UserName
//  - Phone
//  - Email
type SearchUserReq struct {
	Uids     []string `thrift:"uids,1" db:"uids" json:"uids"`
	UserName string   `thrift:"user_name,2" db:"user_name" json:"user_name"`
	Phone    string   `thrift:"phone,3" db:"phone" json:"phone"`
	Email    string   `thrift:"email,4" db:"email" json:"email"`
}

func NewSearchUserReq() *SearchUserReq {
	return &SearchUserReq{}
}

func (p *SearchUserReq) GetUids() []string {
	return p.Uids
}

func (p *SearchUserReq) GetUserName() string {
	return p.UserName
}

func (p *SearchUserReq) GetPhone() string {
	return p.Phone
}

func (p *SearchUserReq) GetEmail() string {
	return p.Email
}
func (p *SearchUserReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchUserReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Uids = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Uids = append(p.Uids, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SearchUserReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *SearchUserReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *SearchUserReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *SearchUserReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_user_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Uids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Uids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uids: ", p), err)
	}
	return err
}

func (p *SearchUserReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_name: ", p), err)
	}
	return err
}

func (p *SearchUserReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:phone: ", p), err)
	}
	return err
}

func (p *SearchUserReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:email: ", p), err)
	}
	return err
}

func (p *SearchUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchUserReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - User
type UserRes struct {
	Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string       `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
	User    *User        `thrift:"user,3" db:"user" json:"user"`
}

func NewUserRes() *UserRes {
	return &UserRes{}
}

func (p *UserRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *UserRes) GetResmsg() string {
	return p.Resmsg
}

var UserRes_User_DEFAULT *User

func (p *UserRes) GetUser() *User {
	if !p.IsSetUser() {
		return UserRes_User_DEFAULT
	}
	return p.User
}
func (p *UserRes) IsSetUser() bool {
	return p.User != nil
}

func (p *UserRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *UserRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *UserRes) ReadField3(iprot thrift.TProtocol) error {
	p.User = &User{}
	if err := p.User.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
	}
	return nil
}

func (p *UserRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("user_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *UserRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *UserRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user: ", p), err)
	}
	if err := p.User.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user: ", p), err)
	}
	return err
}

func (p *UserRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - PassWd
//  - UserName
//  - Brithday
//  - CardID
//  - Address
//  - NickName
//  - Avatar
//  - Phone
//  - LoginAt
//  - LoginIP
//  - LastAt
//  - Status
//  - Role
//  - Email
//  - ContactName
//  - BrandName
//  - CompanyName
//  - Attention
//  - UpdateAt
//  - Vip
//  - Coin
type UpdateReq struct {
	UID         string  `thrift:"uid,1" db:"uid" json:"uid"`
	PassWd      string  `thrift:"pass_wd,2" db:"pass_wd" json:"pass_wd"`
	UserName    string  `thrift:"user_name,3" db:"user_name" json:"user_name"`
	Brithday    string  `thrift:"brithday,4" db:"brithday" json:"brithday"`
	CardID      string  `thrift:"card_id,5" db:"card_id" json:"card_id"`
	Address     string  `thrift:"address,6" db:"address" json:"address"`
	NickName    string  `thrift:"nick_name,7" db:"nick_name" json:"nick_name"`
	Avatar      string  `thrift:"avatar,8" db:"avatar" json:"avatar"`
	Phone       string  `thrift:"phone,9" db:"phone" json:"phone"`
	LoginAt     string  `thrift:"login_at,10" db:"login_at" json:"login_at"`
	LoginIP     string  `thrift:"login_ip,11" db:"login_ip" json:"login_ip"`
	LastAt      string  `thrift:"last_at,12" db:"last_at" json:"last_at"`
	Status      int16   `thrift:"status,13" db:"status" json:"status"`
	Role        int64   `thrift:"role,14" db:"role" json:"role"`
	Email       string  `thrift:"email,15" db:"email" json:"email"`
	ContactName string  `thrift:"contact_name,16" db:"contact_name" json:"contact_name"`
	BrandName   string  `thrift:"brand_name,17" db:"brand_name" json:"brand_name"`
	CompanyName string  `thrift:"company_name,18" db:"company_name" json:"company_name"`
	Attention   string  `thrift:"attention,19" db:"attention" json:"attention"`
	UpdateAt    string  `thrift:"update_at,20" db:"update_at" json:"update_at"`
	Vip         int64   `thrift:"vip,21" db:"vip" json:"vip"`
	Coin        float64 `thrift:"coin,22" db:"coin" json:"coin"`
}

func NewUpdateReq() *UpdateReq {
	return &UpdateReq{}
}

func (p *UpdateReq) GetUID() string {
	return p.UID
}

func (p *UpdateReq) GetPassWd() string {
	return p.PassWd
}

func (p *UpdateReq) GetUserName() string {
	return p.UserName
}

func (p *UpdateReq) GetBrithday() string {
	return p.Brithday
}

func (p *UpdateReq) GetCardID() string {
	return p.CardID
}

func (p *UpdateReq) GetAddress() string {
	return p.Address
}

func (p *UpdateReq) GetNickName() string {
	return p.NickName
}

func (p *UpdateReq) GetAvatar() string {
	return p.Avatar
}

func (p *UpdateReq) GetPhone() string {
	return p.Phone
}

func (p *UpdateReq) GetLoginAt() string {
	return p.LoginAt
}

func (p *UpdateReq) GetLoginIP() string {
	return p.LoginIP
}

func (p *UpdateReq) GetLastAt() string {
	return p.LastAt
}

func (p *UpdateReq) GetStatus() int16 {
	return p.Status
}

func (p *UpdateReq) GetRole() int64 {
	return p.Role
}

func (p *UpdateReq) GetEmail() string {
	return p.Email
}

func (p *UpdateReq) GetContactName() string {
	return p.ContactName
}

func (p *UpdateReq) GetBrandName() string {
	return p.BrandName
}

func (p *UpdateReq) GetCompanyName() string {
	return p.CompanyName
}

func (p *UpdateReq) GetAttention() string {
	return p.Attention
}

func (p *UpdateReq) GetUpdateAt() string {
	return p.UpdateAt
}

func (p *UpdateReq) GetVip() int64 {
	return p.Vip
}

func (p *UpdateReq) GetCoin() float64 {
	return p.Coin
}
func (p *UpdateReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField16(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField17(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField18(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField19(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *UpdateReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PassWd = v
	}
	return nil
}

func (p *UpdateReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *UpdateReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Brithday = v
	}
	return nil
}

func (p *UpdateReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CardID = v
	}
	return nil
}

func (p *UpdateReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *UpdateReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.NickName = v
	}
	return nil
}

func (p *UpdateReq) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *UpdateReq) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *UpdateReq) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.LoginAt = v
	}
	return nil
}

func (p *UpdateReq) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.LoginIP = v
	}
	return nil
}

func (p *UpdateReq) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.LastAt = v
	}
	return nil
}

func (p *UpdateReq) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UpdateReq) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Role = v
	}
	return nil
}

func (p *UpdateReq) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *UpdateReq) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.ContactName = v
	}
	return nil
}

func (p *UpdateReq) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.BrandName = v
	}
	return nil
}

func (p *UpdateReq) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.CompanyName = v
	}
	return nil
}

func (p *UpdateReq) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.Attention = v
	}
	return nil
}

func (p *UpdateReq) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.UpdateAt = v
	}
	return nil
}

func (p *UpdateReq) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.Vip = v
	}
	return nil
}

func (p *UpdateReq) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.Coin = v
	}
	return nil
}

func (p *UpdateReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pass_wd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pass_wd: ", p), err)
	}
	if err := oprot.WriteString(string(p.PassWd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pass_wd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pass_wd: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_name: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("brithday", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:brithday: ", p), err)
	}
	if err := oprot.WriteString(string(p.Brithday)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.brithday (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:brithday: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("card_id", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:card_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.CardID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.card_id (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:card_id: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("address", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:address: ", p), err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.address (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:address: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nick_name", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:nick_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.NickName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nick_name (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:nick_name: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:avatar: ", p), err)
	}
	if err := oprot.WriteString(string(p.Avatar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.avatar (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:avatar: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:phone: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login_at", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:login_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.LoginAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login_at (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:login_at: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login_ip", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:login_ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.LoginIP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login_ip (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:login_ip: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("last_at", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:last_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.LastAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.last_at (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:last_at: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I16, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:status: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:status: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role", thrift.I64, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:role: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Role)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.role (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:role: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:email: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contact_name", thrift.STRING, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:contact_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.ContactName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contact_name (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:contact_name: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("brand_name", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:brand_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.BrandName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.brand_name (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:brand_name: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("company_name", thrift.STRING, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:company_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.CompanyName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.company_name (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:company_name: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attention", thrift.STRING, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:attention: ", p), err)
	}
	if err := oprot.WriteString(string(p.Attention)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attention (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:attention: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("update_at", thrift.STRING, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:update_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.UpdateAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.update_at (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:update_at: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vip", thrift.I64, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:vip: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Vip)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vip (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:vip: ", p), err)
	}
	return err
}

func (p *UpdateReq) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("coin", thrift.DOUBLE, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:coin: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Coin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.coin (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:coin: ", p), err)
	}
	return err
}

func (p *UpdateReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateReq(%+v)", *p)
}

// Attributes:
//  - Phone
type AddFriendReq struct {
	Phone string `thrift:"phone,1" db:"phone" json:"phone"`
}

func NewAddFriendReq() *AddFriendReq {
	return &AddFriendReq{}
}

func (p *AddFriendReq) GetPhone() string {
	return p.Phone
}
func (p *AddFriendReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddFriendReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *AddFriendReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_friend_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phone: ", p), err)
	}
	return err
}

func (p *AddFriendReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type AddFriendRes struct {
	Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string       `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewAddFriendRes() *AddFriendRes {
	return &AddFriendRes{}
}

func (p *AddFriendRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *AddFriendRes) GetResmsg() string {
	return p.Resmsg
}
func (p *AddFriendRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddFriendRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *AddFriendRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *AddFriendRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_friend_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddFriendRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *AddFriendRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *AddFriendRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendRes(%+v)", *p)
}

// Attributes:
//  - UID
type AgreeFriendReq struct {
	UID string `thrift:"uid,1" db:"uid" json:"uid"`
}

func NewAgreeFriendReq() *AgreeFriendReq {
	return &AgreeFriendReq{}
}

func (p *AgreeFriendReq) GetUID() string {
	return p.UID
}
func (p *AgreeFriendReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AgreeFriendReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *AgreeFriendReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("agree_friend_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AgreeFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *AgreeFriendReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgreeFriendReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type AgreeFriendRes struct {
	Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string       `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewAgreeFriendRes() *AgreeFriendRes {
	return &AgreeFriendRes{}
}

func (p *AgreeFriendRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *AgreeFriendRes) GetResmsg() string {
	return p.Resmsg
}
func (p *AgreeFriendRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AgreeFriendRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *AgreeFriendRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *AgreeFriendRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("agree_friend_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AgreeFriendRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *AgreeFriendRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *AgreeFriendRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgreeFriendRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Note
//  - Account
//  - NickName
//  - Avatar
//  - Brithday
//  - JoinAt
type FriendItem struct {
	UID      string `thrift:"uid,1" db:"uid" json:"uid"`
	Note     string `thrift:"note,2" db:"note" json:"note"`
	Account  string `thrift:"account,3" db:"account" json:"account"`
	NickName string `thrift:"nick_name,4" db:"nick_name" json:"nick_name"`
	Avatar   string `thrift:"avatar,5" db:"avatar" json:"avatar"`
	Brithday string `thrift:"brithday,6" db:"brithday" json:"brithday"`
	JoinAt   int64  `thrift:"join_at,7" db:"join_at" json:"join_at"`
}

func NewFriendItem() *FriendItem {
	return &FriendItem{}
}

func (p *FriendItem) GetUID() string {
	return p.UID
}

func (p *FriendItem) GetNote() string {
	return p.Note
}

func (p *FriendItem) GetAccount() string {
	return p.Account
}

func (p *FriendItem) GetNickName() string {
	return p.NickName
}

func (p *FriendItem) GetAvatar() string {
	return p.Avatar
}

func (p *FriendItem) GetBrithday() string {
	return p.Brithday
}

func (p *FriendItem) GetJoinAt() int64 {
	return p.JoinAt
}
func (p *FriendItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FriendItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *FriendItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Note = v
	}
	return nil
}

func (p *FriendItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Account = v
	}
	return nil
}

func (p *FriendItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NickName = v
	}
	return nil
}

func (p *FriendItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *FriendItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Brithday = v
	}
	return nil
}

func (p *FriendItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.JoinAt = v
	}
	return nil
}

func (p *FriendItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("friend_item"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FriendItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *FriendItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("note", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:note: ", p), err)
	}
	if err := oprot.WriteString(string(p.Note)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.note (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:note: ", p), err)
	}
	return err
}

func (p *FriendItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("account", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:account: ", p), err)
	}
	if err := oprot.WriteString(string(p.Account)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.account (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:account: ", p), err)
	}
	return err
}

func (p *FriendItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nick_name", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nick_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.NickName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nick_name (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nick_name: ", p), err)
	}
	return err
}

func (p *FriendItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:avatar: ", p), err)
	}
	if err := oprot.WriteString(string(p.Avatar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.avatar (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:avatar: ", p), err)
	}
	return err
}

func (p *FriendItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("brithday", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:brithday: ", p), err)
	}
	if err := oprot.WriteString(string(p.Brithday)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.brithday (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:brithday: ", p), err)
	}
	return err
}

func (p *FriendItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("join_at", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:join_at: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.JoinAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.join_at (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:join_at: ", p), err)
	}
	return err
}

func (p *FriendItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendItem(%+v)", *p)
}

// Attributes:
//  - Sort
//  - Name
//  - Lists
type Group struct {
	Sort  int64         `thrift:"sort,1" db:"sort" json:"sort"`
	Name  string        `thrift:"name,2" db:"name" json:"name"`
	Lists []*FriendItem `thrift:"lists,3" db:"lists" json:"lists"`
}

func NewGroup() *Group {
	return &Group{}
}

func (p *Group) GetSort() int64 {
	return p.Sort
}

func (p *Group) GetName() string {
	return p.Name
}

func (p *Group) GetLists() []*FriendItem {
	return p.Lists
}
func (p *Group) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Group) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Sort = v
	}
	return nil
}

func (p *Group) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Group) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FriendItem, 0, size)
	p.Lists = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &FriendItem{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Lists = append(p.Lists, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Group) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("group"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Group) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sort", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sort: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Sort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sort (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sort: ", p), err)
	}
	return err
}

func (p *Group) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *Group) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lists", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lists: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lists)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Lists {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lists: ", p), err)
	}
	return err
}

func (p *Group) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Group(%+v)", *p)
}

// Attributes:
//  - Total
//  - Data
//  - Invite
//  - Blacks
type Friend struct {
	Total  int64         `thrift:"total,1" db:"total" json:"total"`
	Data   []*Group      `thrift:"data,2" db:"data" json:"data"`
	Invite []*FriendItem `thrift:"invite,3" db:"invite" json:"invite"`
	Blacks []*FriendItem `thrift:"blacks,4" db:"blacks" json:"blacks"`
}

func NewFriend() *Friend {
	return &Friend{}
}

func (p *Friend) GetTotal() int64 {
	return p.Total
}

func (p *Friend) GetData() []*Group {
	return p.Data
}

func (p *Friend) GetInvite() []*FriendItem {
	return p.Invite
}

func (p *Friend) GetBlacks() []*FriendItem {
	return p.Blacks
}
func (p *Friend) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Friend) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *Friend) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Group, 0, size)
	p.Data = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &Group{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Data = append(p.Data, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Friend) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FriendItem, 0, size)
	p.Invite = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &FriendItem{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.Invite = append(p.Invite, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Friend) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FriendItem, 0, size)
	p.Blacks = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &FriendItem{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.Blacks = append(p.Blacks, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Friend) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("friend"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Friend) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:total: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:total: ", p), err)
	}
	return err
}

func (p *Friend) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err)
	}
	return err
}

func (p *Friend) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("invite", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invite: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Invite)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Invite {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invite: ", p), err)
	}
	return err
}

func (p *Friend) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blacks", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:blacks: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Blacks)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Blacks {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:blacks: ", p), err)
	}
	return err
}

func (p *Friend) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Friend(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Friends
type FriendRes struct {
	Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string       `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
	Friends *Friend      `thrift:"friends,3" db:"friends" json:"friends"`
}

func NewFriendRes() *FriendRes {
	return &FriendRes{}
}

func (p *FriendRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *FriendRes) GetResmsg() string {
	return p.Resmsg
}

var FriendRes_Friends_DEFAULT *Friend

func (p *FriendRes) GetFriends() *Friend {
	if !p.IsSetFriends() {
		return FriendRes_Friends_DEFAULT
	}
	return p.Friends
}
func (p *FriendRes) IsSetFriends() bool {
	return p.Friends != nil
}

func (p *FriendRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FriendRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *FriendRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *FriendRes) ReadField3(iprot thrift.TProtocol) error {
	p.Friends = &Friend{}
	if err := p.Friends.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Friends), err)
	}
	return nil
}

func (p *FriendRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("friend_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FriendRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *FriendRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *FriendRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("friends", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:friends: ", p), err)
	}
	if err := p.Friends.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Friends), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:friends: ", p), err)
	}
	return err
}

func (p *FriendRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendRes(%+v)", *p)
}

// Attributes:
//  - Name
type CreateGroupReq struct {
	Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewCreateGroupReq() *CreateGroupReq {
	return &CreateGroupReq{}
}

func (p *CreateGroupReq) GetName() string {
	return p.Name
}
func (p *CreateGroupReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateGroupReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateGroupReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_group_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateGroupReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *CreateGroupReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateGroupReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type CreateGroupRes struct {
	Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string       `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewCreateGroupRes() *CreateGroupRes {
	return &CreateGroupRes{}
}

func (p *CreateGroupRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *CreateGroupRes) GetResmsg() string {
	return p.Resmsg
}
func (p *CreateGroupRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateGroupRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *CreateGroupRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *CreateGroupRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_group_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateGroupRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *CreateGroupRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *CreateGroupRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateGroupRes(%+v)", *p)
}

// Attributes:
//  - OldName
//  - NewName_
type RenameGroupReq struct {
	OldName  string `thrift:"old_name,1" db:"old_name" json:"old_name"`
	NewName_ string `thrift:"new_name,2" db:"new_name" json:"new_name"`
}

func NewRenameGroupReq() *RenameGroupReq {
	return &RenameGroupReq{}
}

func (p *RenameGroupReq) GetOldName() string {
	return p.OldName
}

func (p *RenameGroupReq) GetNewName_() string {
	return p.NewName_
}
func (p *RenameGroupReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RenameGroupReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OldName = v
	}
	return nil
}

func (p *RenameGroupReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NewName_ = v
	}
	return nil
}

func (p *RenameGroupReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rename_group_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RenameGroupReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:old_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.OldName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.old_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:old_name: ", p), err)
	}
	return err
}

func (p *RenameGroupReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.NewName_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.new_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_name: ", p), err)
	}
	return err
}

func (p *RenameGroupReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenameGroupReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type RenameGroupRes struct {
	Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string       `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewRenameGroupRes() *RenameGroupRes {
	return &RenameGroupRes{}
}

func (p *RenameGroupRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *RenameGroupRes) GetResmsg() string {
	return p.Resmsg
}
func (p *RenameGroupRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RenameGroupRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *RenameGroupRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *RenameGroupRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rename_group_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RenameGroupRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *RenameGroupRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *RenameGroupRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenameGroupRes(%+v)", *p)
}

// Attributes:
//  - Note
type AddFriendNoteReq struct {
	Note string `thrift:"note,1" db:"note" json:"note"`
}

func NewAddFriendNoteReq() *AddFriendNoteReq {
	return &AddFriendNoteReq{}
}

func (p *AddFriendNoteReq) GetNote() string {
	return p.Note
}
func (p *AddFriendNoteReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddFriendNoteReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Note = v
	}
	return nil
}

func (p *AddFriendNoteReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_friend_note_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddFriendNoteReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("note", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:note: ", p), err)
	}
	if err := oprot.WriteString(string(p.Note)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.note (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:note: ", p), err)
	}
	return err
}

func (p *AddFriendNoteReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendNoteReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type AddFriendNoteRes struct {
	Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string       `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewAddFriendNoteRes() *AddFriendNoteRes {
	return &AddFriendNoteRes{}
}

func (p *AddFriendNoteRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *AddFriendNoteRes) GetResmsg() string {
	return p.Resmsg
}
func (p *AddFriendNoteRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddFriendNoteRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *AddFriendNoteRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *AddFriendNoteRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_friend_note_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddFriendNoteRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *AddFriendNoteRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *AddFriendNoteRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendNoteRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Group
type MoveGroupReq struct {
	UID   string `thrift:"uid,1" db:"uid" json:"uid"`
	Group string `thrift:"group,2" db:"group" json:"group"`
}

func NewMoveGroupReq() *MoveGroupReq {
	return &MoveGroupReq{}
}

func (p *MoveGroupReq) GetUID() string {
	return p.UID
}

func (p *MoveGroupReq) GetGroup() string {
	return p.Group
}
func (p *MoveGroupReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MoveGroupReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *MoveGroupReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Group = v
	}
	return nil
}

func (p *MoveGroupReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("move_group_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MoveGroupReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *MoveGroupReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err)
	}
	if err := oprot.WriteString(string(p.Group)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.group (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err)
	}
	return err
}

func (p *MoveGroupReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MoveGroupReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type MoveGroupRes struct {
	Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string       `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewMoveGroupRes() *MoveGroupRes {
	return &MoveGroupRes{}
}

func (p *MoveGroupRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *MoveGroupRes) GetResmsg() string {
	return p.Resmsg
}
func (p *MoveGroupRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MoveGroupRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *MoveGroupRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *MoveGroupRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("move_group_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MoveGroupRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *MoveGroupRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *MoveGroupRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MoveGroupRes(%+v)", *p)
}

// Attributes:
//  - UID
type RemoveFriendReq struct {
	UID string `thrift:"uid,1" db:"uid" json:"uid"`
}

func NewRemoveFriendReq() *RemoveFriendReq {
	return &RemoveFriendReq{}
}

func (p *RemoveFriendReq) GetUID() string {
	return p.UID
}
func (p *RemoveFriendReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoveFriendReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *RemoveFriendReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remove_friend_req"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoveFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *RemoveFriendReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveFriendReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type RemoveFriendRes struct {
	Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
	Resmsg  string       `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewRemoveFriendRes() *RemoveFriendRes {
	return &RemoveFriendRes{}
}

func (p *RemoveFriendRes) GetRescode() rescode.Code {
	return p.Rescode
}

func (p *RemoveFriendRes) GetResmsg() string {
	return p.Resmsg
}
func (p *RemoveFriendRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RemoveFriendRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := rescode.Code(v)
		p.Rescode = temp
	}
	return nil
}

func (p *RemoveFriendRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *RemoveFriendRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remove_friend_res"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemoveFriendRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err)
	}
	return err
}

func (p *RemoveFriendRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err)
	}
	return err
}

func (p *RemoveFriendRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemoveFriendRes(%+v)", *p)
}

type DatanodeService interface {
	// Parameters:
	//  - Req
	CreateUser(ctx context.Context, req *NewUserReq_) (r *UserRes, err error)
	// Parameters:
	//  - Req
	UserInfo(ctx context.Context, req *UserInfoReq) (r *UserRes, err error)
	// Parameters:
	//  - Req
	SearchUser(ctx context.Context, req *SearchUserReq) (r []*User, err error)
	// Parameters:
	//  - Req
	UpdateUser(ctx context.Context, req *UpdateReq) (r *UserRes, err error)
	// Parameters:
	//  - UID
	//  - Req
	AddFriends(ctx context.Context, uid string, req *AddFriendReq) (r *AddFriendRes, err error)
	// Parameters:
	//  - UID
	//  - Req
	AgreeFriends(ctx context.Context, uid string, req *AgreeFriendReq) (r *AgreeFriendRes, err error)
	// Parameters:
	//  - UID
	//  - Uid2
	FriendsList(ctx context.Context, uid string, uid2 string) (r *FriendRes, err error)
	// Parameters:
	//  - UID
	//  - Req
	CreateGroup(ctx context.Context, uid string, req *CreateGroupReq) (r *CreateGroupRes, err error)
	// Parameters:
	//  - UID
	//  - Req
	RenameGroup(ctx context.Context, uid string, req *RenameGroupReq) (r *RenameGroupRes, err error)
	// Parameters:
	//  - UID
	//  - Req
	AddNoteFriend(ctx context.Context, uid string, req *AddFriendNoteReq) (r *AddFriendNoteRes, err error)
	// Parameters:
	//  - UID
	//  - Req
	MoveToNewGroup(ctx context.Context, uid string, req *MoveGroupReq) (r *MoveGroupRes, err error)
	// Parameters:
	//  - UID
	//  - Req
	RemoveFriend(ctx context.Context, uid string, req *RemoveFriendReq) (r *RemoveFriendRes, err error)
}

type DatanodeServiceClient struct {
	c thrift.TClient
}

func NewDatanodeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DatanodeServiceClient {
	return &DatanodeServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewDatanodeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DatanodeServiceClient {
	return &DatanodeServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewDatanodeServiceClient(c thrift.TClient) *DatanodeServiceClient {
	return &DatanodeServiceClient{
		c: c,
	}
}

func (p *DatanodeServiceClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) CreateUser(ctx context.Context, req *NewUserReq_) (r *UserRes, err error) {
	var _args5 DatanodeServiceCreateUserArgs
	_args5.Req = req
	var _result6 DatanodeServiceCreateUserResult
	if err = p.Client_().Call(ctx, "createUser", &_args5, &_result6); err != nil {
		return
	}
	return _result6.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) UserInfo(ctx context.Context, req *UserInfoReq) (r *UserRes, err error) {
	var _args7 DatanodeServiceUserInfoArgs
	_args7.Req = req
	var _result8 DatanodeServiceUserInfoResult
	if err = p.Client_().Call(ctx, "userInfo", &_args7, &_result8); err != nil {
		return
	}
	return _result8.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SearchUser(ctx context.Context, req *SearchUserReq) (r []*User, err error) {
	var _args9 DatanodeServiceSearchUserArgs
	_args9.Req = req
	var _result10 DatanodeServiceSearchUserResult
	if err = p.Client_().Call(ctx, "searchUser", &_args9, &_result10); err != nil {
		return
	}
	return _result10.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) UpdateUser(ctx context.Context, req *UpdateReq) (r *UserRes, err error) {
	var _args11 DatanodeServiceUpdateUserArgs
	_args11.Req = req
	var _result12 DatanodeServiceUpdateUserResult
	if err = p.Client_().Call(ctx, "updateUser", &_args11, &_result12); err != nil {
		return
	}
	return _result12.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) AddFriends(ctx context.Context, uid string, req *AddFriendReq) (r *AddFriendRes, err error) {
	var _args13 DatanodeServiceAddFriendsArgs
	_args13.UID = uid
	_args13.Req = req
	var _result14 DatanodeServiceAddFriendsResult
	if err = p.Client_().Call(ctx, "addFriends", &_args13, &_result14); err != nil {
		return
	}
	return _result14.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) AgreeFriends(ctx context.Context, uid string, req *AgreeFriendReq) (r *AgreeFriendRes, err error) {
	var _args15 DatanodeServiceAgreeFriendsArgs
	_args15.UID = uid
	_args15.Req = req
	var _result16 DatanodeServiceAgreeFriendsResult
	if err = p.Client_().Call(ctx, "agreeFriends", &_args15, &_result16); err != nil {
		return
	}
	return _result16.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Uid2
func (p *DatanodeServiceClient) FriendsList(ctx context.Context, uid string, uid2 string) (r *FriendRes, err error) {
	var _args17 DatanodeServiceFriendsListArgs
	_args17.UID = uid
	_args17.Uid2 = uid2
	var _result18 DatanodeServiceFriendsListResult
	if err = p.Client_().Call(ctx, "friendsList", &_args17, &_result18); err != nil {
		return
	}
	return _result18.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) CreateGroup(ctx context.Context, uid string, req *CreateGroupReq) (r *CreateGroupRes, err error) {
	var _args19 DatanodeServiceCreateGroupArgs
	_args19.UID = uid
	_args19.Req = req
	var _result20 DatanodeServiceCreateGroupResult
	if err = p.Client_().Call(ctx, "createGroup", &_args19, &_result20); err != nil {
		return
	}
	return _result20.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) RenameGroup(ctx context.Context, uid string, req *RenameGroupReq) (r *RenameGroupRes, err error) {
	var _args21 DatanodeServiceRenameGroupArgs
	_args21.UID = uid
	_args21.Req = req
	var _result22 DatanodeServiceRenameGroupResult
	if err = p.Client_().Call(ctx, "renameGroup", &_args21, &_result22); err != nil {
		return
	}
	return _result22.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) AddNoteFriend(ctx context.Context, uid string, req *AddFriendNoteReq) (r *AddFriendNoteRes, err error) {
	var _args23 DatanodeServiceAddNoteFriendArgs
	_args23.UID = uid
	_args23.Req = req
	var _result24 DatanodeServiceAddNoteFriendResult
	if err = p.Client_().Call(ctx, "addNoteFriend", &_args23, &_result24); err != nil {
		return
	}
	return _result24.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) MoveToNewGroup(ctx context.Context, uid string, req *MoveGroupReq) (r *MoveGroupRes, err error) {
	var _args25 DatanodeServiceMoveToNewGroupArgs
	_args25.UID = uid
	_args25.Req = req
	var _result26 DatanodeServiceMoveToNewGroupResult
	if err = p.Client_().Call(ctx, "moveToNewGroup", &_args25, &_result26); err != nil {
		return
	}
	return _result26.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) RemoveFriend(ctx context.Context, uid string, req *RemoveFriendReq) (r *RemoveFriendRes, err error) {
	var _args27 DatanodeServiceRemoveFriendArgs
	_args27.UID = uid
	_args27.Req = req
	var _result28 DatanodeServiceRemoveFriendResult
	if err = p.Client_().Call(ctx, "removeFriend", &_args27, &_result28); err != nil {
		return
	}
	return _result28.GetSuccess(), nil
}

type DatanodeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DatanodeService
}

func (p *DatanodeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DatanodeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DatanodeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDatanodeServiceProcessor(handler DatanodeService) *DatanodeServiceProcessor {

	self29 := &DatanodeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self29.processorMap["createUser"] = &datanodeServiceProcessorCreateUser{handler: handler}
	self29.processorMap["userInfo"] = &datanodeServiceProcessorUserInfo{handler: handler}
	self29.processorMap["searchUser"] = &datanodeServiceProcessorSearchUser{handler: handler}
	self29.processorMap["updateUser"] = &datanodeServiceProcessorUpdateUser{handler: handler}
	self29.processorMap["addFriends"] = &datanodeServiceProcessorAddFriends{handler: handler}
	self29.processorMap["agreeFriends"] = &datanodeServiceProcessorAgreeFriends{handler: handler}
	self29.processorMap["friendsList"] = &datanodeServiceProcessorFriendsList{handler: handler}
	self29.processorMap["createGroup"] = &datanodeServiceProcessorCreateGroup{handler: handler}
	self29.processorMap["renameGroup"] = &datanodeServiceProcessorRenameGroup{handler: handler}
	self29.processorMap["addNoteFriend"] = &datanodeServiceProcessorAddNoteFriend{handler: handler}
	self29.processorMap["moveToNewGroup"] = &datanodeServiceProcessorMoveToNewGroup{handler: handler}
	self29.processorMap["removeFriend"] = &datanodeServiceProcessorRemoveFriend{handler: handler}
	return self29
}

func (p *DatanodeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x30 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x30.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x30

}

type datanodeServiceProcessorCreateUser struct {
	handler DatanodeService
}

func (p *datanodeServiceProcessorCreateUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatanodeServiceCreateUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatanodeServiceCreateUserResult{}
	var retval *UserRes
	var err2 error
	if retval, err2 = p.handler.CreateUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createUser: "+err2.Error())
		oprot.WriteMessageBegin("createUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datanodeServiceProcessorUserInfo struct {
	handler DatanodeService
}

func (p *datanodeServiceProcessorUserInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatanodeServiceUserInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("userInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatanodeServiceUserInfoResult{}
	var retval *UserRes
	var err2 error
	if retval, err2 = p.handler.UserInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing userInfo: "+err2.Error())
		oprot.WriteMessageBegin("userInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("userInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datanodeServiceProcessorSearchUser struct {
	handler DatanodeService
}

func (p *datanodeServiceProcessorSearchUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatanodeServiceSearchUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("searchUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatanodeServiceSearchUserResult{}
	var retval []*User
	var err2 error
	if retval, err2 = p.handler.SearchUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing searchUser: "+err2.Error())
		oprot.WriteMessageBegin("searchUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("searchUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datanodeServiceProcessorUpdateUser struct {
	handler DatanodeService
}

func (p *datanodeServiceProcessorUpdateUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatanodeServiceUpdateUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatanodeServiceUpdateUserResult{}
	var retval *UserRes
	var err2 error
	if retval, err2 = p.handler.UpdateUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUser: "+err2.Error())
		oprot.WriteMessageBegin("updateUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datanodeServiceProcessorAddFriends struct {
	handler DatanodeService
}

func (p *datanodeServiceProcessorAddFriends) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatanodeServiceAddFriendsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addFriends", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatanodeServiceAddFriendsResult{}
	var retval *AddFriendRes
	var err2 error
	if retval, err2 = p.handler.AddFriends(ctx, args.UID, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addFriends: "+err2.Error())
		oprot.WriteMessageBegin("addFriends", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("addFriends", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datanodeServiceProcessorAgreeFriends struct {
	handler DatanodeService
}

func (p *datanodeServiceProcessorAgreeFriends) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatanodeServiceAgreeFriendsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("agreeFriends", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatanodeServiceAgreeFriendsResult{}
	var retval *AgreeFriendRes
	var err2 error
	if retval, err2 = p.handler.AgreeFriends(ctx, args.UID, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing agreeFriends: "+err2.Error())
		oprot.WriteMessageBegin("agreeFriends", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("agreeFriends", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datanodeServiceProcessorFriendsList struct {
	handler DatanodeService
}

func (p *datanodeServiceProcessorFriendsList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatanodeServiceFriendsListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("friendsList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatanodeServiceFriendsListResult{}
	var retval *FriendRes
	var err2 error
	if retval, err2 = p.handler.FriendsList(ctx, args.UID, args.Uid2); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing friendsList: "+err2.Error())
		oprot.WriteMessageBegin("friendsList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("friendsList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datanodeServiceProcessorCreateGroup struct {
	handler DatanodeService
}

func (p *datanodeServiceProcessorCreateGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatanodeServiceCreateGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatanodeServiceCreateGroupResult{}
	var retval *CreateGroupRes
	var err2 error
	if retval, err2 = p.handler.CreateGroup(ctx, args.UID, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createGroup: "+err2.Error())
		oprot.WriteMessageBegin("createGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datanodeServiceProcessorRenameGroup struct {
	handler DatanodeService
}

func (p *datanodeServiceProcessorRenameGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatanodeServiceRenameGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("renameGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatanodeServiceRenameGroupResult{}
	var retval *RenameGroupRes
	var err2 error
	if retval, err2 = p.handler.RenameGroup(ctx, args.UID, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renameGroup: "+err2.Error())
		oprot.WriteMessageBegin("renameGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("renameGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datanodeServiceProcessorAddNoteFriend struct {
	handler DatanodeService
}

func (p *datanodeServiceProcessorAddNoteFriend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatanodeServiceAddNoteFriendArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addNoteFriend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatanodeServiceAddNoteFriendResult{}
	var retval *AddFriendNoteRes
	var err2 error
	if retval, err2 = p.handler.AddNoteFriend(ctx, args.UID, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addNoteFriend: "+err2.Error())
		oprot.WriteMessageBegin("addNoteFriend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("addNoteFriend", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datanodeServiceProcessorMoveToNewGroup struct {
	handler DatanodeService
}

func (p *datanodeServiceProcessorMoveToNewGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatanodeServiceMoveToNewGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("moveToNewGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatanodeServiceMoveToNewGroupResult{}
	var retval *MoveGroupRes
	var err2 error
	if retval, err2 = p.handler.MoveToNewGroup(ctx, args.UID, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing moveToNewGroup: "+err2.Error())
		oprot.WriteMessageBegin("moveToNewGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("moveToNewGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datanodeServiceProcessorRemoveFriend struct {
	handler DatanodeService
}

func (p *datanodeServiceProcessorRemoveFriend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatanodeServiceRemoveFriendArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeFriend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatanodeServiceRemoveFriendResult{}
	var retval *RemoveFriendRes
	var err2 error
	if retval, err2 = p.handler.RemoveFriend(ctx, args.UID, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeFriend: "+err2.Error())
		oprot.WriteMessageBegin("removeFriend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("removeFriend", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type DatanodeServiceCreateUserArgs struct {
	Req *NewUserReq_ `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceCreateUserArgs() *DatanodeServiceCreateUserArgs {
	return &DatanodeServiceCreateUserArgs{}
}

var DatanodeServiceCreateUserArgs_Req_DEFAULT *NewUserReq_

func (p *DatanodeServiceCreateUserArgs) GetReq() *NewUserReq_ {
	if !p.IsSetReq() {
		return DatanodeServiceCreateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatanodeServiceCreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatanodeServiceCreateUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceCreateUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &NewUserReq_{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *DatanodeServiceCreateUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceCreateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *DatanodeServiceCreateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceCreateUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceCreateUserResult struct {
	Success *UserRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceCreateUserResult() *DatanodeServiceCreateUserResult {
	return &DatanodeServiceCreateUserResult{}
}

var DatanodeServiceCreateUserResult_Success_DEFAULT *UserRes

func (p *DatanodeServiceCreateUserResult) GetSuccess() *UserRes {
	if !p.IsSetSuccess() {
		return DatanodeServiceCreateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatanodeServiceCreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatanodeServiceCreateUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceCreateUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DatanodeServiceCreateUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceCreateUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatanodeServiceCreateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceCreateUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceUserInfoArgs struct {
	Req *UserInfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceUserInfoArgs() *DatanodeServiceUserInfoArgs {
	return &DatanodeServiceUserInfoArgs{}
}

var DatanodeServiceUserInfoArgs_Req_DEFAULT *UserInfoReq

func (p *DatanodeServiceUserInfoArgs) GetReq() *UserInfoReq {
	if !p.IsSetReq() {
		return DatanodeServiceUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatanodeServiceUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatanodeServiceUserInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceUserInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UserInfoReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *DatanodeServiceUserInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("userInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceUserInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *DatanodeServiceUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceUserInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceUserInfoResult struct {
	Success *UserRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceUserInfoResult() *DatanodeServiceUserInfoResult {
	return &DatanodeServiceUserInfoResult{}
}

var DatanodeServiceUserInfoResult_Success_DEFAULT *UserRes

func (p *DatanodeServiceUserInfoResult) GetSuccess() *UserRes {
	if !p.IsSetSuccess() {
		return DatanodeServiceUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatanodeServiceUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatanodeServiceUserInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceUserInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DatanodeServiceUserInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("userInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceUserInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatanodeServiceUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceUserInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSearchUserArgs struct {
	Req *SearchUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSearchUserArgs() *DatanodeServiceSearchUserArgs {
	return &DatanodeServiceSearchUserArgs{}
}

var DatanodeServiceSearchUserArgs_Req_DEFAULT *SearchUserReq

func (p *DatanodeServiceSearchUserArgs) GetReq() *SearchUserReq {
	if !p.IsSetReq() {
		return DatanodeServiceSearchUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatanodeServiceSearchUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatanodeServiceSearchUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceSearchUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &SearchUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *DatanodeServiceSearchUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("searchUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceSearchUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *DatanodeServiceSearchUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceSearchUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSearchUserResult struct {
	Success []*User `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSearchUserResult() *DatanodeServiceSearchUserResult {
	return &DatanodeServiceSearchUserResult{}
}

var DatanodeServiceSearchUserResult_Success_DEFAULT []*User

func (p *DatanodeServiceSearchUserResult) GetSuccess() []*User {
	return p.Success
}
func (p *DatanodeServiceSearchUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatanodeServiceSearchUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceSearchUserResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*User, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem31 := &User{}
		if err := _elem31.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem31), err)
		}
		p.Success = append(p.Success, _elem31)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DatanodeServiceSearchUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("searchUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceSearchUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatanodeServiceSearchUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceSearchUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceUpdateUserArgs struct {
	Req *UpdateReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceUpdateUserArgs() *DatanodeServiceUpdateUserArgs {
	return &DatanodeServiceUpdateUserArgs{}
}

var DatanodeServiceUpdateUserArgs_Req_DEFAULT *UpdateReq

func (p *DatanodeServiceUpdateUserArgs) GetReq() *UpdateReq {
	if !p.IsSetReq() {
		return DatanodeServiceUpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatanodeServiceUpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatanodeServiceUpdateUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceUpdateUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UpdateReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *DatanodeServiceUpdateUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceUpdateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *DatanodeServiceUpdateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceUpdateUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceUpdateUserResult struct {
	Success *UserRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceUpdateUserResult() *DatanodeServiceUpdateUserResult {
	return &DatanodeServiceUpdateUserResult{}
}

var DatanodeServiceUpdateUserResult_Success_DEFAULT *UserRes

func (p *DatanodeServiceUpdateUserResult) GetSuccess() *UserRes {
	if !p.IsSetSuccess() {
		return DatanodeServiceUpdateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatanodeServiceUpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatanodeServiceUpdateUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceUpdateUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DatanodeServiceUpdateUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceUpdateUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatanodeServiceUpdateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceUpdateUserResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceAddFriendsArgs struct {
	UID string        `thrift:"uid,1" db:"uid" json:"uid"`
	Req *AddFriendReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceAddFriendsArgs() *DatanodeServiceAddFriendsArgs {
	return &DatanodeServiceAddFriendsArgs{}
}

func (p *DatanodeServiceAddFriendsArgs) GetUID() string {
	return p.UID
}

var DatanodeServiceAddFriendsArgs_Req_DEFAULT *AddFriendReq

func (p *DatanodeServiceAddFriendsArgs) GetReq() *AddFriendReq {
	if !p.IsSetReq() {
		return DatanodeServiceAddFriendsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatanodeServiceAddFriendsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatanodeServiceAddFriendsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceAddFriendsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *DatanodeServiceAddFriendsArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req = &AddFriendReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *DatanodeServiceAddFriendsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addFriends_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceAddFriendsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *DatanodeServiceAddFriendsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err)
	}
	return err
}

func (p *DatanodeServiceAddFriendsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceAddFriendsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceAddFriendsResult struct {
	Success *AddFriendRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceAddFriendsResult() *DatanodeServiceAddFriendsResult {
	return &DatanodeServiceAddFriendsResult{}
}

var DatanodeServiceAddFriendsResult_Success_DEFAULT *AddFriendRes

func (p *DatanodeServiceAddFriendsResult) GetSuccess() *AddFriendRes {
	if !p.IsSetSuccess() {
		return DatanodeServiceAddFriendsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatanodeServiceAddFriendsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatanodeServiceAddFriendsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceAddFriendsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &AddFriendRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DatanodeServiceAddFriendsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addFriends_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceAddFriendsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatanodeServiceAddFriendsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceAddFriendsResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceAgreeFriendsArgs struct {
	UID string          `thrift:"uid,1" db:"uid" json:"uid"`
	Req *AgreeFriendReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceAgreeFriendsArgs() *DatanodeServiceAgreeFriendsArgs {
	return &DatanodeServiceAgreeFriendsArgs{}
}

func (p *DatanodeServiceAgreeFriendsArgs) GetUID() string {
	return p.UID
}

var DatanodeServiceAgreeFriendsArgs_Req_DEFAULT *AgreeFriendReq

func (p *DatanodeServiceAgreeFriendsArgs) GetReq() *AgreeFriendReq {
	if !p.IsSetReq() {
		return DatanodeServiceAgreeFriendsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatanodeServiceAgreeFriendsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatanodeServiceAgreeFriendsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceAgreeFriendsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *DatanodeServiceAgreeFriendsArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req = &AgreeFriendReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *DatanodeServiceAgreeFriendsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("agreeFriends_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceAgreeFriendsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *DatanodeServiceAgreeFriendsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err)
	}
	return err
}

func (p *DatanodeServiceAgreeFriendsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceAgreeFriendsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceAgreeFriendsResult struct {
	Success *AgreeFriendRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceAgreeFriendsResult() *DatanodeServiceAgreeFriendsResult {
	return &DatanodeServiceAgreeFriendsResult{}
}

var DatanodeServiceAgreeFriendsResult_Success_DEFAULT *AgreeFriendRes

func (p *DatanodeServiceAgreeFriendsResult) GetSuccess() *AgreeFriendRes {
	if !p.IsSetSuccess() {
		return DatanodeServiceAgreeFriendsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatanodeServiceAgreeFriendsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatanodeServiceAgreeFriendsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceAgreeFriendsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &AgreeFriendRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DatanodeServiceAgreeFriendsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("agreeFriends_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceAgreeFriendsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatanodeServiceAgreeFriendsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceAgreeFriendsResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Uid2
type DatanodeServiceFriendsListArgs struct {
	UID  string `thrift:"uid,1" db:"uid" json:"uid"`
	Uid2 string `thrift:"uid2,2" db:"uid2" json:"uid2"`
}

func NewDatanodeServiceFriendsListArgs() *DatanodeServiceFriendsListArgs {
	return &DatanodeServiceFriendsListArgs{}
}

func (p *DatanodeServiceFriendsListArgs) GetUID() string {
	return p.UID
}

func (p *DatanodeServiceFriendsListArgs) GetUid2() string {
	return p.Uid2
}
func (p *DatanodeServiceFriendsListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceFriendsListArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *DatanodeServiceFriendsListArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Uid2 = v
	}
	return nil
}

func (p *DatanodeServiceFriendsListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("friendsList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceFriendsListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *DatanodeServiceFriendsListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid2", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid2: ", p), err)
	}
	if err := oprot.WriteString(string(p.Uid2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid2 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid2: ", p), err)
	}
	return err
}

func (p *DatanodeServiceFriendsListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceFriendsListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceFriendsListResult struct {
	Success *FriendRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceFriendsListResult() *DatanodeServiceFriendsListResult {
	return &DatanodeServiceFriendsListResult{}
}

var DatanodeServiceFriendsListResult_Success_DEFAULT *FriendRes

func (p *DatanodeServiceFriendsListResult) GetSuccess() *FriendRes {
	if !p.IsSetSuccess() {
		return DatanodeServiceFriendsListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatanodeServiceFriendsListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatanodeServiceFriendsListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceFriendsListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &FriendRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DatanodeServiceFriendsListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("friendsList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceFriendsListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatanodeServiceFriendsListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceFriendsListResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceCreateGroupArgs struct {
	UID string          `thrift:"uid,1" db:"uid" json:"uid"`
	Req *CreateGroupReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceCreateGroupArgs() *DatanodeServiceCreateGroupArgs {
	return &DatanodeServiceCreateGroupArgs{}
}

func (p *DatanodeServiceCreateGroupArgs) GetUID() string {
	return p.UID
}

var DatanodeServiceCreateGroupArgs_Req_DEFAULT *CreateGroupReq

func (p *DatanodeServiceCreateGroupArgs) GetReq() *CreateGroupReq {
	if !p.IsSetReq() {
		return DatanodeServiceCreateGroupArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatanodeServiceCreateGroupArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatanodeServiceCreateGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceCreateGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *DatanodeServiceCreateGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req = &CreateGroupReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *DatanodeServiceCreateGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceCreateGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *DatanodeServiceCreateGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err)
	}
	return err
}

func (p *DatanodeServiceCreateGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceCreateGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceCreateGroupResult struct {
	Success *CreateGroupRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceCreateGroupResult() *DatanodeServiceCreateGroupResult {
	return &DatanodeServiceCreateGroupResult{}
}

var DatanodeServiceCreateGroupResult_Success_DEFAULT *CreateGroupRes

func (p *DatanodeServiceCreateGroupResult) GetSuccess() *CreateGroupRes {
	if !p.IsSetSuccess() {
		return DatanodeServiceCreateGroupResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatanodeServiceCreateGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatanodeServiceCreateGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceCreateGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreateGroupRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DatanodeServiceCreateGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceCreateGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatanodeServiceCreateGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceCreateGroupResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceRenameGroupArgs struct {
	UID string          `thrift:"uid,1" db:"uid" json:"uid"`
	Req *RenameGroupReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceRenameGroupArgs() *DatanodeServiceRenameGroupArgs {
	return &DatanodeServiceRenameGroupArgs{}
}

func (p *DatanodeServiceRenameGroupArgs) GetUID() string {
	return p.UID
}

var DatanodeServiceRenameGroupArgs_Req_DEFAULT *RenameGroupReq

func (p *DatanodeServiceRenameGroupArgs) GetReq() *RenameGroupReq {
	if !p.IsSetReq() {
		return DatanodeServiceRenameGroupArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatanodeServiceRenameGroupArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatanodeServiceRenameGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceRenameGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *DatanodeServiceRenameGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req = &RenameGroupReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *DatanodeServiceRenameGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renameGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceRenameGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *DatanodeServiceRenameGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err)
	}
	return err
}

func (p *DatanodeServiceRenameGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceRenameGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceRenameGroupResult struct {
	Success *RenameGroupRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceRenameGroupResult() *DatanodeServiceRenameGroupResult {
	return &DatanodeServiceRenameGroupResult{}
}

var DatanodeServiceRenameGroupResult_Success_DEFAULT *RenameGroupRes

func (p *DatanodeServiceRenameGroupResult) GetSuccess() *RenameGroupRes {
	if !p.IsSetSuccess() {
		return DatanodeServiceRenameGroupResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatanodeServiceRenameGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatanodeServiceRenameGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceRenameGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RenameGroupRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DatanodeServiceRenameGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renameGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceRenameGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatanodeServiceRenameGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceRenameGroupResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceAddNoteFriendArgs struct {
	UID string            `thrift:"uid,1" db:"uid" json:"uid"`
	Req *AddFriendNoteReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceAddNoteFriendArgs() *DatanodeServiceAddNoteFriendArgs {
	return &DatanodeServiceAddNoteFriendArgs{}
}

func (p *DatanodeServiceAddNoteFriendArgs) GetUID() string {
	return p.UID
}

var DatanodeServiceAddNoteFriendArgs_Req_DEFAULT *AddFriendNoteReq

func (p *DatanodeServiceAddNoteFriendArgs) GetReq() *AddFriendNoteReq {
	if !p.IsSetReq() {
		return DatanodeServiceAddNoteFriendArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatanodeServiceAddNoteFriendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatanodeServiceAddNoteFriendArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceAddNoteFriendArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *DatanodeServiceAddNoteFriendArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req = &AddFriendNoteReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *DatanodeServiceAddNoteFriendArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addNoteFriend_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceAddNoteFriendArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *DatanodeServiceAddNoteFriendArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err)
	}
	return err
}

func (p *DatanodeServiceAddNoteFriendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceAddNoteFriendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceAddNoteFriendResult struct {
	Success *AddFriendNoteRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceAddNoteFriendResult() *DatanodeServiceAddNoteFriendResult {
	return &DatanodeServiceAddNoteFriendResult{}
}

var DatanodeServiceAddNoteFriendResult_Success_DEFAULT *AddFriendNoteRes

func (p *DatanodeServiceAddNoteFriendResult) GetSuccess() *AddFriendNoteRes {
	if !p.IsSetSuccess() {
		return DatanodeServiceAddNoteFriendResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatanodeServiceAddNoteFriendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatanodeServiceAddNoteFriendResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceAddNoteFriendResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &AddFriendNoteRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DatanodeServiceAddNoteFriendResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addNoteFriend_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceAddNoteFriendResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatanodeServiceAddNoteFriendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceAddNoteFriendResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceMoveToNewGroupArgs struct {
	UID string        `thrift:"uid,1" db:"uid" json:"uid"`
	Req *MoveGroupReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceMoveToNewGroupArgs() *DatanodeServiceMoveToNewGroupArgs {
	return &DatanodeServiceMoveToNewGroupArgs{}
}

func (p *DatanodeServiceMoveToNewGroupArgs) GetUID() string {
	return p.UID
}

var DatanodeServiceMoveToNewGroupArgs_Req_DEFAULT *MoveGroupReq

func (p *DatanodeServiceMoveToNewGroupArgs) GetReq() *MoveGroupReq {
	if !p.IsSetReq() {
		return DatanodeServiceMoveToNewGroupArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatanodeServiceMoveToNewGroupArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatanodeServiceMoveToNewGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceMoveToNewGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *DatanodeServiceMoveToNewGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req = &MoveGroupReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *DatanodeServiceMoveToNewGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("moveToNewGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceMoveToNewGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *DatanodeServiceMoveToNewGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err)
	}
	return err
}

func (p *DatanodeServiceMoveToNewGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceMoveToNewGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceMoveToNewGroupResult struct {
	Success *MoveGroupRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceMoveToNewGroupResult() *DatanodeServiceMoveToNewGroupResult {
	return &DatanodeServiceMoveToNewGroupResult{}
}

var DatanodeServiceMoveToNewGroupResult_Success_DEFAULT *MoveGroupRes

func (p *DatanodeServiceMoveToNewGroupResult) GetSuccess() *MoveGroupRes {
	if !p.IsSetSuccess() {
		return DatanodeServiceMoveToNewGroupResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatanodeServiceMoveToNewGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatanodeServiceMoveToNewGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceMoveToNewGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MoveGroupRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DatanodeServiceMoveToNewGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("moveToNewGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceMoveToNewGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatanodeServiceMoveToNewGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceMoveToNewGroupResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceRemoveFriendArgs struct {
	UID string           `thrift:"uid,1" db:"uid" json:"uid"`
	Req *RemoveFriendReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceRemoveFriendArgs() *DatanodeServiceRemoveFriendArgs {
	return &DatanodeServiceRemoveFriendArgs{}
}

func (p *DatanodeServiceRemoveFriendArgs) GetUID() string {
	return p.UID
}

var DatanodeServiceRemoveFriendArgs_Req_DEFAULT *RemoveFriendReq

func (p *DatanodeServiceRemoveFriendArgs) GetReq() *RemoveFriendReq {
	if !p.IsSetReq() {
		return DatanodeServiceRemoveFriendArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatanodeServiceRemoveFriendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatanodeServiceRemoveFriendArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceRemoveFriendArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *DatanodeServiceRemoveFriendArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req = &RemoveFriendReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *DatanodeServiceRemoveFriendArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeFriend_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceRemoveFriendArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err)
	}
	if err := oprot.WriteString(string(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err)
	}
	return err
}

func (p *DatanodeServiceRemoveFriendArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err)
	}
	return err
}

func (p *DatanodeServiceRemoveFriendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceRemoveFriendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceRemoveFriendResult struct {
	Success *RemoveFriendRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceRemoveFriendResult() *DatanodeServiceRemoveFriendResult {
	return &DatanodeServiceRemoveFriendResult{}
}

var DatanodeServiceRemoveFriendResult_Success_DEFAULT *RemoveFriendRes

func (p *DatanodeServiceRemoveFriendResult) GetSuccess() *RemoveFriendRes {
	if !p.IsSetSuccess() {
		return DatanodeServiceRemoveFriendResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatanodeServiceRemoveFriendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatanodeServiceRemoveFriendResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatanodeServiceRemoveFriendResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RemoveFriendRes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DatanodeServiceRemoveFriendResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeFriend_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatanodeServiceRemoveFriendResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatanodeServiceRemoveFriendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatanodeServiceRemoveFriendResult(%+v)", *p)
}
