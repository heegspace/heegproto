// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package datanode

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/heegspace/heegproto/common"
	"github.com/heegspace/heegproto/rescode"
	"github.com/heegspace/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = rescode.GoUnusedProtection__
var _ = common.GoUnusedProtection__
// Attributes:
//  - UID
//  - Phone
//  - Email
//  - Account
//  - PassWd
//  - Status
//  - Role
//  - Vip
//  - Coin
//  - RegIP
//  - RegAt
type User struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Phone string `thrift:"phone,2" db:"phone" json:"phone"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Account string `thrift:"account,4" db:"account" json:"account"`
  PassWd string `thrift:"pass_wd,5" db:"pass_wd" json:"pass_wd"`
  Status int16 `thrift:"status,6" db:"status" json:"status"`
  Role int64 `thrift:"role,7" db:"role" json:"role"`
  Vip int64 `thrift:"vip,8" db:"vip" json:"vip"`
  Coin float64 `thrift:"coin,9" db:"coin" json:"coin"`
  RegIP int64 `thrift:"reg_ip,10" db:"reg_ip" json:"reg_ip"`
  RegAt string `thrift:"reg_at,11" db:"reg_at" json:"reg_at"`
}

func NewUser() *User {
  return &User{}
}


func (p *User) GetUID() int64 {
  return p.UID
}

func (p *User) GetPhone() string {
  return p.Phone
}

func (p *User) GetEmail() string {
  return p.Email
}

func (p *User) GetAccount() string {
  return p.Account
}

func (p *User) GetPassWd() string {
  return p.PassWd
}

func (p *User) GetStatus() int16 {
  return p.Status
}

func (p *User) GetRole() int64 {
  return p.Role
}

func (p *User) GetVip() int64 {
  return p.Vip
}

func (p *User) GetCoin() float64 {
  return p.Coin
}

func (p *User) GetRegIP() int64 {
  return p.RegIP
}

func (p *User) GetRegAt() string {
  return p.RegAt
}
func (p *User) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *User)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *User)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *User)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *User)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *User)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PassWd = v
}
  return nil
}

func (p *User)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *User)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Role = v
}
  return nil
}

func (p *User)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Vip = v
}
  return nil
}

func (p *User)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Coin = v
}
  return nil
}

func (p *User)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.RegIP = v
}
  return nil
}

func (p *User)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.RegAt = v
}
  return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("user"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phone: ", p), err) }
  return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:account: ", p), err) }
  return err
}

func (p *User) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pass_wd", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pass_wd: ", p), err) }
  if err := oprot.WriteString(string(p.PassWd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pass_wd (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pass_wd: ", p), err) }
  return err
}

func (p *User) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I16, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err) }
  if err := oprot.WriteI16(int16(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err) }
  return err
}

func (p *User) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("role", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:role: ", p), err) }
  if err := oprot.WriteI64(int64(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:role: ", p), err) }
  return err
}

func (p *User) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vip", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:vip: ", p), err) }
  if err := oprot.WriteI64(int64(p.Vip)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vip (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:vip: ", p), err) }
  return err
}

func (p *User) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coin", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:coin: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Coin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.coin (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:coin: ", p), err) }
  return err
}

func (p *User) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reg_ip", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:reg_ip: ", p), err) }
  if err := oprot.WriteI64(int64(p.RegIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reg_ip (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:reg_ip: ", p), err) }
  return err
}

func (p *User) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reg_at", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:reg_at: ", p), err) }
  if err := oprot.WriteString(string(p.RegAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reg_at (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:reg_at: ", p), err) }
  return err
}

func (p *User) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - UID
//  - Extra
type UserInfoReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewUserInfoReq() *UserInfoReq {
  return &UserInfoReq{}
}


func (p *UserInfoReq) GetUID() int64 {
  return p.UID
}

func (p *UserInfoReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *UserInfoReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserInfoReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *UserInfoReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Extra[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserInfoReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("user_info_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *UserInfoReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  return err
}

func (p *UserInfoReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserInfoReq(%+v)", *p)
}

// Attributes:
//  - Account
//  - PassWd
//  - Role
//  - Invitor
//  - Source
//  - Contactor
//  - Email
//  - RegIP
//  - Status
//  - Extra
type NewUserReq_ struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
  PassWd string `thrift:"pass_wd,2" db:"pass_wd" json:"pass_wd"`
  Role int32 `thrift:"role,3" db:"role" json:"role"`
  Invitor string `thrift:"invitor,4" db:"invitor" json:"invitor"`
  Source string `thrift:"source,5" db:"source" json:"source"`
  Contactor string `thrift:"contactor,6" db:"contactor" json:"contactor"`
  Email string `thrift:"email,7" db:"email" json:"email"`
  RegIP int64 `thrift:"reg_ip,8" db:"reg_ip" json:"reg_ip"`
  Status int64 `thrift:"status,9" db:"status" json:"status"`
  Extra map[string]string `thrift:"extra,10" db:"extra" json:"extra"`
}

func NewNewUserReq_() *NewUserReq_ {
  return &NewUserReq_{}
}


func (p *NewUserReq_) GetAccount() string {
  return p.Account
}

func (p *NewUserReq_) GetPassWd() string {
  return p.PassWd
}

func (p *NewUserReq_) GetRole() int32 {
  return p.Role
}

func (p *NewUserReq_) GetInvitor() string {
  return p.Invitor
}

func (p *NewUserReq_) GetSource() string {
  return p.Source
}

func (p *NewUserReq_) GetContactor() string {
  return p.Contactor
}

func (p *NewUserReq_) GetEmail() string {
  return p.Email
}

func (p *NewUserReq_) GetRegIP() int64 {
  return p.RegIP
}

func (p *NewUserReq_) GetStatus() int64 {
  return p.Status
}

func (p *NewUserReq_) GetExtra() map[string]string {
  return p.Extra
}
func (p *NewUserReq_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NewUserReq_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *NewUserReq_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PassWd = v
}
  return nil
}

func (p *NewUserReq_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Role = v
}
  return nil
}

func (p *NewUserReq_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Invitor = v
}
  return nil
}

func (p *NewUserReq_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Source = v
}
  return nil
}

func (p *NewUserReq_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Contactor = v
}
  return nil
}

func (p *NewUserReq_)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *NewUserReq_)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RegIP = v
}
  return nil
}

func (p *NewUserReq_)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *NewUserReq_)  ReadField10(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key2 = v
}
var _val3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val3 = v
}
    p.Extra[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *NewUserReq_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("new_user_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NewUserReq_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *NewUserReq_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pass_wd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pass_wd: ", p), err) }
  if err := oprot.WriteString(string(p.PassWd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pass_wd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pass_wd: ", p), err) }
  return err
}

func (p *NewUserReq_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("role", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:role: ", p), err) }
  if err := oprot.WriteI32(int32(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:role: ", p), err) }
  return err
}

func (p *NewUserReq_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("invitor", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:invitor: ", p), err) }
  if err := oprot.WriteString(string(p.Invitor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invitor (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:invitor: ", p), err) }
  return err
}

func (p *NewUserReq_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:source: ", p), err) }
  if err := oprot.WriteString(string(p.Source)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:source: ", p), err) }
  return err
}

func (p *NewUserReq_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactor", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:contactor: ", p), err) }
  if err := oprot.WriteString(string(p.Contactor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactor (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:contactor: ", p), err) }
  return err
}

func (p *NewUserReq_) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:email: ", p), err) }
  return err
}

func (p *NewUserReq_) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reg_ip", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:reg_ip: ", p), err) }
  if err := oprot.WriteI64(int64(p.RegIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reg_ip (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:reg_ip: ", p), err) }
  return err
}

func (p *NewUserReq_) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:status: ", p), err) }
  if err := oprot.WriteI64(int64(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:status: ", p), err) }
  return err
}

func (p *NewUserReq_) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extra: ", p), err) }
  return err
}

func (p *NewUserReq_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NewUserReq_(%+v)", *p)
}

// Attributes:
//  - Uids
//  - Account
//  - Phone
//  - Email
//  - Extra
type SearchUserReq struct {
  Uids []int64 `thrift:"uids,1" db:"uids" json:"uids"`
  Account string `thrift:"account,2" db:"account" json:"account"`
  Phone string `thrift:"phone,3" db:"phone" json:"phone"`
  Email string `thrift:"email,4" db:"email" json:"email"`
  Extra map[string]string `thrift:"extra,5" db:"extra" json:"extra"`
}

func NewSearchUserReq() *SearchUserReq {
  return &SearchUserReq{}
}


func (p *SearchUserReq) GetUids() []int64 {
  return p.Uids
}

func (p *SearchUserReq) GetAccount() string {
  return p.Account
}

func (p *SearchUserReq) GetPhone() string {
  return p.Phone
}

func (p *SearchUserReq) GetEmail() string {
  return p.Email
}

func (p *SearchUserReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *SearchUserReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchUserReq)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Uids =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.Uids = append(p.Uids, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchUserReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *SearchUserReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *SearchUserReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *SearchUserReq)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key5 = v
}
var _val6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val6 = v
}
    p.Extra[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SearchUserReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_user_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchUserReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.Uids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Uids {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uids: ", p), err) }
  return err
}

func (p *SearchUserReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err) }
  return err
}

func (p *SearchUserReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:phone: ", p), err) }
  return err
}

func (p *SearchUserReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:email: ", p), err) }
  return err
}

func (p *SearchUserReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extra: ", p), err) }
  return err
}

func (p *SearchUserReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchUserReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - User
//  - Extra
type UserRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  User *User `thrift:"user,3" db:"user" json:"user"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewUserRes() *UserRes {
  return &UserRes{}
}


func (p *UserRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *UserRes) GetResmsg() string {
  return p.Resmsg
}
var UserRes_User_DEFAULT *User
func (p *UserRes) GetUser() *User {
  if !p.IsSetUser() {
    return UserRes_User_DEFAULT
  }
return p.User
}

func (p *UserRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *UserRes) IsSetUser() bool {
  return p.User != nil
}

func (p *UserRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *UserRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *UserRes)  ReadField3(iprot thrift.TProtocol) error {
  p.User = &User{}
  if err := p.User.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *UserRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key7 = v
}
var _val8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val8 = v
}
    p.Extra[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("user_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *UserRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *UserRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user: ", p), err) }
  if err := p.User.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user: ", p), err) }
  return err
}

func (p *UserRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *UserRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Phone
//  - Email
//  - Account
//  - PassWd
//  - Status
//  - Role
//  - Vip
//  - Coin
//  - Extra
type UpdateReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Phone string `thrift:"phone,2" db:"phone" json:"phone"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Account string `thrift:"account,4" db:"account" json:"account"`
  PassWd string `thrift:"pass_wd,5" db:"pass_wd" json:"pass_wd"`
  Status int16 `thrift:"status,6" db:"status" json:"status"`
  Role int64 `thrift:"role,7" db:"role" json:"role"`
  Vip int64 `thrift:"vip,8" db:"vip" json:"vip"`
  Coin float64 `thrift:"coin,9" db:"coin" json:"coin"`
  // unused fields # 10 to 22
  Extra map[string]string `thrift:"extra,23" db:"extra" json:"extra"`
}

func NewUpdateReq() *UpdateReq {
  return &UpdateReq{}
}


func (p *UpdateReq) GetUID() int64 {
  return p.UID
}

func (p *UpdateReq) GetPhone() string {
  return p.Phone
}

func (p *UpdateReq) GetEmail() string {
  return p.Email
}

func (p *UpdateReq) GetAccount() string {
  return p.Account
}

func (p *UpdateReq) GetPassWd() string {
  return p.PassWd
}

func (p *UpdateReq) GetStatus() int16 {
  return p.Status
}

func (p *UpdateReq) GetRole() int64 {
  return p.Role
}

func (p *UpdateReq) GetVip() int64 {
  return p.Vip
}

func (p *UpdateReq) GetCoin() float64 {
  return p.Coin
}

func (p *UpdateReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *UpdateReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *UpdateReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *UpdateReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *UpdateReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *UpdateReq)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PassWd = v
}
  return nil
}

func (p *UpdateReq)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *UpdateReq)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Role = v
}
  return nil
}

func (p *UpdateReq)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Vip = v
}
  return nil
}

func (p *UpdateReq)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Coin = v
}
  return nil
}

func (p *UpdateReq)  ReadField23(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key9 = v
}
var _val10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val10 = v
}
    p.Extra[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UpdateReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *UpdateReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phone: ", p), err) }
  return err
}

func (p *UpdateReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *UpdateReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:account: ", p), err) }
  return err
}

func (p *UpdateReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pass_wd", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pass_wd: ", p), err) }
  if err := oprot.WriteString(string(p.PassWd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pass_wd (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pass_wd: ", p), err) }
  return err
}

func (p *UpdateReq) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I16, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err) }
  if err := oprot.WriteI16(int16(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err) }
  return err
}

func (p *UpdateReq) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("role", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:role: ", p), err) }
  if err := oprot.WriteI64(int64(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:role: ", p), err) }
  return err
}

func (p *UpdateReq) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vip", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:vip: ", p), err) }
  if err := oprot.WriteI64(int64(p.Vip)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vip (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:vip: ", p), err) }
  return err
}

func (p *UpdateReq) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coin", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:coin: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Coin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.coin (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:coin: ", p), err) }
  return err
}

func (p *UpdateReq) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:extra: ", p), err) }
  return err
}

func (p *UpdateReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateReq(%+v)", *p)
}

// Attributes:
//  - Phone
//  - Extra
type AddFriendReq struct {
  Phone string `thrift:"phone,1" db:"phone" json:"phone"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewAddFriendReq() *AddFriendReq {
  return &AddFriendReq{}
}


func (p *AddFriendReq) GetPhone() string {
  return p.Phone
}

func (p *AddFriendReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *AddFriendReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddFriendReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *AddFriendReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key11 = v
}
var _val12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val12 = v
}
    p.Extra[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddFriendReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_friend_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phone: ", p), err) }
  return err
}

func (p *AddFriendReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  return err
}

func (p *AddFriendReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddFriendReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type AddFriendRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewAddFriendRes() *AddFriendRes {
  return &AddFriendRes{}
}


func (p *AddFriendRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *AddFriendRes) GetResmsg() string {
  return p.Resmsg
}

func (p *AddFriendRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *AddFriendRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddFriendRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *AddFriendRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *AddFriendRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key13 = v
}
var _val14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val14 = v
}
    p.Extra[_key13] = _val14
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddFriendRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_friend_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddFriendRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *AddFriendRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *AddFriendRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *AddFriendRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddFriendRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Extra
type AgreeFriendReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewAgreeFriendReq() *AgreeFriendReq {
  return &AgreeFriendReq{}
}


func (p *AgreeFriendReq) GetUID() int64 {
  return p.UID
}

func (p *AgreeFriendReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *AgreeFriendReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AgreeFriendReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *AgreeFriendReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key15 = v
}
var _val16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val16 = v
}
    p.Extra[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AgreeFriendReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("agree_friend_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AgreeFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *AgreeFriendReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  return err
}

func (p *AgreeFriendReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AgreeFriendReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type AgreeFriendRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewAgreeFriendRes() *AgreeFriendRes {
  return &AgreeFriendRes{}
}


func (p *AgreeFriendRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *AgreeFriendRes) GetResmsg() string {
  return p.Resmsg
}

func (p *AgreeFriendRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *AgreeFriendRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AgreeFriendRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *AgreeFriendRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *AgreeFriendRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key17 = v
}
var _val18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val18 = v
}
    p.Extra[_key17] = _val18
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AgreeFriendRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("agree_friend_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AgreeFriendRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *AgreeFriendRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *AgreeFriendRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *AgreeFriendRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AgreeFriendRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Note
//  - Account
//  - NickName
//  - Avatar
//  - Brithday
//  - JoinAt
type FriendItem struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Note string `thrift:"note,2" db:"note" json:"note"`
  Account string `thrift:"account,3" db:"account" json:"account"`
  NickName string `thrift:"nick_name,4" db:"nick_name" json:"nick_name"`
  Avatar string `thrift:"avatar,5" db:"avatar" json:"avatar"`
  Brithday string `thrift:"brithday,6" db:"brithday" json:"brithday"`
  JoinAt int64 `thrift:"join_at,7" db:"join_at" json:"join_at"`
}

func NewFriendItem() *FriendItem {
  return &FriendItem{}
}


func (p *FriendItem) GetUID() int64 {
  return p.UID
}

func (p *FriendItem) GetNote() string {
  return p.Note
}

func (p *FriendItem) GetAccount() string {
  return p.Account
}

func (p *FriendItem) GetNickName() string {
  return p.NickName
}

func (p *FriendItem) GetAvatar() string {
  return p.Avatar
}

func (p *FriendItem) GetBrithday() string {
  return p.Brithday
}

func (p *FriendItem) GetJoinAt() int64 {
  return p.JoinAt
}
func (p *FriendItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FriendItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *FriendItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Note = v
}
  return nil
}

func (p *FriendItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *FriendItem)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NickName = v
}
  return nil
}

func (p *FriendItem)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Avatar = v
}
  return nil
}

func (p *FriendItem)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Brithday = v
}
  return nil
}

func (p *FriendItem)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.JoinAt = v
}
  return nil
}

func (p *FriendItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("friend_item"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FriendItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *FriendItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("note", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:note: ", p), err) }
  if err := oprot.WriteString(string(p.Note)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.note (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:note: ", p), err) }
  return err
}

func (p *FriendItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:account: ", p), err) }
  return err
}

func (p *FriendItem) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nick_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nick_name: ", p), err) }
  if err := oprot.WriteString(string(p.NickName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nick_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nick_name: ", p), err) }
  return err
}

func (p *FriendItem) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:avatar: ", p), err) }
  if err := oprot.WriteString(string(p.Avatar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avatar (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:avatar: ", p), err) }
  return err
}

func (p *FriendItem) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("brithday", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:brithday: ", p), err) }
  if err := oprot.WriteString(string(p.Brithday)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.brithday (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:brithday: ", p), err) }
  return err
}

func (p *FriendItem) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("join_at", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:join_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.JoinAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.join_at (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:join_at: ", p), err) }
  return err
}

func (p *FriendItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FriendItem(%+v)", *p)
}

// Attributes:
//  - Sort
//  - Name
//  - Lists
type Group struct {
  Sort int64 `thrift:"sort,1" db:"sort" json:"sort"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Lists []*FriendItem `thrift:"lists,3" db:"lists" json:"lists"`
}

func NewGroup() *Group {
  return &Group{}
}


func (p *Group) GetSort() int64 {
  return p.Sort
}

func (p *Group) GetName() string {
  return p.Name
}

func (p *Group) GetLists() []*FriendItem {
  return p.Lists
}
func (p *Group) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Group)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sort = v
}
  return nil
}

func (p *Group)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Group)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FriendItem, 0, size)
  p.Lists =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := &FriendItem{}
    if err := _elem19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.Lists = append(p.Lists, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Group) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("group"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Group) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sort", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sort: ", p), err) }
  if err := oprot.WriteI64(int64(p.Sort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sort (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sort: ", p), err) }
  return err
}

func (p *Group) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Group) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lists", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lists: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lists)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lists {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lists: ", p), err) }
  return err
}

func (p *Group) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Group(%+v)", *p)
}

// Attributes:
//  - Total
//  - Data
//  - Invite
//  - Blacks
type Friend struct {
  Total int64 `thrift:"total,1" db:"total" json:"total"`
  Data []*Group `thrift:"data,2" db:"data" json:"data"`
  Invite []*FriendItem `thrift:"invite,3" db:"invite" json:"invite"`
  Blacks []*FriendItem `thrift:"blacks,4" db:"blacks" json:"blacks"`
}

func NewFriend() *Friend {
  return &Friend{}
}


func (p *Friend) GetTotal() int64 {
  return p.Total
}

func (p *Friend) GetData() []*Group {
  return p.Data
}

func (p *Friend) GetInvite() []*FriendItem {
  return p.Invite
}

func (p *Friend) GetBlacks() []*FriendItem {
  return p.Blacks
}
func (p *Friend) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Friend)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Total = v
}
  return nil
}

func (p *Friend)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Group, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem20 := &Group{}
    if err := _elem20.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
    }
    p.Data = append(p.Data, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Friend)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FriendItem, 0, size)
  p.Invite =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := &FriendItem{}
    if err := _elem21.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.Invite = append(p.Invite, _elem21)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Friend)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FriendItem, 0, size)
  p.Blacks =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := &FriendItem{}
    if err := _elem22.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.Blacks = append(p.Blacks, _elem22)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Friend) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("friend"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Friend) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:total: ", p), err) }
  if err := oprot.WriteI64(int64(p.Total)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:total: ", p), err) }
  return err
}

func (p *Friend) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *Friend) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("invite", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invite: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Invite)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Invite {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invite: ", p), err) }
  return err
}

func (p *Friend) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("blacks", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:blacks: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Blacks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Blacks {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:blacks: ", p), err) }
  return err
}

func (p *Friend) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Friend(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Friends
//  - Extra
type FriendRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Friends *Friend `thrift:"friends,3" db:"friends" json:"friends"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewFriendRes() *FriendRes {
  return &FriendRes{}
}


func (p *FriendRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *FriendRes) GetResmsg() string {
  return p.Resmsg
}
var FriendRes_Friends_DEFAULT *Friend
func (p *FriendRes) GetFriends() *Friend {
  if !p.IsSetFriends() {
    return FriendRes_Friends_DEFAULT
  }
return p.Friends
}

func (p *FriendRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *FriendRes) IsSetFriends() bool {
  return p.Friends != nil
}

func (p *FriendRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FriendRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *FriendRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *FriendRes)  ReadField3(iprot thrift.TProtocol) error {
  p.Friends = &Friend{}
  if err := p.Friends.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Friends), err)
  }
  return nil
}

func (p *FriendRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key23 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key23 = v
}
var _val24 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val24 = v
}
    p.Extra[_key23] = _val24
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *FriendRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("friend_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FriendRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *FriendRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *FriendRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("friends", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:friends: ", p), err) }
  if err := p.Friends.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Friends), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:friends: ", p), err) }
  return err
}

func (p *FriendRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *FriendRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FriendRes(%+v)", *p)
}

// Attributes:
//  - Name
//  - Extra
type CreateGroupReq struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewCreateGroupReq() *CreateGroupReq {
  return &CreateGroupReq{}
}


func (p *CreateGroupReq) GetName() string {
  return p.Name
}

func (p *CreateGroupReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *CreateGroupReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateGroupReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CreateGroupReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key25 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key25 = v
}
var _val26 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val26 = v
}
    p.Extra[_key25] = _val26
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CreateGroupReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_group_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateGroupReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *CreateGroupReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  return err
}

func (p *CreateGroupReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateGroupReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type CreateGroupRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewCreateGroupRes() *CreateGroupRes {
  return &CreateGroupRes{}
}


func (p *CreateGroupRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *CreateGroupRes) GetResmsg() string {
  return p.Resmsg
}

func (p *CreateGroupRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *CreateGroupRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateGroupRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *CreateGroupRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *CreateGroupRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key27 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key27 = v
}
var _val28 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val28 = v
}
    p.Extra[_key27] = _val28
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CreateGroupRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_group_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateGroupRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *CreateGroupRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *CreateGroupRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *CreateGroupRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateGroupRes(%+v)", *p)
}

// Attributes:
//  - OldName
//  - NewName_
//  - Extra
type RenameGroupReq struct {
  OldName string `thrift:"old_name,1" db:"old_name" json:"old_name"`
  NewName_ string `thrift:"new_name,2" db:"new_name" json:"new_name"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewRenameGroupReq() *RenameGroupReq {
  return &RenameGroupReq{}
}


func (p *RenameGroupReq) GetOldName() string {
  return p.OldName
}

func (p *RenameGroupReq) GetNewName_() string {
  return p.NewName_
}

func (p *RenameGroupReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *RenameGroupReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RenameGroupReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OldName = v
}
  return nil
}

func (p *RenameGroupReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewName_ = v
}
  return nil
}

func (p *RenameGroupReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key29 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key29 = v
}
var _val30 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val30 = v
}
    p.Extra[_key29] = _val30
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RenameGroupReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rename_group_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RenameGroupReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("old_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:old_name: ", p), err) }
  if err := oprot.WriteString(string(p.OldName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:old_name: ", p), err) }
  return err
}

func (p *RenameGroupReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_name: ", p), err) }
  if err := oprot.WriteString(string(p.NewName_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_name: ", p), err) }
  return err
}

func (p *RenameGroupReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *RenameGroupReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RenameGroupReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type RenameGroupRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewRenameGroupRes() *RenameGroupRes {
  return &RenameGroupRes{}
}


func (p *RenameGroupRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *RenameGroupRes) GetResmsg() string {
  return p.Resmsg
}

func (p *RenameGroupRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *RenameGroupRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RenameGroupRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *RenameGroupRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *RenameGroupRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key31 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key31 = v
}
var _val32 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val32 = v
}
    p.Extra[_key31] = _val32
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RenameGroupRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rename_group_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RenameGroupRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *RenameGroupRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *RenameGroupRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *RenameGroupRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RenameGroupRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Note
//  - Extra
type AddFriendNoteReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Note string `thrift:"note,2" db:"note" json:"note"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewAddFriendNoteReq() *AddFriendNoteReq {
  return &AddFriendNoteReq{}
}


func (p *AddFriendNoteReq) GetUID() int64 {
  return p.UID
}

func (p *AddFriendNoteReq) GetNote() string {
  return p.Note
}

func (p *AddFriendNoteReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *AddFriendNoteReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddFriendNoteReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *AddFriendNoteReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Note = v
}
  return nil
}

func (p *AddFriendNoteReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key33 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key33 = v
}
var _val34 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val34 = v
}
    p.Extra[_key33] = _val34
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddFriendNoteReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_friend_note_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddFriendNoteReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *AddFriendNoteReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("note", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:note: ", p), err) }
  if err := oprot.WriteString(string(p.Note)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.note (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:note: ", p), err) }
  return err
}

func (p *AddFriendNoteReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *AddFriendNoteReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddFriendNoteReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type AddFriendNoteRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewAddFriendNoteRes() *AddFriendNoteRes {
  return &AddFriendNoteRes{}
}


func (p *AddFriendNoteRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *AddFriendNoteRes) GetResmsg() string {
  return p.Resmsg
}

func (p *AddFriendNoteRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *AddFriendNoteRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddFriendNoteRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *AddFriendNoteRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *AddFriendNoteRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key35 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key35 = v
}
var _val36 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val36 = v
}
    p.Extra[_key35] = _val36
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddFriendNoteRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_friend_note_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddFriendNoteRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *AddFriendNoteRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *AddFriendNoteRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *AddFriendNoteRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddFriendNoteRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Group
//  - Extra
type MoveGroupReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Group string `thrift:"group,2" db:"group" json:"group"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewMoveGroupReq() *MoveGroupReq {
  return &MoveGroupReq{}
}


func (p *MoveGroupReq) GetUID() int64 {
  return p.UID
}

func (p *MoveGroupReq) GetGroup() string {
  return p.Group
}

func (p *MoveGroupReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *MoveGroupReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MoveGroupReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *MoveGroupReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Group = v
}
  return nil
}

func (p *MoveGroupReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key37 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key37 = v
}
var _val38 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val38 = v
}
    p.Extra[_key37] = _val38
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MoveGroupReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("move_group_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MoveGroupReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *MoveGroupReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err) }
  if err := oprot.WriteString(string(p.Group)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err) }
  return err
}

func (p *MoveGroupReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *MoveGroupReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MoveGroupReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type MoveGroupRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewMoveGroupRes() *MoveGroupRes {
  return &MoveGroupRes{}
}


func (p *MoveGroupRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *MoveGroupRes) GetResmsg() string {
  return p.Resmsg
}

func (p *MoveGroupRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *MoveGroupRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MoveGroupRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *MoveGroupRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *MoveGroupRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key39 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key39 = v
}
var _val40 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val40 = v
}
    p.Extra[_key39] = _val40
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MoveGroupRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("move_group_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MoveGroupRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *MoveGroupRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *MoveGroupRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *MoveGroupRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MoveGroupRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Extra
type RemoveFriendReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewRemoveFriendReq() *RemoveFriendReq {
  return &RemoveFriendReq{}
}


func (p *RemoveFriendReq) GetUID() int64 {
  return p.UID
}

func (p *RemoveFriendReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *RemoveFriendReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveFriendReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *RemoveFriendReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key41 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key41 = v
}
var _val42 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val42 = v
}
    p.Extra[_key41] = _val42
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RemoveFriendReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("remove_friend_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *RemoveFriendReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  return err
}

func (p *RemoveFriendReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveFriendReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type RemoveFriendRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewRemoveFriendRes() *RemoveFriendRes {
  return &RemoveFriendRes{}
}


func (p *RemoveFriendRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *RemoveFriendRes) GetResmsg() string {
  return p.Resmsg
}

func (p *RemoveFriendRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *RemoveFriendRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveFriendRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *RemoveFriendRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *RemoveFriendRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key43 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key43 = v
}
var _val44 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val44 = v
}
    p.Extra[_key43] = _val44
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RemoveFriendRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("remove_friend_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveFriendRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *RemoveFriendRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *RemoveFriendRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *RemoveFriendRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveFriendRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Count
//  - Resmsg
//  - Extra
type LikesCountRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
  Resmsg string `thrift:"resmsg,3" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewLikesCountRes() *LikesCountRes {
  return &LikesCountRes{}
}


func (p *LikesCountRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *LikesCountRes) GetCount() int32 {
  return p.Count
}

func (p *LikesCountRes) GetResmsg() string {
  return p.Resmsg
}

func (p *LikesCountRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *LikesCountRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LikesCountRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *LikesCountRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *LikesCountRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *LikesCountRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key45 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key45 = v
}
var _val46 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val46 = v
}
    p.Extra[_key45] = _val46
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *LikesCountRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("likes_count_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LikesCountRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *LikesCountRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *LikesCountRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resmsg: ", p), err) }
  return err
}

func (p *LikesCountRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *LikesCountRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LikesCountRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type LikesAddRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewLikesAddRes() *LikesAddRes {
  return &LikesAddRes{}
}


func (p *LikesAddRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *LikesAddRes) GetResmsg() string {
  return p.Resmsg
}

func (p *LikesAddRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *LikesAddRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LikesAddRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *LikesAddRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *LikesAddRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key47 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key47 = v
}
var _val48 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val48 = v
}
    p.Extra[_key47] = _val48
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *LikesAddRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("likes_add_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LikesAddRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *LikesAddRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *LikesAddRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *LikesAddRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LikesAddRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - CreateAt
type Likes struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  CreateAt int64 `thrift:"create_at,2" db:"create_at" json:"create_at"`
}

func NewLikes() *Likes {
  return &Likes{}
}


func (p *Likes) GetUID() int64 {
  return p.UID
}

func (p *Likes) GetCreateAt() int64 {
  return p.CreateAt
}
func (p *Likes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Likes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *Likes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreateAt = v
}
  return nil
}

func (p *Likes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("likes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Likes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *Likes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("create_at", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:create_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_at (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:create_at: ", p), err) }
  return err
}

func (p *Likes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Likes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Data
//  - Extra
type LikesListRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Data []*Likes `thrift:"data,3" db:"data" json:"data"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewLikesListRes() *LikesListRes {
  return &LikesListRes{}
}


func (p *LikesListRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *LikesListRes) GetResmsg() string {
  return p.Resmsg
}

func (p *LikesListRes) GetData() []*Likes {
  return p.Data
}

func (p *LikesListRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *LikesListRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LikesListRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *LikesListRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *LikesListRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Likes, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem49 := &Likes{}
    if err := _elem49.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem49), err)
    }
    p.Data = append(p.Data, _elem49)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LikesListRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key50 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key50 = v
}
var _val51 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val51 = v
}
    p.Extra[_key50] = _val51
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *LikesListRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("likes_list_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LikesListRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *LikesListRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *LikesListRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *LikesListRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *LikesListRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LikesListRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - UserID
//  - Title
//  - Thumb
//  - Desc
//  - Sign
//  - CreateAt
//  - UpdateAt
type NoteMeta struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Title string `thrift:"title,3" db:"title" json:"title"`
  Thumb string `thrift:"thumb,4" db:"thumb" json:"thumb"`
  Desc string `thrift:"desc,5" db:"desc" json:"desc"`
  Sign string `thrift:"sign,6" db:"sign" json:"sign"`
  CreateAt string `thrift:"create_at,7" db:"create_at" json:"create_at"`
  UpdateAt string `thrift:"update_at,8" db:"update_at" json:"update_at"`
}

func NewNoteMeta() *NoteMeta {
  return &NoteMeta{}
}


func (p *NoteMeta) GetUID() int64 {
  return p.UID
}

func (p *NoteMeta) GetUserID() int64 {
  return p.UserID
}

func (p *NoteMeta) GetTitle() string {
  return p.Title
}

func (p *NoteMeta) GetThumb() string {
  return p.Thumb
}

func (p *NoteMeta) GetDesc() string {
  return p.Desc
}

func (p *NoteMeta) GetSign() string {
  return p.Sign
}

func (p *NoteMeta) GetCreateAt() string {
  return p.CreateAt
}

func (p *NoteMeta) GetUpdateAt() string {
  return p.UpdateAt
}
func (p *NoteMeta) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoteMeta)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *NoteMeta)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *NoteMeta)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *NoteMeta)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Thumb = v
}
  return nil
}

func (p *NoteMeta)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Desc = v
}
  return nil
}

func (p *NoteMeta)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Sign = v
}
  return nil
}

func (p *NoteMeta)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CreateAt = v
}
  return nil
}

func (p *NoteMeta)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.UpdateAt = v
}
  return nil
}

func (p *NoteMeta) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("note_meta"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoteMeta) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *NoteMeta) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *NoteMeta) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err) }
  return err
}

func (p *NoteMeta) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thumb", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:thumb: ", p), err) }
  if err := oprot.WriteString(string(p.Thumb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumb (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:thumb: ", p), err) }
  return err
}

func (p *NoteMeta) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("desc", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:desc: ", p), err) }
  if err := oprot.WriteString(string(p.Desc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.desc (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:desc: ", p), err) }
  return err
}

func (p *NoteMeta) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sign: ", p), err) }
  if err := oprot.WriteString(string(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sign: ", p), err) }
  return err
}

func (p *NoteMeta) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("create_at", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:create_at: ", p), err) }
  if err := oprot.WriteString(string(p.CreateAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_at (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:create_at: ", p), err) }
  return err
}

func (p *NoteMeta) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("update_at", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:update_at: ", p), err) }
  if err := oprot.WriteString(string(p.UpdateAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update_at (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:update_at: ", p), err) }
  return err
}

func (p *NoteMeta) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoteMeta(%+v)", *p)
}

// Attributes:
//  - UID
//  - Data
//  - HTML
//  - Extra
type UpdateNoteReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Data string `thrift:"data,2" db:"data" json:"data"`
  HTML string `thrift:"html,3" db:"html" json:"html"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewUpdateNoteReq() *UpdateNoteReq {
  return &UpdateNoteReq{}
}


func (p *UpdateNoteReq) GetUID() int64 {
  return p.UID
}

func (p *UpdateNoteReq) GetData() string {
  return p.Data
}

func (p *UpdateNoteReq) GetHTML() string {
  return p.HTML
}

func (p *UpdateNoteReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *UpdateNoteReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateNoteReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *UpdateNoteReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *UpdateNoteReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HTML = v
}
  return nil
}

func (p *UpdateNoteReq)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key52 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key52 = v
}
var _val53 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val53 = v
}
    p.Extra[_key52] = _val53
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UpdateNoteReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_note_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateNoteReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *UpdateNoteReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *UpdateNoteReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("html", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:html: ", p), err) }
  if err := oprot.WriteString(string(p.HTML)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.html (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:html: ", p), err) }
  return err
}

func (p *UpdateNoteReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *UpdateNoteReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateNoteReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Meta
//  - Extra
type NoteMetaRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Meta *NoteMeta `thrift:"meta,3" db:"meta" json:"meta"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewNoteMetaRes() *NoteMetaRes {
  return &NoteMetaRes{}
}


func (p *NoteMetaRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *NoteMetaRes) GetResmsg() string {
  return p.Resmsg
}
var NoteMetaRes_Meta_DEFAULT *NoteMeta
func (p *NoteMetaRes) GetMeta() *NoteMeta {
  if !p.IsSetMeta() {
    return NoteMetaRes_Meta_DEFAULT
  }
return p.Meta
}

func (p *NoteMetaRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *NoteMetaRes) IsSetMeta() bool {
  return p.Meta != nil
}

func (p *NoteMetaRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoteMetaRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *NoteMetaRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *NoteMetaRes)  ReadField3(iprot thrift.TProtocol) error {
  p.Meta = &NoteMeta{}
  if err := p.Meta.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Meta), err)
  }
  return nil
}

func (p *NoteMetaRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key54 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key54 = v
}
var _val55 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val55 = v
}
    p.Extra[_key54] = _val55
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *NoteMetaRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("note_meta_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoteMetaRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *NoteMetaRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *NoteMetaRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("meta", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:meta: ", p), err) }
  if err := p.Meta.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Meta), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:meta: ", p), err) }
  return err
}

func (p *NoteMetaRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *NoteMetaRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoteMetaRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Meta
//  - Extra
type NoteMetaListRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Meta []*NoteMeta `thrift:"meta,3" db:"meta" json:"meta"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewNoteMetaListRes() *NoteMetaListRes {
  return &NoteMetaListRes{}
}


func (p *NoteMetaListRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *NoteMetaListRes) GetResmsg() string {
  return p.Resmsg
}

func (p *NoteMetaListRes) GetMeta() []*NoteMeta {
  return p.Meta
}

func (p *NoteMetaListRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *NoteMetaListRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoteMetaListRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *NoteMetaListRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *NoteMetaListRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NoteMeta, 0, size)
  p.Meta =  tSlice
  for i := 0; i < size; i ++ {
    _elem56 := &NoteMeta{}
    if err := _elem56.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem56), err)
    }
    p.Meta = append(p.Meta, _elem56)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NoteMetaListRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key57 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key57 = v
}
var _val58 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val58 = v
}
    p.Extra[_key57] = _val58
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *NoteMetaListRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("note_meta_list_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoteMetaListRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *NoteMetaListRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *NoteMetaListRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("meta", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:meta: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Meta)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Meta {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:meta: ", p), err) }
  return err
}

func (p *NoteMetaListRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *NoteMetaListRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoteMetaListRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Count
//  - Extra
type NoteListCountRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewNoteListCountRes() *NoteListCountRes {
  return &NoteListCountRes{}
}


func (p *NoteListCountRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *NoteListCountRes) GetResmsg() string {
  return p.Resmsg
}

func (p *NoteListCountRes) GetCount() int32 {
  return p.Count
}

func (p *NoteListCountRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *NoteListCountRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoteListCountRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *NoteListCountRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *NoteListCountRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *NoteListCountRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key59 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key59 = v
}
var _val60 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val60 = v
}
    p.Extra[_key59] = _val60
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *NoteListCountRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("note_list_count_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoteListCountRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *NoteListCountRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *NoteListCountRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *NoteListCountRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *NoteListCountRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoteListCountRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Data
//  - Extra
type NoteDataRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Data string `thrift:"data,3" db:"data" json:"data"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewNoteDataRes() *NoteDataRes {
  return &NoteDataRes{}
}


func (p *NoteDataRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *NoteDataRes) GetResmsg() string {
  return p.Resmsg
}

func (p *NoteDataRes) GetData() string {
  return p.Data
}

func (p *NoteDataRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *NoteDataRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoteDataRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *NoteDataRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *NoteDataRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *NoteDataRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key61 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key61 = v
}
var _val62 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val62 = v
}
    p.Extra[_key61] = _val62
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *NoteDataRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("note_data_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoteDataRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *NoteDataRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *NoteDataRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *NoteDataRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *NoteDataRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoteDataRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Data
//  - Extra
type NoteHTMLRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Data string `thrift:"data,3" db:"data" json:"data"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewNoteHTMLRes() *NoteHTMLRes {
  return &NoteHTMLRes{}
}


func (p *NoteHTMLRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *NoteHTMLRes) GetResmsg() string {
  return p.Resmsg
}

func (p *NoteHTMLRes) GetData() string {
  return p.Data
}

func (p *NoteHTMLRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *NoteHTMLRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoteHTMLRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *NoteHTMLRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *NoteHTMLRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *NoteHTMLRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key63 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key63 = v
}
var _val64 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val64 = v
}
    p.Extra[_key63] = _val64
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *NoteHTMLRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("note_html_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoteHTMLRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *NoteHTMLRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *NoteHTMLRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *NoteHTMLRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *NoteHTMLRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoteHTMLRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Count
//  - Extra
type MomentsCountRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewMomentsCountRes() *MomentsCountRes {
  return &MomentsCountRes{}
}


func (p *MomentsCountRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *MomentsCountRes) GetResmsg() string {
  return p.Resmsg
}

func (p *MomentsCountRes) GetCount() int32 {
  return p.Count
}

func (p *MomentsCountRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *MomentsCountRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MomentsCountRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *MomentsCountRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *MomentsCountRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *MomentsCountRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key65 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key65 = v
}
var _val66 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val66 = v
}
    p.Extra[_key65] = _val66
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MomentsCountRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("moments_count_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MomentsCountRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *MomentsCountRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *MomentsCountRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *MomentsCountRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *MomentsCountRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MomentsCountRes(%+v)", *p)
}

// Attributes:
//  - Path
//  - Type
type Extra struct {
  Path string `thrift:"path,1" db:"path" json:"path"`
  Type int32 `thrift:"type,2" db:"type" json:"type"`
}

func NewExtra() *Extra {
  return &Extra{}
}


func (p *Extra) GetPath() string {
  return p.Path
}

func (p *Extra) GetType() int32 {
  return p.Type
}
func (p *Extra) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Extra)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *Extra)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *Extra) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("extra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Extra) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  return err
}

func (p *Extra) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *Extra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Extra(%+v)", *p)
}

// Attributes:
//  - ID
//  - Mid
//  - Text
//  - Extra
//  - CreateAt
type Moments struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Text string `thrift:"text,3" db:"text" json:"text"`
  Extra []*Extra `thrift:"extra,4" db:"extra" json:"extra"`
  CreateAt int32 `thrift:"create_at,5" db:"create_at" json:"create_at"`
}

func NewMoments() *Moments {
  return &Moments{}
}


func (p *Moments) GetID() int64 {
  return p.ID
}

func (p *Moments) GetMid() string {
  return p.Mid
}

func (p *Moments) GetText() string {
  return p.Text
}

func (p *Moments) GetExtra() []*Extra {
  return p.Extra
}

func (p *Moments) GetCreateAt() int32 {
  return p.CreateAt
}
func (p *Moments) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Moments)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Moments)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Moments)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *Moments)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extra, 0, size)
  p.Extra =  tSlice
  for i := 0; i < size; i ++ {
    _elem67 := &Extra{}
    if err := _elem67.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem67), err)
    }
    p.Extra = append(p.Extra, _elem67)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Moments)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreateAt = v
}
  return nil
}

func (p *Moments) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("moments"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Moments) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Moments) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *Moments) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:text: ", p), err) }
  return err
}

func (p *Moments) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Extra {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *Moments) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("create_at", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:create_at: ", p), err) }
  if err := oprot.WriteI32(int32(p.CreateAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_at (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:create_at: ", p), err) }
  return err
}

func (p *Moments) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Moments(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type AddMomentsRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewAddMomentsRes() *AddMomentsRes {
  return &AddMomentsRes{}
}


func (p *AddMomentsRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *AddMomentsRes) GetResmsg() string {
  return p.Resmsg
}
func (p *AddMomentsRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddMomentsRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *AddMomentsRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *AddMomentsRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_moments_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddMomentsRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *AddMomentsRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *AddMomentsRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddMomentsRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Data
type MomentsListRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Data []*Moments `thrift:"data,3" db:"data" json:"data"`
}

func NewMomentsListRes() *MomentsListRes {
  return &MomentsListRes{}
}


func (p *MomentsListRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *MomentsListRes) GetResmsg() string {
  return p.Resmsg
}

func (p *MomentsListRes) GetData() []*Moments {
  return p.Data
}
func (p *MomentsListRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MomentsListRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *MomentsListRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *MomentsListRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Moments, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem68 := &Moments{}
    if err := _elem68.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem68), err)
    }
    p.Data = append(p.Data, _elem68)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MomentsListRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("moments_list_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MomentsListRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *MomentsListRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *MomentsListRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *MomentsListRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MomentsListRes(%+v)", *p)
}

// Attributes:
//  - Name
//  - Type
//  - Path
//  - Size
//  - URL
//  - CreateAt
//  - UpdateAt
//  - Extra
type FileItem struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Type int32 `thrift:"type,2" db:"type" json:"type"`
  Path string `thrift:"path,3" db:"path" json:"path"`
  Size int64 `thrift:"size,4" db:"size" json:"size"`
  URL string `thrift:"url,5" db:"url" json:"url"`
  CreateAt int64 `thrift:"create_at,6" db:"create_at" json:"create_at"`
  UpdateAt int64 `thrift:"update_at,7" db:"update_at" json:"update_at"`
  Extra string `thrift:"extra,8" db:"extra" json:"extra"`
}

func NewFileItem() *FileItem {
  return &FileItem{}
}


func (p *FileItem) GetName() string {
  return p.Name
}

func (p *FileItem) GetType() int32 {
  return p.Type
}

func (p *FileItem) GetPath() string {
  return p.Path
}

func (p *FileItem) GetSize() int64 {
  return p.Size
}

func (p *FileItem) GetURL() string {
  return p.URL
}

func (p *FileItem) GetCreateAt() int64 {
  return p.CreateAt
}

func (p *FileItem) GetUpdateAt() int64 {
  return p.UpdateAt
}

func (p *FileItem) GetExtra() string {
  return p.Extra
}
func (p *FileItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *FileItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *FileItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *FileItem)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *FileItem)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *FileItem)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreateAt = v
}
  return nil
}

func (p *FileItem)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UpdateAt = v
}
  return nil
}

func (p *FileItem)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Extra = v
}
  return nil
}

func (p *FileItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FileItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *FileItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *FileItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:path: ", p), err) }
  return err
}

func (p *FileItem) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:size: ", p), err) }
  if err := oprot.WriteI64(int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:size: ", p), err) }
  return err
}

func (p *FileItem) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:url: ", p), err) }
  return err
}

func (p *FileItem) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("create_at", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:create_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_at (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:create_at: ", p), err) }
  return err
}

func (p *FileItem) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("update_at", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:update_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update_at (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:update_at: ", p), err) }
  return err
}

func (p *FileItem) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extra: ", p), err) }
  if err := oprot.WriteString(string(p.Extra)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.extra (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extra: ", p), err) }
  return err
}

func (p *FileItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileItem(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Dirs
type FileDirRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Dirs []*FileItem `thrift:"dirs,3" db:"dirs" json:"dirs"`
}

func NewFileDirRes() *FileDirRes {
  return &FileDirRes{}
}


func (p *FileDirRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *FileDirRes) GetResmsg() string {
  return p.Resmsg
}

func (p *FileDirRes) GetDirs() []*FileItem {
  return p.Dirs
}
func (p *FileDirRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileDirRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *FileDirRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *FileDirRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FileItem, 0, size)
  p.Dirs =  tSlice
  for i := 0; i < size; i ++ {
    _elem69 := &FileItem{}
    if err := _elem69.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem69), err)
    }
    p.Dirs = append(p.Dirs, _elem69)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FileDirRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("file_dir_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileDirRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *FileDirRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *FileDirRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dirs", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dirs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Dirs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Dirs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dirs: ", p), err) }
  return err
}

func (p *FileDirRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileDirRes(%+v)", *p)
}

// Attributes:
//  - Parent
//  - Name
type AddDirReq struct {
  Parent string `thrift:"parent,1" db:"parent" json:"parent"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewAddDirReq() *AddDirReq {
  return &AddDirReq{}
}


func (p *AddDirReq) GetParent() string {
  return p.Parent
}

func (p *AddDirReq) GetName() string {
  return p.Name
}
func (p *AddDirReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddDirReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Parent = v
}
  return nil
}

func (p *AddDirReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *AddDirReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_dir_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddDirReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parent", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent: ", p), err) }
  if err := oprot.WriteString(string(p.Parent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent: ", p), err) }
  return err
}

func (p *AddDirReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *AddDirReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddDirReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type AddDirRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewAddDirRes() *AddDirRes {
  return &AddDirRes{}
}


func (p *AddDirRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *AddDirRes) GetResmsg() string {
  return p.Resmsg
}
func (p *AddDirRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddDirRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *AddDirRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *AddDirRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_dir_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddDirRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *AddDirRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *AddDirRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddDirRes(%+v)", *p)
}

// Attributes:
//  - Size
//  - Path
//  - Name
//  - URL
//  - Thumb
//  - ContentType
type AddFileReq struct {
  Size int64 `thrift:"size,1" db:"size" json:"size"`
  Path string `thrift:"path,2" db:"path" json:"path"`
  Name string `thrift:"name,3" db:"name" json:"name"`
  URL string `thrift:"url,4" db:"url" json:"url"`
  Thumb string `thrift:"thumb,5" db:"thumb" json:"thumb"`
  ContentType string `thrift:"content_type,6" db:"content_type" json:"content_type"`
}

func NewAddFileReq() *AddFileReq {
  return &AddFileReq{}
}


func (p *AddFileReq) GetSize() int64 {
  return p.Size
}

func (p *AddFileReq) GetPath() string {
  return p.Path
}

func (p *AddFileReq) GetName() string {
  return p.Name
}

func (p *AddFileReq) GetURL() string {
  return p.URL
}

func (p *AddFileReq) GetThumb() string {
  return p.Thumb
}

func (p *AddFileReq) GetContentType() string {
  return p.ContentType
}
func (p *AddFileReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddFileReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *AddFileReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *AddFileReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *AddFileReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *AddFileReq)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Thumb = v
}
  return nil
}

func (p *AddFileReq)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ContentType = v
}
  return nil
}

func (p *AddFileReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_file_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddFileReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:size: ", p), err) }
  if err := oprot.WriteI64(int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:size: ", p), err) }
  return err
}

func (p *AddFileReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *AddFileReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *AddFileReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:url: ", p), err) }
  return err
}

func (p *AddFileReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thumb", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:thumb: ", p), err) }
  if err := oprot.WriteString(string(p.Thumb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumb (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:thumb: ", p), err) }
  return err
}

func (p *AddFileReq) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content_type", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:content_type: ", p), err) }
  if err := oprot.WriteString(string(p.ContentType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content_type (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:content_type: ", p), err) }
  return err
}

func (p *AddFileReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddFileReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type AddFileRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewAddFileRes() *AddFileRes {
  return &AddFileRes{}
}


func (p *AddFileRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *AddFileRes) GetResmsg() string {
  return p.Resmsg
}
func (p *AddFileRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddFileRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *AddFileRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *AddFileRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_file_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddFileRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *AddFileRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *AddFileRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddFileRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Capacity
//  - Number
type FileAttrRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Capacity int64 `thrift:"capacity,3" db:"capacity" json:"capacity"`
  Number int32 `thrift:"number,4" db:"number" json:"number"`
}

func NewFileAttrRes() *FileAttrRes {
  return &FileAttrRes{}
}


func (p *FileAttrRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *FileAttrRes) GetResmsg() string {
  return p.Resmsg
}

func (p *FileAttrRes) GetCapacity() int64 {
  return p.Capacity
}

func (p *FileAttrRes) GetNumber() int32 {
  return p.Number
}
func (p *FileAttrRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileAttrRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *FileAttrRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *FileAttrRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Capacity = v
}
  return nil
}

func (p *FileAttrRes)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Number = v
}
  return nil
}

func (p *FileAttrRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("file_attr_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileAttrRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *FileAttrRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *FileAttrRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capacity", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:capacity: ", p), err) }
  if err := oprot.WriteI64(int64(p.Capacity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capacity (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:capacity: ", p), err) }
  return err
}

func (p *FileAttrRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("number", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:number: ", p), err) }
  if err := oprot.WriteI32(int32(p.Number)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.number (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:number: ", p), err) }
  return err
}

func (p *FileAttrRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileAttrRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Thumb
type ThumbnailRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Thumb string `thrift:"thumb,3" db:"thumb" json:"thumb"`
}

func NewThumbnailRes() *ThumbnailRes {
  return &ThumbnailRes{}
}


func (p *ThumbnailRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *ThumbnailRes) GetResmsg() string {
  return p.Resmsg
}

func (p *ThumbnailRes) GetThumb() string {
  return p.Thumb
}
func (p *ThumbnailRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThumbnailRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *ThumbnailRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *ThumbnailRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Thumb = v
}
  return nil
}

func (p *ThumbnailRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("thumbnail_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThumbnailRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *ThumbnailRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *ThumbnailRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thumb", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:thumb: ", p), err) }
  if err := oprot.WriteString(string(p.Thumb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumb (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:thumb: ", p), err) }
  return err
}

func (p *ThumbnailRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThumbnailRes(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
//  - Expire
type SetKeyvalueReq struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value string `thrift:"value,2" db:"value" json:"value"`
  Expire int64 `thrift:"expire,3" db:"expire" json:"expire"`
}

func NewSetKeyvalueReq() *SetKeyvalueReq {
  return &SetKeyvalueReq{}
}


func (p *SetKeyvalueReq) GetKey() string {
  return p.Key
}

func (p *SetKeyvalueReq) GetValue() string {
  return p.Value
}

func (p *SetKeyvalueReq) GetExpire() int64 {
  return p.Expire
}
func (p *SetKeyvalueReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetKeyvalueReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *SetKeyvalueReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *SetKeyvalueReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Expire = v
}
  return nil
}

func (p *SetKeyvalueReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_keyvalue_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetKeyvalueReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *SetKeyvalueReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *SetKeyvalueReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expire", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expire: ", p), err) }
  if err := oprot.WriteI64(int64(p.Expire)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expire (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expire: ", p), err) }
  return err
}

func (p *SetKeyvalueReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetKeyvalueReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type SetKeyvalueRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewSetKeyvalueRes() *SetKeyvalueRes {
  return &SetKeyvalueRes{}
}


func (p *SetKeyvalueRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SetKeyvalueRes) GetResmsg() string {
  return p.Resmsg
}
func (p *SetKeyvalueRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetKeyvalueRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SetKeyvalueRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SetKeyvalueRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_keyvalue_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetKeyvalueRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SetKeyvalueRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SetKeyvalueRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetKeyvalueRes(%+v)", *p)
}

// Attributes:
//  - Key
type GetKeyvalueReq struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewGetKeyvalueReq() *GetKeyvalueReq {
  return &GetKeyvalueReq{}
}


func (p *GetKeyvalueReq) GetKey() string {
  return p.Key
}
func (p *GetKeyvalueReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetKeyvalueReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *GetKeyvalueReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_keyvalue_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetKeyvalueReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *GetKeyvalueReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetKeyvalueReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Value
type GetKeyvalueRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Value string `thrift:"value,3" db:"value" json:"value"`
}

func NewGetKeyvalueRes() *GetKeyvalueRes {
  return &GetKeyvalueRes{}
}


func (p *GetKeyvalueRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *GetKeyvalueRes) GetResmsg() string {
  return p.Resmsg
}

func (p *GetKeyvalueRes) GetValue() string {
  return p.Value
}
func (p *GetKeyvalueRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetKeyvalueRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *GetKeyvalueRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *GetKeyvalueRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *GetKeyvalueRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_keyvalue_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetKeyvalueRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *GetKeyvalueRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *GetKeyvalueRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *GetKeyvalueRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetKeyvalueRes(%+v)", *p)
}

// Attributes:
//  - Key
type DelKeyvalueReq struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewDelKeyvalueReq() *DelKeyvalueReq {
  return &DelKeyvalueReq{}
}


func (p *DelKeyvalueReq) GetKey() string {
  return p.Key
}
func (p *DelKeyvalueReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DelKeyvalueReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *DelKeyvalueReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_keyvalue_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DelKeyvalueReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *DelKeyvalueReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DelKeyvalueReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type DelKeyvalueRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewDelKeyvalueRes() *DelKeyvalueRes {
  return &DelKeyvalueRes{}
}


func (p *DelKeyvalueRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *DelKeyvalueRes) GetResmsg() string {
  return p.Resmsg
}
func (p *DelKeyvalueRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DelKeyvalueRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *DelKeyvalueRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *DelKeyvalueRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_keyvalue_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DelKeyvalueRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *DelKeyvalueRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *DelKeyvalueRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DelKeyvalueRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Versions
//  - Extra
type VersionRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Versions []*common.VersionItem `thrift:"versions,3" db:"versions" json:"versions"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewVersionRes() *VersionRes {
  return &VersionRes{}
}


func (p *VersionRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *VersionRes) GetResmsg() string {
  return p.Resmsg
}

func (p *VersionRes) GetVersions() []*common.VersionItem {
  return p.Versions
}

func (p *VersionRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *VersionRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VersionRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *VersionRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *VersionRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.VersionItem, 0, size)
  p.Versions =  tSlice
  for i := 0; i < size; i ++ {
    _elem70 := &common.VersionItem{}
    if err := _elem70.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem70), err)
    }
    p.Versions = append(p.Versions, _elem70)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VersionRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key71 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key71 = v
}
var _val72 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val72 = v
}
    p.Extra[_key71] = _val72
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *VersionRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("version_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VersionRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *VersionRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *VersionRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("versions", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:versions: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Versions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Versions {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:versions: ", p), err) }
  return err
}

func (p *VersionRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *VersionRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VersionRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Name
//  - Extra
type SubjectNameRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Name string `thrift:"name,3" db:"name" json:"name"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewSubjectNameRes() *SubjectNameRes {
  return &SubjectNameRes{}
}


func (p *SubjectNameRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SubjectNameRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SubjectNameRes) GetName() string {
  return p.Name
}

func (p *SubjectNameRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *SubjectNameRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SubjectNameRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SubjectNameRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SubjectNameRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SubjectNameRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key73 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key73 = v
}
var _val74 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val74 = v
}
    p.Extra[_key73] = _val74
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SubjectNameRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_name_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SubjectNameRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SubjectNameRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SubjectNameRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *SubjectNameRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *SubjectNameRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SubjectNameRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Title
//  - Childs
type ChapterResItem struct {
  UID string `thrift:"uid,1" db:"uid" json:"uid"`
  Title string `thrift:"title,2" db:"title" json:"title"`
  Childs []*common.ChapterItem `thrift:"childs,3" db:"childs" json:"childs"`
}

func NewChapterResItem() *ChapterResItem {
  return &ChapterResItem{}
}


func (p *ChapterResItem) GetUID() string {
  return p.UID
}

func (p *ChapterResItem) GetTitle() string {
  return p.Title
}

func (p *ChapterResItem) GetChilds() []*common.ChapterItem {
  return p.Childs
}
func (p *ChapterResItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChapterResItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *ChapterResItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *ChapterResItem)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.ChapterItem, 0, size)
  p.Childs =  tSlice
  for i := 0; i < size; i ++ {
    _elem75 := &common.ChapterItem{}
    if err := _elem75.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem75), err)
    }
    p.Childs = append(p.Childs, _elem75)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChapterResItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("chapter_res_item"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChapterResItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteString(string(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *ChapterResItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  return err
}

func (p *ChapterResItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("childs", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:childs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Childs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Childs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:childs: ", p), err) }
  return err
}

func (p *ChapterResItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChapterResItem(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Chapters
//  - Extra
type ChapterRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Chapters []*ChapterResItem `thrift:"chapters,3" db:"chapters" json:"chapters"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewChapterRes() *ChapterRes {
  return &ChapterRes{}
}


func (p *ChapterRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *ChapterRes) GetResmsg() string {
  return p.Resmsg
}

func (p *ChapterRes) GetChapters() []*ChapterResItem {
  return p.Chapters
}

func (p *ChapterRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *ChapterRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChapterRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *ChapterRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *ChapterRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChapterResItem, 0, size)
  p.Chapters =  tSlice
  for i := 0; i < size; i ++ {
    _elem76 := &ChapterResItem{}
    if err := _elem76.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem76), err)
    }
    p.Chapters = append(p.Chapters, _elem76)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChapterRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key77 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key77 = v
}
var _val78 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val78 = v
}
    p.Extra[_key77] = _val78
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ChapterRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("chapter_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChapterRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *ChapterRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *ChapterRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chapters", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chapters: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Chapters)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Chapters {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chapters: ", p), err) }
  return err
}

func (p *ChapterRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *ChapterRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChapterRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Sources
//  - Extra
type SourceRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Sources []*common.SourceItem `thrift:"sources,3" db:"sources" json:"sources"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewSourceRes() *SourceRes {
  return &SourceRes{}
}


func (p *SourceRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SourceRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SourceRes) GetSources() []*common.SourceItem {
  return p.Sources
}

func (p *SourceRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *SourceRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SourceRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SourceRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SourceRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.SourceItem, 0, size)
  p.Sources =  tSlice
  for i := 0; i < size; i ++ {
    _elem79 := &common.SourceItem{}
    if err := _elem79.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem79), err)
    }
    p.Sources = append(p.Sources, _elem79)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SourceRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key80 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key80 = v
}
var _val81 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val81 = v
}
    p.Extra[_key80] = _val81
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SourceRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("source_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SourceRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SourceRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SourceRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sources", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sources: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Sources)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Sources {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sources: ", p), err) }
  return err
}

func (p *SourceRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *SourceRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SourceRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Tixings
//  - Extra
type TixingRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Tixings []*common.TixingItem `thrift:"tixings,3" db:"tixings" json:"tixings"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewTixingRes() *TixingRes {
  return &TixingRes{}
}


func (p *TixingRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *TixingRes) GetResmsg() string {
  return p.Resmsg
}

func (p *TixingRes) GetTixings() []*common.TixingItem {
  return p.Tixings
}

func (p *TixingRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *TixingRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TixingRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *TixingRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *TixingRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.TixingItem, 0, size)
  p.Tixings =  tSlice
  for i := 0; i < size; i ++ {
    _elem82 := &common.TixingItem{}
    if err := _elem82.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem82), err)
    }
    p.Tixings = append(p.Tixings, _elem82)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TixingRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key83 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key83 = v
}
var _val84 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val84 = v
}
    p.Extra[_key83] = _val84
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TixingRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("tixing_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TixingRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *TixingRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *TixingRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tixings", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tixings: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tixings)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tixings {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tixings: ", p), err) }
  return err
}

func (p *TixingRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *TixingRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TixingRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Count
//  - Extra
type TimuCountRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewTimuCountRes() *TimuCountRes {
  return &TimuCountRes{}
}


func (p *TimuCountRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *TimuCountRes) GetResmsg() string {
  return p.Resmsg
}

func (p *TimuCountRes) GetCount() int32 {
  return p.Count
}

func (p *TimuCountRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *TimuCountRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimuCountRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *TimuCountRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *TimuCountRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TimuCountRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key85 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key85 = v
}
var _val86 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val86 = v
}
    p.Extra[_key85] = _val86
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimuCountRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("timu_count_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimuCountRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *TimuCountRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *TimuCountRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TimuCountRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *TimuCountRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimuCountRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Timus
//  - Extra
type TimuAddReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Timus *common.TimuItem `thrift:"timus,2" db:"timus" json:"timus"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewTimuAddReq() *TimuAddReq {
  return &TimuAddReq{}
}


func (p *TimuAddReq) GetUID() int64 {
  return p.UID
}
var TimuAddReq_Timus_DEFAULT *common.TimuItem
func (p *TimuAddReq) GetTimus() *common.TimuItem {
  if !p.IsSetTimus() {
    return TimuAddReq_Timus_DEFAULT
  }
return p.Timus
}

func (p *TimuAddReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *TimuAddReq) IsSetTimus() bool {
  return p.Timus != nil
}

func (p *TimuAddReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimuAddReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TimuAddReq)  ReadField2(iprot thrift.TProtocol) error {
  p.Timus = &common.TimuItem{}
  if err := p.Timus.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Timus), err)
  }
  return nil
}

func (p *TimuAddReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key87 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key87 = v
}
var _val88 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val88 = v
}
    p.Extra[_key87] = _val88
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimuAddReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("timu_add_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimuAddReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TimuAddReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timus", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timus: ", p), err) }
  if err := p.Timus.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Timus), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timus: ", p), err) }
  return err
}

func (p *TimuAddReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *TimuAddReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimuAddReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type TimuAddRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewTimuAddRes() *TimuAddRes {
  return &TimuAddRes{}
}


func (p *TimuAddRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *TimuAddRes) GetResmsg() string {
  return p.Resmsg
}

func (p *TimuAddRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *TimuAddRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimuAddRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *TimuAddRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *TimuAddRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key89 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key89 = v
}
var _val90 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val90 = v
}
    p.Extra[_key89] = _val90
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimuAddRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("timu_add_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimuAddRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *TimuAddRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *TimuAddRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *TimuAddRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimuAddRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Timus
//  - Extra
type TimuRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Timus []*common.TimuItem `thrift:"timus,3" db:"timus" json:"timus"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewTimuRes() *TimuRes {
  return &TimuRes{}
}


func (p *TimuRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *TimuRes) GetResmsg() string {
  return p.Resmsg
}

func (p *TimuRes) GetTimus() []*common.TimuItem {
  return p.Timus
}

func (p *TimuRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *TimuRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimuRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *TimuRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *TimuRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.TimuItem, 0, size)
  p.Timus =  tSlice
  for i := 0; i < size; i ++ {
    _elem91 := &common.TimuItem{}
    if err := _elem91.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem91), err)
    }
    p.Timus = append(p.Timus, _elem91)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimuRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key92 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key92 = v
}
var _val93 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val93 = v
}
    p.Extra[_key92] = _val93
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimuRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("timu_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimuRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *TimuRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *TimuRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timus", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timus: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Timus)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Timus {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timus: ", p), err) }
  return err
}

func (p *TimuRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *TimuRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimuRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Tid
//  - Extra
type TimuByIDReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Tid string `thrift:"tid,2" db:"tid" json:"tid"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewTimuByIDReq() *TimuByIDReq {
  return &TimuByIDReq{}
}


func (p *TimuByIDReq) GetUID() int64 {
  return p.UID
}

func (p *TimuByIDReq) GetTid() string {
  return p.Tid
}

func (p *TimuByIDReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *TimuByIDReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimuByIDReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TimuByIDReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tid = v
}
  return nil
}

func (p *TimuByIDReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key94 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key94 = v
}
var _val95 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val95 = v
}
    p.Extra[_key94] = _val95
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimuByIDReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("timu_by_id_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimuByIDReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *TimuByIDReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tid: ", p), err) }
  if err := oprot.WriteString(string(p.Tid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tid: ", p), err) }
  return err
}

func (p *TimuByIDReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *TimuByIDReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimuByIDReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Timus
//  - Extra
type TimuByIDRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Timus *common.TimuItem `thrift:"timus,3" db:"timus" json:"timus"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewTimuByIDRes() *TimuByIDRes {
  return &TimuByIDRes{}
}


func (p *TimuByIDRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *TimuByIDRes) GetResmsg() string {
  return p.Resmsg
}
var TimuByIDRes_Timus_DEFAULT *common.TimuItem
func (p *TimuByIDRes) GetTimus() *common.TimuItem {
  if !p.IsSetTimus() {
    return TimuByIDRes_Timus_DEFAULT
  }
return p.Timus
}

func (p *TimuByIDRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *TimuByIDRes) IsSetTimus() bool {
  return p.Timus != nil
}

func (p *TimuByIDRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimuByIDRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *TimuByIDRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *TimuByIDRes)  ReadField3(iprot thrift.TProtocol) error {
  p.Timus = &common.TimuItem{}
  if err := p.Timus.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Timus), err)
  }
  return nil
}

func (p *TimuByIDRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key96 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key96 = v
}
var _val97 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val97 = v
}
    p.Extra[_key96] = _val97
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimuByIDRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("timu_by_id_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimuByIDRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *TimuByIDRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *TimuByIDRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timus", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timus: ", p), err) }
  if err := p.Timus.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Timus), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timus: ", p), err) }
  return err
}

func (p *TimuByIDRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *TimuByIDRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimuByIDRes(%+v)", *p)
}

// Attributes:
//  - Cid
//  - Op
type CollectReq struct {
  Cid string `thrift:"cid,1" db:"cid" json:"cid"`
  Op int64 `thrift:"op,2" db:"op" json:"op"`
}

func NewCollectReq() *CollectReq {
  return &CollectReq{}
}


func (p *CollectReq) GetCid() string {
  return p.Cid
}

func (p *CollectReq) GetOp() int64 {
  return p.Op
}
func (p *CollectReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CollectReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Cid = v
}
  return nil
}

func (p *CollectReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Op = v
}
  return nil
}

func (p *CollectReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("collect_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CollectReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cid: ", p), err) }
  if err := oprot.WriteString(string(p.Cid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cid: ", p), err) }
  return err
}

func (p *CollectReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("op", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err) }
  if err := oprot.WriteI64(int64(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err) }
  return err
}

func (p *CollectReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CollectReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type CollectRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewCollectRes() *CollectRes {
  return &CollectRes{}
}


func (p *CollectRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *CollectRes) GetResmsg() string {
  return p.Resmsg
}

func (p *CollectRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *CollectRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CollectRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *CollectRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *CollectRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key98 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key98 = v
}
var _val99 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val99 = v
}
    p.Extra[_key98] = _val99
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CollectRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("collect_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CollectRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *CollectRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *CollectRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *CollectRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CollectRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Page
//  - Size
type CollectListReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
}

func NewCollectListReq() *CollectListReq {
  return &CollectListReq{}
}


func (p *CollectListReq) GetUID() int64 {
  return p.UID
}

func (p *CollectListReq) GetPage() int32 {
  return p.Page
}

func (p *CollectListReq) GetSize() int32 {
  return p.Size
}
func (p *CollectListReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CollectListReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *CollectListReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *CollectListReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *CollectListReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("collect_list_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CollectListReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *CollectListReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *CollectListReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *CollectListReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CollectListReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Timus
//  - Extra
type CollectListRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Timus []*common.TimuItem `thrift:"timus,3" db:"timus" json:"timus"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewCollectListRes() *CollectListRes {
  return &CollectListRes{}
}


func (p *CollectListRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *CollectListRes) GetResmsg() string {
  return p.Resmsg
}

func (p *CollectListRes) GetTimus() []*common.TimuItem {
  return p.Timus
}

func (p *CollectListRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *CollectListRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CollectListRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *CollectListRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *CollectListRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.TimuItem, 0, size)
  p.Timus =  tSlice
  for i := 0; i < size; i ++ {
    _elem100 := &common.TimuItem{}
    if err := _elem100.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem100), err)
    }
    p.Timus = append(p.Timus, _elem100)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CollectListRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key101 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key101 = v
}
var _val102 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val102 = v
}
    p.Extra[_key101] = _val102
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CollectListRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("collect_list_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CollectListRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *CollectListRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *CollectListRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timus", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timus: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Timus)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Timus {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timus: ", p), err) }
  return err
}

func (p *CollectListRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *CollectListRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CollectListRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Tid
//  - Timu
type ModifyReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Tid string `thrift:"tid,2" db:"tid" json:"tid"`
  Timu *common.Question `thrift:"timu,3" db:"timu" json:"timu"`
}

func NewModifyReq() *ModifyReq {
  return &ModifyReq{}
}


func (p *ModifyReq) GetUID() int64 {
  return p.UID
}

func (p *ModifyReq) GetTid() string {
  return p.Tid
}
var ModifyReq_Timu_DEFAULT *common.Question
func (p *ModifyReq) GetTimu() *common.Question {
  if !p.IsSetTimu() {
    return ModifyReq_Timu_DEFAULT
  }
return p.Timu
}
func (p *ModifyReq) IsSetTimu() bool {
  return p.Timu != nil
}

func (p *ModifyReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModifyReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *ModifyReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tid = v
}
  return nil
}

func (p *ModifyReq)  ReadField3(iprot thrift.TProtocol) error {
  p.Timu = &common.Question{}
  if err := p.Timu.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Timu), err)
  }
  return nil
}

func (p *ModifyReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modify_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModifyReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *ModifyReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tid: ", p), err) }
  if err := oprot.WriteString(string(p.Tid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tid: ", p), err) }
  return err
}

func (p *ModifyReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timu", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timu: ", p), err) }
  if err := p.Timu.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Timu), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timu: ", p), err) }
  return err
}

func (p *ModifyReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModifyReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type ModifyRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewModifyRes() *ModifyRes {
  return &ModifyRes{}
}


func (p *ModifyRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *ModifyRes) GetResmsg() string {
  return p.Resmsg
}

func (p *ModifyRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *ModifyRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModifyRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *ModifyRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *ModifyRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key103 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key103 = v
}
var _val104 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val104 = v
}
    p.Extra[_key103] = _val104
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ModifyRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modify_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModifyRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *ModifyRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *ModifyRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *ModifyRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModifyRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Page
//  - Size
//  - Sorted
//  - Status
type ModifyListReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
  Sorted string `thrift:"sorted,4" db:"sorted" json:"sorted"`
  Status string `thrift:"status,5" db:"status" json:"status"`
}

func NewModifyListReq() *ModifyListReq {
  return &ModifyListReq{}
}


func (p *ModifyListReq) GetUID() int64 {
  return p.UID
}

func (p *ModifyListReq) GetPage() int32 {
  return p.Page
}

func (p *ModifyListReq) GetSize() int32 {
  return p.Size
}

func (p *ModifyListReq) GetSorted() string {
  return p.Sorted
}

func (p *ModifyListReq) GetStatus() string {
  return p.Status
}
func (p *ModifyListReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModifyListReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *ModifyListReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *ModifyListReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *ModifyListReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Sorted = v
}
  return nil
}

func (p *ModifyListReq)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *ModifyListReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modify_list_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModifyListReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *ModifyListReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *ModifyListReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *ModifyListReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sorted", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sorted: ", p), err) }
  if err := oprot.WriteString(string(p.Sorted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sorted (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sorted: ", p), err) }
  return err
}

func (p *ModifyListReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  return err
}

func (p *ModifyListReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModifyListReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Timus
//  - Extra
type ModifyListRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Timus []*common.ModifyItem `thrift:"timus,3" db:"timus" json:"timus"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewModifyListRes() *ModifyListRes {
  return &ModifyListRes{}
}


func (p *ModifyListRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *ModifyListRes) GetResmsg() string {
  return p.Resmsg
}

func (p *ModifyListRes) GetTimus() []*common.ModifyItem {
  return p.Timus
}

func (p *ModifyListRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *ModifyListRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModifyListRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *ModifyListRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *ModifyListRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.ModifyItem, 0, size)
  p.Timus =  tSlice
  for i := 0; i < size; i ++ {
    _elem105 := &common.ModifyItem{}
    if err := _elem105.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem105), err)
    }
    p.Timus = append(p.Timus, _elem105)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModifyListRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key106 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key106 = v
}
var _val107 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val107 = v
}
    p.Extra[_key106] = _val107
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ModifyListRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modify_list_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModifyListRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *ModifyListRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *ModifyListRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timus", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timus: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Timus)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Timus {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timus: ", p), err) }
  return err
}

func (p *ModifyListRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *ModifyListRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModifyListRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Status
//  - Extra
type ModifyCountReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Status string `thrift:"status,2" db:"status" json:"status"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewModifyCountReq() *ModifyCountReq {
  return &ModifyCountReq{}
}


func (p *ModifyCountReq) GetUID() int64 {
  return p.UID
}

func (p *ModifyCountReq) GetStatus() string {
  return p.Status
}

func (p *ModifyCountReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *ModifyCountReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModifyCountReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *ModifyCountReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *ModifyCountReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key108 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key108 = v
}
var _val109 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val109 = v
}
    p.Extra[_key108] = _val109
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ModifyCountReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modify_count_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModifyCountReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *ModifyCountReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *ModifyCountReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *ModifyCountReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModifyCountReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Count
//  - Extra
type ModifyCountRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewModifyCountRes() *ModifyCountRes {
  return &ModifyCountRes{}
}


func (p *ModifyCountRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *ModifyCountRes) GetResmsg() string {
  return p.Resmsg
}

func (p *ModifyCountRes) GetCount() int32 {
  return p.Count
}

func (p *ModifyCountRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *ModifyCountRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModifyCountRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *ModifyCountRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *ModifyCountRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *ModifyCountRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key110 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key110 = v
}
var _val111 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val111 = v
}
    p.Extra[_key110] = _val111
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ModifyCountRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modify_count_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModifyCountRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *ModifyCountRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *ModifyCountRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *ModifyCountRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *ModifyCountRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModifyCountRes(%+v)", *p)
}

// Attributes:
//  - ID
//  - UID
//  - Status
//  - Info
//  - Dest
//  - Extra
type ApproveModifyReq struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  UID int64 `thrift:"uid,2" db:"uid" json:"uid"`
  Status string `thrift:"status,3" db:"status" json:"status"`
  Info string `thrift:"info,4" db:"info" json:"info"`
  Dest common.ApproveDest `thrift:"dest,5" db:"dest" json:"dest"`
  Extra map[string]string `thrift:"extra,6" db:"extra" json:"extra"`
}

func NewApproveModifyReq() *ApproveModifyReq {
  return &ApproveModifyReq{}
}


func (p *ApproveModifyReq) GetID() int64 {
  return p.ID
}

func (p *ApproveModifyReq) GetUID() int64 {
  return p.UID
}

func (p *ApproveModifyReq) GetStatus() string {
  return p.Status
}

func (p *ApproveModifyReq) GetInfo() string {
  return p.Info
}

func (p *ApproveModifyReq) GetDest() common.ApproveDest {
  return p.Dest
}

func (p *ApproveModifyReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *ApproveModifyReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ApproveModifyReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ApproveModifyReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *ApproveModifyReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *ApproveModifyReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Info = v
}
  return nil
}

func (p *ApproveModifyReq)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := common.ApproveDest(v)
  p.Dest = temp
}
  return nil
}

func (p *ApproveModifyReq)  ReadField6(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key112 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key112 = v
}
var _val113 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val113 = v
}
    p.Extra[_key112] = _val113
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ApproveModifyReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("approve_modify_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ApproveModifyReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ApproveModifyReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *ApproveModifyReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *ApproveModifyReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:info: ", p), err) }
  if err := oprot.WriteString(string(p.Info)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.info (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:info: ", p), err) }
  return err
}

func (p *ApproveModifyReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dest", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dest: ", p), err) }
  if err := oprot.WriteI32(int32(p.Dest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dest (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dest: ", p), err) }
  return err
}

func (p *ApproveModifyReq) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extra: ", p), err) }
  return err
}

func (p *ApproveModifyReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ApproveModifyReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type ApproveModifyRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewApproveModifyRes() *ApproveModifyRes {
  return &ApproveModifyRes{}
}


func (p *ApproveModifyRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *ApproveModifyRes) GetResmsg() string {
  return p.Resmsg
}

func (p *ApproveModifyRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *ApproveModifyRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ApproveModifyRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *ApproveModifyRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *ApproveModifyRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key114 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key114 = v
}
var _val115 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val115 = v
}
    p.Extra[_key114] = _val115
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ApproveModifyRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("approve_modify_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ApproveModifyRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *ApproveModifyRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *ApproveModifyRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *ApproveModifyRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ApproveModifyRes(%+v)", *p)
}

// Attributes:
//  - Keyword
//  - UID
//  - Style
//  - Page
//  - Size
type SearchReq struct {
  Keyword string `thrift:"keyword,1" db:"keyword" json:"keyword"`
  UID int64 `thrift:"uid,2" db:"uid" json:"uid"`
  Style common.SearchTyle `thrift:"style,3" db:"style" json:"style"`
  Page int32 `thrift:"page,4" db:"page" json:"page"`
  Size int32 `thrift:"size,5" db:"size" json:"size"`
}

func NewSearchReq() *SearchReq {
  return &SearchReq{}
}


func (p *SearchReq) GetKeyword() string {
  return p.Keyword
}

func (p *SearchReq) GetUID() int64 {
  return p.UID
}

func (p *SearchReq) GetStyle() common.SearchTyle {
  return p.Style
}

func (p *SearchReq) GetPage() int32 {
  return p.Page
}

func (p *SearchReq) GetSize() int32 {
  return p.Size
}
func (p *SearchReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Keyword = v
}
  return nil
}

func (p *SearchReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *SearchReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := common.SearchTyle(v)
  p.Style = temp
}
  return nil
}

func (p *SearchReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *SearchReq)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *SearchReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyword", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyword: ", p), err) }
  if err := oprot.WriteString(string(p.Keyword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyword (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyword: ", p), err) }
  return err
}

func (p *SearchReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *SearchReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("style", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:style: ", p), err) }
  if err := oprot.WriteI32(int32(p.Style)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.style (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:style: ", p), err) }
  return err
}

func (p *SearchReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:page: ", p), err) }
  return err
}

func (p *SearchReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:size: ", p), err) }
  return err
}

func (p *SearchReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Timestamp
//  - Total
//  - Hits
//  - Extra
type SearchRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Timestamp float64 `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
  Total *common.SearchHitsTotal `thrift:"total,4" db:"total" json:"total"`
  Hits []*common.SearchHitsItem `thrift:"hits,5" db:"hits" json:"hits"`
  Extra map[string]string `thrift:"extra,6" db:"extra" json:"extra"`
}

func NewSearchRes() *SearchRes {
  return &SearchRes{}
}


func (p *SearchRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SearchRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SearchRes) GetTimestamp() float64 {
  return p.Timestamp
}
var SearchRes_Total_DEFAULT *common.SearchHitsTotal
func (p *SearchRes) GetTotal() *common.SearchHitsTotal {
  if !p.IsSetTotal() {
    return SearchRes_Total_DEFAULT
  }
return p.Total
}

func (p *SearchRes) GetHits() []*common.SearchHitsItem {
  return p.Hits
}

func (p *SearchRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *SearchRes) IsSetTotal() bool {
  return p.Total != nil
}

func (p *SearchRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SearchRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SearchRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *SearchRes)  ReadField4(iprot thrift.TProtocol) error {
  p.Total = &common.SearchHitsTotal{}
  if err := p.Total.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Total), err)
  }
  return nil
}

func (p *SearchRes)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.SearchHitsItem, 0, size)
  p.Hits =  tSlice
  for i := 0; i < size; i ++ {
    _elem116 := &common.SearchHitsItem{}
    if err := _elem116.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem116), err)
    }
    p.Hits = append(p.Hits, _elem116)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchRes)  ReadField6(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key117 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key117 = v
}
var _val118 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val118 = v
}
    p.Extra[_key117] = _val118
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SearchRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SearchRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SearchRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err) }
  return err
}

func (p *SearchRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:total: ", p), err) }
  if err := p.Total.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Total), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:total: ", p), err) }
  return err
}

func (p *SearchRes) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hits", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:hits: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hits)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hits {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:hits: ", p), err) }
  return err
}

func (p *SearchRes) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extra: ", p), err) }
  return err
}

func (p *SearchRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type AddGradeCateRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewAddGradeCateRes() *AddGradeCateRes {
  return &AddGradeCateRes{}
}


func (p *AddGradeCateRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *AddGradeCateRes) GetResmsg() string {
  return p.Resmsg
}
func (p *AddGradeCateRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddGradeCateRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *AddGradeCateRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *AddGradeCateRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_grade_cate_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddGradeCateRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *AddGradeCateRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *AddGradeCateRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddGradeCateRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Count
//  - Extra
type GradeCateCountRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Count int64 `thrift:"count,3" db:"count" json:"count"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewGradeCateCountRes() *GradeCateCountRes {
  return &GradeCateCountRes{}
}


func (p *GradeCateCountRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *GradeCateCountRes) GetResmsg() string {
  return p.Resmsg
}

func (p *GradeCateCountRes) GetCount() int64 {
  return p.Count
}

func (p *GradeCateCountRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *GradeCateCountRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GradeCateCountRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *GradeCateCountRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *GradeCateCountRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *GradeCateCountRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key119 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key119 = v
}
var _val120 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val120 = v
}
    p.Extra[_key119] = _val120
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GradeCateCountRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_cate_count_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GradeCateCountRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *GradeCateCountRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *GradeCateCountRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI64(int64(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *GradeCateCountRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *GradeCateCountRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GradeCateCountRes(%+v)", *p)
}

// Attributes:
//  - Page
//  - Size
//  - Extra
type GradeCateListReq struct {
  Page int32 `thrift:"page,1" db:"page" json:"page"`
  Size int32 `thrift:"size,2" db:"size" json:"size"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewGradeCateListReq() *GradeCateListReq {
  return &GradeCateListReq{}
}


func (p *GradeCateListReq) GetPage() int32 {
  return p.Page
}

func (p *GradeCateListReq) GetSize() int32 {
  return p.Size
}

func (p *GradeCateListReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *GradeCateListReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GradeCateListReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *GradeCateListReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *GradeCateListReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key121 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key121 = v
}
var _val122 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val122 = v
}
    p.Extra[_key121] = _val122
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GradeCateListReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_cate_list_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GradeCateListReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:page: ", p), err) }
  return err
}

func (p *GradeCateListReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *GradeCateListReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *GradeCateListReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GradeCateListReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Lists
//  - Extra
type GradeCateListRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Lists []*common.GradeCate `thrift:"lists,3" db:"lists" json:"lists"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewGradeCateListRes() *GradeCateListRes {
  return &GradeCateListRes{}
}


func (p *GradeCateListRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *GradeCateListRes) GetResmsg() string {
  return p.Resmsg
}

func (p *GradeCateListRes) GetLists() []*common.GradeCate {
  return p.Lists
}

func (p *GradeCateListRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *GradeCateListRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GradeCateListRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *GradeCateListRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *GradeCateListRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.GradeCate, 0, size)
  p.Lists =  tSlice
  for i := 0; i < size; i ++ {
    _elem123 := &common.GradeCate{}
    if err := _elem123.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem123), err)
    }
    p.Lists = append(p.Lists, _elem123)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GradeCateListRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key124 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key124 = v
}
var _val125 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val125 = v
}
    p.Extra[_key124] = _val125
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GradeCateListRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_cate_list_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GradeCateListRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *GradeCateListRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *GradeCateListRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lists", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lists: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lists)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lists {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lists: ", p), err) }
  return err
}

func (p *GradeCateListRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *GradeCateListRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GradeCateListRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Lists
//  - Extra
type HomeBlackDataRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Lists []*common.SchoolStatic `thrift:"lists,3" db:"lists" json:"lists"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewHomeBlackDataRes() *HomeBlackDataRes {
  return &HomeBlackDataRes{}
}


func (p *HomeBlackDataRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *HomeBlackDataRes) GetResmsg() string {
  return p.Resmsg
}

func (p *HomeBlackDataRes) GetLists() []*common.SchoolStatic {
  return p.Lists
}

func (p *HomeBlackDataRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *HomeBlackDataRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HomeBlackDataRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *HomeBlackDataRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *HomeBlackDataRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.SchoolStatic, 0, size)
  p.Lists =  tSlice
  for i := 0; i < size; i ++ {
    _elem126 := &common.SchoolStatic{}
    if err := _elem126.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem126), err)
    }
    p.Lists = append(p.Lists, _elem126)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HomeBlackDataRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key127 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key127 = v
}
var _val128 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val128 = v
}
    p.Extra[_key127] = _val128
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HomeBlackDataRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("home_black_data_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HomeBlackDataRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *HomeBlackDataRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *HomeBlackDataRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lists", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lists: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lists)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lists {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lists: ", p), err) }
  return err
}

func (p *HomeBlackDataRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *HomeBlackDataRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HomeBlackDataRes(%+v)", *p)
}

// Attributes:
//  - Index
//  - Extra
type GradeSubjectReq struct {
  Index int32 `thrift:"index,1" db:"index" json:"index"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewGradeSubjectReq() *GradeSubjectReq {
  return &GradeSubjectReq{}
}


func (p *GradeSubjectReq) GetIndex() int32 {
  return p.Index
}

func (p *GradeSubjectReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *GradeSubjectReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GradeSubjectReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Index = v
}
  return nil
}

func (p *GradeSubjectReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key129 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key129 = v
}
var _val130 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val130 = v
}
    p.Extra[_key129] = _val130
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GradeSubjectReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_subject_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GradeSubjectReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("index", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index: ", p), err) }
  if err := oprot.WriteI32(int32(p.Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index: ", p), err) }
  return err
}

func (p *GradeSubjectReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  return err
}

func (p *GradeSubjectReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GradeSubjectReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Lists
//  - Extra
type GradeSubjectRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Lists []*common.GradeSubject `thrift:"lists,3" db:"lists" json:"lists"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewGradeSubjectRes() *GradeSubjectRes {
  return &GradeSubjectRes{}
}


func (p *GradeSubjectRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *GradeSubjectRes) GetResmsg() string {
  return p.Resmsg
}

func (p *GradeSubjectRes) GetLists() []*common.GradeSubject {
  return p.Lists
}

func (p *GradeSubjectRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *GradeSubjectRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GradeSubjectRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *GradeSubjectRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *GradeSubjectRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.GradeSubject, 0, size)
  p.Lists =  tSlice
  for i := 0; i < size; i ++ {
    _elem131 := &common.GradeSubject{}
    if err := _elem131.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem131), err)
    }
    p.Lists = append(p.Lists, _elem131)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GradeSubjectRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key132 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key132 = v
}
var _val133 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val133 = v
}
    p.Extra[_key132] = _val133
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GradeSubjectRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_subject_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GradeSubjectRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *GradeSubjectRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *GradeSubjectRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lists", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lists: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lists)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lists {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lists: ", p), err) }
  return err
}

func (p *GradeSubjectRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *GradeSubjectRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GradeSubjectRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type SchoolRollAddRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewSchoolRollAddRes() *SchoolRollAddRes {
  return &SchoolRollAddRes{}
}


func (p *SchoolRollAddRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SchoolRollAddRes) GetResmsg() string {
  return p.Resmsg
}
func (p *SchoolRollAddRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchoolRollAddRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SchoolRollAddRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SchoolRollAddRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("school_roll_add_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchoolRollAddRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SchoolRollAddRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SchoolRollAddRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchoolRollAddRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Count
type SchoolRollCountRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Count int64 `thrift:"count,3" db:"count" json:"count"`
}

func NewSchoolRollCountRes() *SchoolRollCountRes {
  return &SchoolRollCountRes{}
}


func (p *SchoolRollCountRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SchoolRollCountRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SchoolRollCountRes) GetCount() int64 {
  return p.Count
}
func (p *SchoolRollCountRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchoolRollCountRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SchoolRollCountRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SchoolRollCountRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *SchoolRollCountRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("school_roll_count_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchoolRollCountRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SchoolRollCountRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SchoolRollCountRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI64(int64(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *SchoolRollCountRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchoolRollCountRes(%+v)", *p)
}

// Attributes:
//  - Page
//  - Size
//  - Extra
type SchoolRollListReq struct {
  Page int32 `thrift:"page,1" db:"page" json:"page"`
  Size int32 `thrift:"size,2" db:"size" json:"size"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewSchoolRollListReq() *SchoolRollListReq {
  return &SchoolRollListReq{}
}


func (p *SchoolRollListReq) GetPage() int32 {
  return p.Page
}

func (p *SchoolRollListReq) GetSize() int32 {
  return p.Size
}

func (p *SchoolRollListReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *SchoolRollListReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchoolRollListReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *SchoolRollListReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *SchoolRollListReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key134 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key134 = v
}
var _val135 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val135 = v
}
    p.Extra[_key134] = _val135
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SchoolRollListReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("school_roll_list_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchoolRollListReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:page: ", p), err) }
  return err
}

func (p *SchoolRollListReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *SchoolRollListReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *SchoolRollListReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchoolRollListReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Lists
//  - Extra
type SchoolRollListRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Lists []*common.SchoolRoll `thrift:"lists,3" db:"lists" json:"lists"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewSchoolRollListRes() *SchoolRollListRes {
  return &SchoolRollListRes{}
}


func (p *SchoolRollListRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SchoolRollListRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SchoolRollListRes) GetLists() []*common.SchoolRoll {
  return p.Lists
}

func (p *SchoolRollListRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *SchoolRollListRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchoolRollListRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SchoolRollListRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SchoolRollListRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.SchoolRoll, 0, size)
  p.Lists =  tSlice
  for i := 0; i < size; i ++ {
    _elem136 := &common.SchoolRoll{}
    if err := _elem136.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem136), err)
    }
    p.Lists = append(p.Lists, _elem136)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SchoolRollListRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key137 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key137 = v
}
var _val138 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val138 = v
}
    p.Extra[_key137] = _val138
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SchoolRollListRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("school_roll_list_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchoolRollListRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SchoolRollListRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SchoolRollListRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lists", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lists: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lists)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lists {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lists: ", p), err) }
  return err
}

func (p *SchoolRollListRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *SchoolRollListRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchoolRollListRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type SubjectCateAddRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewSubjectCateAddRes() *SubjectCateAddRes {
  return &SubjectCateAddRes{}
}


func (p *SubjectCateAddRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SubjectCateAddRes) GetResmsg() string {
  return p.Resmsg
}
func (p *SubjectCateAddRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SubjectCateAddRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SubjectCateAddRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SubjectCateAddRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_cate_add_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SubjectCateAddRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SubjectCateAddRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SubjectCateAddRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SubjectCateAddRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Count
type SubjectCateCountRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Count int64 `thrift:"count,3" db:"count" json:"count"`
}

func NewSubjectCateCountRes() *SubjectCateCountRes {
  return &SubjectCateCountRes{}
}


func (p *SubjectCateCountRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SubjectCateCountRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SubjectCateCountRes) GetCount() int64 {
  return p.Count
}
func (p *SubjectCateCountRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SubjectCateCountRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SubjectCateCountRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SubjectCateCountRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *SubjectCateCountRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_cate_count_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SubjectCateCountRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SubjectCateCountRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SubjectCateCountRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI64(int64(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *SubjectCateCountRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SubjectCateCountRes(%+v)", *p)
}

// Attributes:
//  - Page
//  - Size
//  - Extra
type SubjectCateListReq struct {
  Page int32 `thrift:"page,1" db:"page" json:"page"`
  Size int32 `thrift:"size,2" db:"size" json:"size"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewSubjectCateListReq() *SubjectCateListReq {
  return &SubjectCateListReq{}
}


func (p *SubjectCateListReq) GetPage() int32 {
  return p.Page
}

func (p *SubjectCateListReq) GetSize() int32 {
  return p.Size
}

func (p *SubjectCateListReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *SubjectCateListReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SubjectCateListReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *SubjectCateListReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *SubjectCateListReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key139 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key139 = v
}
var _val140 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val140 = v
}
    p.Extra[_key139] = _val140
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SubjectCateListReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_cate_list_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SubjectCateListReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:page: ", p), err) }
  return err
}

func (p *SubjectCateListReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *SubjectCateListReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *SubjectCateListReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SubjectCateListReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Lists
//  - Extra
type SubjectCateListRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Lists []*common.SubjectCate `thrift:"lists,3" db:"lists" json:"lists"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewSubjectCateListRes() *SubjectCateListRes {
  return &SubjectCateListRes{}
}


func (p *SubjectCateListRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SubjectCateListRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SubjectCateListRes) GetLists() []*common.SubjectCate {
  return p.Lists
}

func (p *SubjectCateListRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *SubjectCateListRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SubjectCateListRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SubjectCateListRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SubjectCateListRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.SubjectCate, 0, size)
  p.Lists =  tSlice
  for i := 0; i < size; i ++ {
    _elem141 := &common.SubjectCate{}
    if err := _elem141.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem141), err)
    }
    p.Lists = append(p.Lists, _elem141)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SubjectCateListRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key142 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key142 = v
}
var _val143 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val143 = v
}
    p.Extra[_key142] = _val143
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SubjectCateListRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_cate_list_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SubjectCateListRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SubjectCateListRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SubjectCateListRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lists", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lists: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lists)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lists {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lists: ", p), err) }
  return err
}

func (p *SubjectCateListRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *SubjectCateListRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SubjectCateListRes(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Desc
//  - CreateAt
type AttentionItem struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Desc string `thrift:"desc,3" db:"desc" json:"desc"`
  CreateAt int64 `thrift:"create_at,4" db:"create_at" json:"create_at"`
}

func NewAttentionItem() *AttentionItem {
  return &AttentionItem{}
}


func (p *AttentionItem) GetID() int64 {
  return p.ID
}

func (p *AttentionItem) GetName() string {
  return p.Name
}

func (p *AttentionItem) GetDesc() string {
  return p.Desc
}

func (p *AttentionItem) GetCreateAt() int64 {
  return p.CreateAt
}
func (p *AttentionItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AttentionItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *AttentionItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *AttentionItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Desc = v
}
  return nil
}

func (p *AttentionItem)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreateAt = v
}
  return nil
}

func (p *AttentionItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("attention_item"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AttentionItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *AttentionItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *AttentionItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("desc", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:desc: ", p), err) }
  if err := oprot.WriteString(string(p.Desc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.desc (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:desc: ", p), err) }
  return err
}

func (p *AttentionItem) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("create_at", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:create_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_at (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:create_at: ", p), err) }
  return err
}

func (p *AttentionItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AttentionItem(%+v)", *p)
}

// Attributes:
//  - Item
//  - Extra
type AddAttentionReq struct {
  Item *AttentionItem `thrift:"item,1" db:"item" json:"item"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewAddAttentionReq() *AddAttentionReq {
  return &AddAttentionReq{}
}

var AddAttentionReq_Item_DEFAULT *AttentionItem
func (p *AddAttentionReq) GetItem() *AttentionItem {
  if !p.IsSetItem() {
    return AddAttentionReq_Item_DEFAULT
  }
return p.Item
}

func (p *AddAttentionReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *AddAttentionReq) IsSetItem() bool {
  return p.Item != nil
}

func (p *AddAttentionReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddAttentionReq)  ReadField1(iprot thrift.TProtocol) error {
  p.Item = &AttentionItem{}
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *AddAttentionReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key144 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key144 = v
}
var _val145 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val145 = v
}
    p.Extra[_key144] = _val145
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddAttentionReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_attention_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddAttentionReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item: ", p), err) }
  return err
}

func (p *AddAttentionReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  return err
}

func (p *AddAttentionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddAttentionReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type AddAttentionRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewAddAttentionRes() *AddAttentionRes {
  return &AddAttentionRes{}
}


func (p *AddAttentionRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *AddAttentionRes) GetResmsg() string {
  return p.Resmsg
}

func (p *AddAttentionRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *AddAttentionRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddAttentionRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *AddAttentionRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *AddAttentionRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key146 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key146 = v
}
var _val147 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val147 = v
}
    p.Extra[_key146] = _val147
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddAttentionRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_attention_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddAttentionRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *AddAttentionRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *AddAttentionRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *AddAttentionRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddAttentionRes(%+v)", *p)
}

// Attributes:
//  - Aid
//  - Extra
type DelAttentionReq struct {
  Aid int64 `thrift:"aid,1" db:"aid" json:"aid"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewDelAttentionReq() *DelAttentionReq {
  return &DelAttentionReq{}
}


func (p *DelAttentionReq) GetAid() int64 {
  return p.Aid
}

func (p *DelAttentionReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *DelAttentionReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DelAttentionReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Aid = v
}
  return nil
}

func (p *DelAttentionReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key148 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key148 = v
}
var _val149 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val149 = v
}
    p.Extra[_key148] = _val149
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DelAttentionReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_attention_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DelAttentionReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("aid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Aid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aid: ", p), err) }
  return err
}

func (p *DelAttentionReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  return err
}

func (p *DelAttentionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DelAttentionReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type DelAttentionRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewDelAttentionRes() *DelAttentionRes {
  return &DelAttentionRes{}
}


func (p *DelAttentionRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *DelAttentionRes) GetResmsg() string {
  return p.Resmsg
}

func (p *DelAttentionRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *DelAttentionRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DelAttentionRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *DelAttentionRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *DelAttentionRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key150 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key150 = v
}
var _val151 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val151 = v
}
    p.Extra[_key150] = _val151
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DelAttentionRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_attention_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DelAttentionRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *DelAttentionRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *DelAttentionRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *DelAttentionRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DelAttentionRes(%+v)", *p)
}

// Attributes:
//  - Aid
//  - Page
//  - Size
//  - Extra
type GetAttentionReq struct {
  Aid int64 `thrift:"aid,1" db:"aid" json:"aid"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewGetAttentionReq() *GetAttentionReq {
  return &GetAttentionReq{}
}


func (p *GetAttentionReq) GetAid() int64 {
  return p.Aid
}

func (p *GetAttentionReq) GetPage() int32 {
  return p.Page
}

func (p *GetAttentionReq) GetSize() int32 {
  return p.Size
}

func (p *GetAttentionReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *GetAttentionReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAttentionReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Aid = v
}
  return nil
}

func (p *GetAttentionReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *GetAttentionReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *GetAttentionReq)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key152 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key152 = v
}
var _val153 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val153 = v
}
    p.Extra[_key152] = _val153
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetAttentionReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_attention_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAttentionReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("aid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Aid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aid: ", p), err) }
  return err
}

func (p *GetAttentionReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *GetAttentionReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *GetAttentionReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *GetAttentionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAttentionReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Lists
//  - Extra
type GetAttentionRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Lists []*AttentionItem `thrift:"lists,3" db:"lists" json:"lists"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewGetAttentionRes() *GetAttentionRes {
  return &GetAttentionRes{}
}


func (p *GetAttentionRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *GetAttentionRes) GetResmsg() string {
  return p.Resmsg
}

func (p *GetAttentionRes) GetLists() []*AttentionItem {
  return p.Lists
}

func (p *GetAttentionRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *GetAttentionRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAttentionRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *GetAttentionRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *GetAttentionRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AttentionItem, 0, size)
  p.Lists =  tSlice
  for i := 0; i < size; i ++ {
    _elem154 := &AttentionItem{}
    if err := _elem154.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem154), err)
    }
    p.Lists = append(p.Lists, _elem154)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetAttentionRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key155 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key155 = v
}
var _val156 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val156 = v
}
    p.Extra[_key155] = _val156
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetAttentionRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_attention_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAttentionRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *GetAttentionRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *GetAttentionRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lists", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lists: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lists)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lists {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lists: ", p), err) }
  return err
}

func (p *GetAttentionRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *GetAttentionRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAttentionRes(%+v)", *p)
}

// Attributes:
//  - Aid
//  - UID
//  - Extra
type AddUserAttentionReq struct {
  Aid int64 `thrift:"aid,1" db:"aid" json:"aid"`
  UID int64 `thrift:"uid,2" db:"uid" json:"uid"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewAddUserAttentionReq() *AddUserAttentionReq {
  return &AddUserAttentionReq{}
}


func (p *AddUserAttentionReq) GetAid() int64 {
  return p.Aid
}

func (p *AddUserAttentionReq) GetUID() int64 {
  return p.UID
}

func (p *AddUserAttentionReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *AddUserAttentionReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddUserAttentionReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Aid = v
}
  return nil
}

func (p *AddUserAttentionReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *AddUserAttentionReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key157 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key157 = v
}
var _val158 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val158 = v
}
    p.Extra[_key157] = _val158
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddUserAttentionReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_user_attention_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddUserAttentionReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("aid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Aid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aid: ", p), err) }
  return err
}

func (p *AddUserAttentionReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *AddUserAttentionReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *AddUserAttentionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddUserAttentionReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type AddUserAttentionRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewAddUserAttentionRes() *AddUserAttentionRes {
  return &AddUserAttentionRes{}
}


func (p *AddUserAttentionRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *AddUserAttentionRes) GetResmsg() string {
  return p.Resmsg
}

func (p *AddUserAttentionRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *AddUserAttentionRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddUserAttentionRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *AddUserAttentionRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *AddUserAttentionRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key159 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key159 = v
}
var _val160 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val160 = v
}
    p.Extra[_key159] = _val160
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddUserAttentionRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_user_attention_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddUserAttentionRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *AddUserAttentionRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *AddUserAttentionRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *AddUserAttentionRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddUserAttentionRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Extra
type GetUserAttentionReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewGetUserAttentionReq() *GetUserAttentionReq {
  return &GetUserAttentionReq{}
}


func (p *GetUserAttentionReq) GetUID() int64 {
  return p.UID
}

func (p *GetUserAttentionReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *GetUserAttentionReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserAttentionReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *GetUserAttentionReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key161 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key161 = v
}
var _val162 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val162 = v
}
    p.Extra[_key161] = _val162
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetUserAttentionReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_user_attention_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserAttentionReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *GetUserAttentionReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  return err
}

func (p *GetUserAttentionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserAttentionReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Lists
//  - Extra
type GetUserAttentionRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Lists []*AttentionItem `thrift:"lists,3" db:"lists" json:"lists"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewGetUserAttentionRes() *GetUserAttentionRes {
  return &GetUserAttentionRes{}
}


func (p *GetUserAttentionRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *GetUserAttentionRes) GetResmsg() string {
  return p.Resmsg
}

func (p *GetUserAttentionRes) GetLists() []*AttentionItem {
  return p.Lists
}

func (p *GetUserAttentionRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *GetUserAttentionRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserAttentionRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *GetUserAttentionRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *GetUserAttentionRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AttentionItem, 0, size)
  p.Lists =  tSlice
  for i := 0; i < size; i ++ {
    _elem163 := &AttentionItem{}
    if err := _elem163.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem163), err)
    }
    p.Lists = append(p.Lists, _elem163)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetUserAttentionRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key164 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key164 = v
}
var _val165 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val165 = v
}
    p.Extra[_key164] = _val165
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetUserAttentionRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_user_attention_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserAttentionRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *GetUserAttentionRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *GetUserAttentionRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lists", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lists: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lists)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lists {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lists: ", p), err) }
  return err
}

func (p *GetUserAttentionRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *GetUserAttentionRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserAttentionRes(%+v)", *p)
}

// Attributes:
//  - Aid
//  - UID
//  - Extra
type DelUserAttentionReq struct {
  Aid int64 `thrift:"aid,1" db:"aid" json:"aid"`
  UID int64 `thrift:"uid,2" db:"uid" json:"uid"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewDelUserAttentionReq() *DelUserAttentionReq {
  return &DelUserAttentionReq{}
}


func (p *DelUserAttentionReq) GetAid() int64 {
  return p.Aid
}

func (p *DelUserAttentionReq) GetUID() int64 {
  return p.UID
}

func (p *DelUserAttentionReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *DelUserAttentionReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DelUserAttentionReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Aid = v
}
  return nil
}

func (p *DelUserAttentionReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DelUserAttentionReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key166 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key166 = v
}
var _val167 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val167 = v
}
    p.Extra[_key166] = _val167
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DelUserAttentionReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_user_attention_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DelUserAttentionReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("aid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Aid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aid: ", p), err) }
  return err
}

func (p *DelUserAttentionReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *DelUserAttentionReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *DelUserAttentionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DelUserAttentionReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type DelUserAttentionRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewDelUserAttentionRes() *DelUserAttentionRes {
  return &DelUserAttentionRes{}
}


func (p *DelUserAttentionRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *DelUserAttentionRes) GetResmsg() string {
  return p.Resmsg
}

func (p *DelUserAttentionRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *DelUserAttentionRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DelUserAttentionRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *DelUserAttentionRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *DelUserAttentionRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key168 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key168 = v
}
var _val169 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val169 = v
}
    p.Extra[_key168] = _val169
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DelUserAttentionRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_user_attention_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DelUserAttentionRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *DelUserAttentionRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *DelUserAttentionRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *DelUserAttentionRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DelUserAttentionRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Info
//  - Extra
type SetUserInfoReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Info *common.UserInfo `thrift:"info,2" db:"info" json:"info"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewSetUserInfoReq() *SetUserInfoReq {
  return &SetUserInfoReq{}
}


func (p *SetUserInfoReq) GetUID() int64 {
  return p.UID
}
var SetUserInfoReq_Info_DEFAULT *common.UserInfo
func (p *SetUserInfoReq) GetInfo() *common.UserInfo {
  if !p.IsSetInfo() {
    return SetUserInfoReq_Info_DEFAULT
  }
return p.Info
}

func (p *SetUserInfoReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *SetUserInfoReq) IsSetInfo() bool {
  return p.Info != nil
}

func (p *SetUserInfoReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetUserInfoReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *SetUserInfoReq)  ReadField2(iprot thrift.TProtocol) error {
  p.Info = &common.UserInfo{}
  if err := p.Info.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *SetUserInfoReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key170 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key170 = v
}
var _val171 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val171 = v
}
    p.Extra[_key170] = _val171
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SetUserInfoReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_user_info_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetUserInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *SetUserInfoReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
  if err := p.Info.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  return err
}

func (p *SetUserInfoReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *SetUserInfoReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetUserInfoReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type SetUserInfoRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewSetUserInfoRes() *SetUserInfoRes {
  return &SetUserInfoRes{}
}


func (p *SetUserInfoRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SetUserInfoRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SetUserInfoRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *SetUserInfoRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetUserInfoRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SetUserInfoRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SetUserInfoRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key172 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key172 = v
}
var _val173 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val173 = v
}
    p.Extra[_key172] = _val173
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SetUserInfoRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_user_info_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetUserInfoRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SetUserInfoRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SetUserInfoRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *SetUserInfoRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetUserInfoRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Extra
type GetUserInfoReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewGetUserInfoReq() *GetUserInfoReq {
  return &GetUserInfoReq{}
}


func (p *GetUserInfoReq) GetUID() int64 {
  return p.UID
}

func (p *GetUserInfoReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *GetUserInfoReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserInfoReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *GetUserInfoReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key174 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key174 = v
}
var _val175 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val175 = v
}
    p.Extra[_key174] = _val175
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetUserInfoReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_user_info_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *GetUserInfoReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  return err
}

func (p *GetUserInfoReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserInfoReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Info
//  - Extra
type GetUserInfoRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Info *common.UserInfo `thrift:"info,3" db:"info" json:"info"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewGetUserInfoRes() *GetUserInfoRes {
  return &GetUserInfoRes{}
}


func (p *GetUserInfoRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *GetUserInfoRes) GetResmsg() string {
  return p.Resmsg
}
var GetUserInfoRes_Info_DEFAULT *common.UserInfo
func (p *GetUserInfoRes) GetInfo() *common.UserInfo {
  if !p.IsSetInfo() {
    return GetUserInfoRes_Info_DEFAULT
  }
return p.Info
}

func (p *GetUserInfoRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *GetUserInfoRes) IsSetInfo() bool {
  return p.Info != nil
}

func (p *GetUserInfoRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserInfoRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *GetUserInfoRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *GetUserInfoRes)  ReadField3(iprot thrift.TProtocol) error {
  p.Info = &common.UserInfo{}
  if err := p.Info.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *GetUserInfoRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key176 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key176 = v
}
var _val177 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val177 = v
}
    p.Extra[_key176] = _val177
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetUserInfoRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_user_info_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserInfoRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *GetUserInfoRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *GetUserInfoRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:info: ", p), err) }
  if err := p.Info.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:info: ", p), err) }
  return err
}

func (p *GetUserInfoRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *GetUserInfoRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserInfoRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Info
//  - Extra
type SetWechatUinfoReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Info *common.WechatUserinfo `thrift:"info,2" db:"info" json:"info"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewSetWechatUinfoReq() *SetWechatUinfoReq {
  return &SetWechatUinfoReq{}
}


func (p *SetWechatUinfoReq) GetUID() int64 {
  return p.UID
}
var SetWechatUinfoReq_Info_DEFAULT *common.WechatUserinfo
func (p *SetWechatUinfoReq) GetInfo() *common.WechatUserinfo {
  if !p.IsSetInfo() {
    return SetWechatUinfoReq_Info_DEFAULT
  }
return p.Info
}

func (p *SetWechatUinfoReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *SetWechatUinfoReq) IsSetInfo() bool {
  return p.Info != nil
}

func (p *SetWechatUinfoReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetWechatUinfoReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *SetWechatUinfoReq)  ReadField2(iprot thrift.TProtocol) error {
  p.Info = &common.WechatUserinfo{}
  if err := p.Info.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *SetWechatUinfoReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key178 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key178 = v
}
var _val179 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val179 = v
}
    p.Extra[_key178] = _val179
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SetWechatUinfoReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_wechat_uinfo_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetWechatUinfoReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *SetWechatUinfoReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
  if err := p.Info.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  return err
}

func (p *SetWechatUinfoReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *SetWechatUinfoReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetWechatUinfoReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type SetWechatUinfoRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewSetWechatUinfoRes() *SetWechatUinfoRes {
  return &SetWechatUinfoRes{}
}


func (p *SetWechatUinfoRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SetWechatUinfoRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SetWechatUinfoRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *SetWechatUinfoRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetWechatUinfoRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SetWechatUinfoRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SetWechatUinfoRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key180 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key180 = v
}
var _val181 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val181 = v
}
    p.Extra[_key180] = _val181
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SetWechatUinfoRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_wechat_uinfo_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetWechatUinfoRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SetWechatUinfoRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SetWechatUinfoRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *SetWechatUinfoRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetWechatUinfoRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Extra
type GetWechatUinfoReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewGetWechatUinfoReq() *GetWechatUinfoReq {
  return &GetWechatUinfoReq{}
}


func (p *GetWechatUinfoReq) GetUID() int64 {
  return p.UID
}

func (p *GetWechatUinfoReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *GetWechatUinfoReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetWechatUinfoReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *GetWechatUinfoReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key182 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key182 = v
}
var _val183 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val183 = v
}
    p.Extra[_key182] = _val183
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetWechatUinfoReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_wechat_uinfo_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetWechatUinfoReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *GetWechatUinfoReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  return err
}

func (p *GetWechatUinfoReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetWechatUinfoReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Info
//  - Extra
type GetWechatUinfoRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Info *common.WechatUserinfo `thrift:"info,3" db:"info" json:"info"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewGetWechatUinfoRes() *GetWechatUinfoRes {
  return &GetWechatUinfoRes{}
}


func (p *GetWechatUinfoRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *GetWechatUinfoRes) GetResmsg() string {
  return p.Resmsg
}
var GetWechatUinfoRes_Info_DEFAULT *common.WechatUserinfo
func (p *GetWechatUinfoRes) GetInfo() *common.WechatUserinfo {
  if !p.IsSetInfo() {
    return GetWechatUinfoRes_Info_DEFAULT
  }
return p.Info
}

func (p *GetWechatUinfoRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *GetWechatUinfoRes) IsSetInfo() bool {
  return p.Info != nil
}

func (p *GetWechatUinfoRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetWechatUinfoRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *GetWechatUinfoRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *GetWechatUinfoRes)  ReadField3(iprot thrift.TProtocol) error {
  p.Info = &common.WechatUserinfo{}
  if err := p.Info.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *GetWechatUinfoRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key184 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key184 = v
}
var _val185 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val185 = v
}
    p.Extra[_key184] = _val185
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetWechatUinfoRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_wechat_uinfo_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetWechatUinfoRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *GetWechatUinfoRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *GetWechatUinfoRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:info: ", p), err) }
  if err := p.Info.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:info: ", p), err) }
  return err
}

func (p *GetWechatUinfoRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *GetWechatUinfoRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetWechatUinfoRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Info
//  - Extra
type SetAlipayUinfoReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Info *common.AlipayUserinfo `thrift:"info,2" db:"info" json:"info"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewSetAlipayUinfoReq() *SetAlipayUinfoReq {
  return &SetAlipayUinfoReq{}
}


func (p *SetAlipayUinfoReq) GetUID() int64 {
  return p.UID
}
var SetAlipayUinfoReq_Info_DEFAULT *common.AlipayUserinfo
func (p *SetAlipayUinfoReq) GetInfo() *common.AlipayUserinfo {
  if !p.IsSetInfo() {
    return SetAlipayUinfoReq_Info_DEFAULT
  }
return p.Info
}

func (p *SetAlipayUinfoReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *SetAlipayUinfoReq) IsSetInfo() bool {
  return p.Info != nil
}

func (p *SetAlipayUinfoReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetAlipayUinfoReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *SetAlipayUinfoReq)  ReadField2(iprot thrift.TProtocol) error {
  p.Info = &common.AlipayUserinfo{}
  if err := p.Info.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *SetAlipayUinfoReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key186 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key186 = v
}
var _val187 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val187 = v
}
    p.Extra[_key186] = _val187
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SetAlipayUinfoReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_alipay_uinfo_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetAlipayUinfoReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *SetAlipayUinfoReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
  if err := p.Info.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  return err
}

func (p *SetAlipayUinfoReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *SetAlipayUinfoReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetAlipayUinfoReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type SetAlipayUinfoRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewSetAlipayUinfoRes() *SetAlipayUinfoRes {
  return &SetAlipayUinfoRes{}
}


func (p *SetAlipayUinfoRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SetAlipayUinfoRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SetAlipayUinfoRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *SetAlipayUinfoRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetAlipayUinfoRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SetAlipayUinfoRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SetAlipayUinfoRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key188 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key188 = v
}
var _val189 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val189 = v
}
    p.Extra[_key188] = _val189
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SetAlipayUinfoRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_alipay_uinfo_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetAlipayUinfoRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SetAlipayUinfoRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SetAlipayUinfoRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *SetAlipayUinfoRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetAlipayUinfoRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Extra
type GetAlipayUinfoReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Extra map[string]string `thrift:"extra,2" db:"extra" json:"extra"`
}

func NewGetAlipayUinfoReq() *GetAlipayUinfoReq {
  return &GetAlipayUinfoReq{}
}


func (p *GetAlipayUinfoReq) GetUID() int64 {
  return p.UID
}

func (p *GetAlipayUinfoReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *GetAlipayUinfoReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAlipayUinfoReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *GetAlipayUinfoReq)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key190 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key190 = v
}
var _val191 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val191 = v
}
    p.Extra[_key190] = _val191
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetAlipayUinfoReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_alipay_uinfo_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAlipayUinfoReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *GetAlipayUinfoReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extra: ", p), err) }
  return err
}

func (p *GetAlipayUinfoReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAlipayUinfoReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Info
//  - Extra
type GetAlipayUinfoRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Info *common.AlipayUserinfo `thrift:"info,3" db:"info" json:"info"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewGetAlipayUinfoRes() *GetAlipayUinfoRes {
  return &GetAlipayUinfoRes{}
}


func (p *GetAlipayUinfoRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *GetAlipayUinfoRes) GetResmsg() string {
  return p.Resmsg
}
var GetAlipayUinfoRes_Info_DEFAULT *common.AlipayUserinfo
func (p *GetAlipayUinfoRes) GetInfo() *common.AlipayUserinfo {
  if !p.IsSetInfo() {
    return GetAlipayUinfoRes_Info_DEFAULT
  }
return p.Info
}

func (p *GetAlipayUinfoRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *GetAlipayUinfoRes) IsSetInfo() bool {
  return p.Info != nil
}

func (p *GetAlipayUinfoRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAlipayUinfoRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *GetAlipayUinfoRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *GetAlipayUinfoRes)  ReadField3(iprot thrift.TProtocol) error {
  p.Info = &common.AlipayUserinfo{}
  if err := p.Info.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *GetAlipayUinfoRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key192 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key192 = v
}
var _val193 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val193 = v
}
    p.Extra[_key192] = _val193
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetAlipayUinfoRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_alipay_uinfo_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAlipayUinfoRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *GetAlipayUinfoRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *GetAlipayUinfoRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:info: ", p), err) }
  if err := p.Info.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:info: ", p), err) }
  return err
}

func (p *GetAlipayUinfoRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *GetAlipayUinfoRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAlipayUinfoRes(%+v)", *p)
}

// Attributes:
//  - Bid
//  - Entitys
//  - Extra
type SetBaiduEntityReq struct {
  Bid string `thrift:"bid,1" db:"bid" json:"bid"`
  Entitys []*common.BaiduEntity `thrift:"entitys,2" db:"entitys" json:"entitys"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewSetBaiduEntityReq() *SetBaiduEntityReq {
  return &SetBaiduEntityReq{}
}


func (p *SetBaiduEntityReq) GetBid() string {
  return p.Bid
}

func (p *SetBaiduEntityReq) GetEntitys() []*common.BaiduEntity {
  return p.Entitys
}

func (p *SetBaiduEntityReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *SetBaiduEntityReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetBaiduEntityReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Bid = v
}
  return nil
}

func (p *SetBaiduEntityReq)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.BaiduEntity, 0, size)
  p.Entitys =  tSlice
  for i := 0; i < size; i ++ {
    _elem194 := &common.BaiduEntity{}
    if err := _elem194.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem194), err)
    }
    p.Entitys = append(p.Entitys, _elem194)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SetBaiduEntityReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key195 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key195 = v
}
var _val196 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val196 = v
}
    p.Extra[_key195] = _val196
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SetBaiduEntityReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_baidu_entity_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetBaiduEntityReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bid: ", p), err) }
  if err := oprot.WriteString(string(p.Bid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bid: ", p), err) }
  return err
}

func (p *SetBaiduEntityReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("entitys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entitys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Entitys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Entitys {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entitys: ", p), err) }
  return err
}

func (p *SetBaiduEntityReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *SetBaiduEntityReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetBaiduEntityReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Extra
type SetBaiduEntityRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewSetBaiduEntityRes() *SetBaiduEntityRes {
  return &SetBaiduEntityRes{}
}


func (p *SetBaiduEntityRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SetBaiduEntityRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SetBaiduEntityRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *SetBaiduEntityRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetBaiduEntityRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SetBaiduEntityRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SetBaiduEntityRes)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key197 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key197 = v
}
var _val198 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val198 = v
}
    p.Extra[_key197] = _val198
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SetBaiduEntityRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_baidu_entity_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetBaiduEntityRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SetBaiduEntityRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SetBaiduEntityRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *SetBaiduEntityRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetBaiduEntityRes(%+v)", *p)
}

// Attributes:
//  - Bid
//  - Page
//  - Size
//  - Extra
type BaiduEntityReq struct {
  Bid string `thrift:"bid,1" db:"bid" json:"bid"`
  Page int64 `thrift:"page,2" db:"page" json:"page"`
  Size int64 `thrift:"size,3" db:"size" json:"size"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewBaiduEntityReq() *BaiduEntityReq {
  return &BaiduEntityReq{}
}


func (p *BaiduEntityReq) GetBid() string {
  return p.Bid
}

func (p *BaiduEntityReq) GetPage() int64 {
  return p.Page
}

func (p *BaiduEntityReq) GetSize() int64 {
  return p.Size
}

func (p *BaiduEntityReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *BaiduEntityReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaiduEntityReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Bid = v
}
  return nil
}

func (p *BaiduEntityReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *BaiduEntityReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *BaiduEntityReq)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key199 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key199 = v
}
var _val200 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val200 = v
}
    p.Extra[_key199] = _val200
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *BaiduEntityReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("baidu_entity_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaiduEntityReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bid: ", p), err) }
  if err := oprot.WriteString(string(p.Bid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bid: ", p), err) }
  return err
}

func (p *BaiduEntityReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI64(int64(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *BaiduEntityReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI64(int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *BaiduEntityReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *BaiduEntityReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaiduEntityReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Page
//  - Size
//  - Entitys
//  - Extra
type BaiduEntityRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Page int64 `thrift:"page,3" db:"page" json:"page"`
  Size int64 `thrift:"size,4" db:"size" json:"size"`
  Entitys []*common.BaiduEntity `thrift:"entitys,5" db:"entitys" json:"entitys"`
  Extra map[string]string `thrift:"extra,6" db:"extra" json:"extra"`
}

func NewBaiduEntityRes() *BaiduEntityRes {
  return &BaiduEntityRes{}
}


func (p *BaiduEntityRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *BaiduEntityRes) GetResmsg() string {
  return p.Resmsg
}

func (p *BaiduEntityRes) GetPage() int64 {
  return p.Page
}

func (p *BaiduEntityRes) GetSize() int64 {
  return p.Size
}

func (p *BaiduEntityRes) GetEntitys() []*common.BaiduEntity {
  return p.Entitys
}

func (p *BaiduEntityRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *BaiduEntityRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaiduEntityRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *BaiduEntityRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *BaiduEntityRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *BaiduEntityRes)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *BaiduEntityRes)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.BaiduEntity, 0, size)
  p.Entitys =  tSlice
  for i := 0; i < size; i ++ {
    _elem201 := &common.BaiduEntity{}
    if err := _elem201.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem201), err)
    }
    p.Entitys = append(p.Entitys, _elem201)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BaiduEntityRes)  ReadField6(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key202 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key202 = v
}
var _val203 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val203 = v
}
    p.Extra[_key202] = _val203
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *BaiduEntityRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("baidu_entity_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaiduEntityRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *BaiduEntityRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *BaiduEntityRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:page: ", p), err) }
  if err := oprot.WriteI64(int64(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:page: ", p), err) }
  return err
}

func (p *BaiduEntityRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:size: ", p), err) }
  if err := oprot.WriteI64(int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:size: ", p), err) }
  return err
}

func (p *BaiduEntityRes) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("entitys", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:entitys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Entitys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Entitys {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:entitys: ", p), err) }
  return err
}

func (p *BaiduEntityRes) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extra: ", p), err) }
  return err
}

func (p *BaiduEntityRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaiduEntityRes(%+v)", *p)
}

// Attributes:
//  - Keyword
//  - Page
//  - Size
//  - Extra
type SearchItemReq struct {
  Keyword string `thrift:"keyword,1" db:"keyword" json:"keyword"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewSearchItemReq() *SearchItemReq {
  return &SearchItemReq{}
}


func (p *SearchItemReq) GetKeyword() string {
  return p.Keyword
}

func (p *SearchItemReq) GetPage() int32 {
  return p.Page
}

func (p *SearchItemReq) GetSize() int32 {
  return p.Size
}

func (p *SearchItemReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *SearchItemReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchItemReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Keyword = v
}
  return nil
}

func (p *SearchItemReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *SearchItemReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *SearchItemReq)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key204 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key204 = v
}
var _val205 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val205 = v
}
    p.Extra[_key204] = _val205
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SearchItemReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_item_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchItemReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyword", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyword: ", p), err) }
  if err := oprot.WriteString(string(p.Keyword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyword (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyword: ", p), err) }
  return err
}

func (p *SearchItemReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *SearchItemReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *SearchItemReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *SearchItemReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchItemReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Lists
//  - Extra
type SearchItemRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Lists []string `thrift:"lists,3" db:"lists" json:"lists"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewSearchItemRes() *SearchItemRes {
  return &SearchItemRes{}
}


func (p *SearchItemRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SearchItemRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SearchItemRes) GetLists() []string {
  return p.Lists
}

func (p *SearchItemRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *SearchItemRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchItemRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SearchItemRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SearchItemRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Lists =  tSlice
  for i := 0; i < size; i ++ {
var _elem206 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem206 = v
}
    p.Lists = append(p.Lists, _elem206)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchItemRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key207 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key207 = v
}
var _val208 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val208 = v
}
    p.Extra[_key207] = _val208
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SearchItemRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_item_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchItemRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SearchItemRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SearchItemRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lists", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lists: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Lists)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lists {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lists: ", p), err) }
  return err
}

func (p *SearchItemRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *SearchItemRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchItemRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Page
//  - Size
//  - Extra
type SearchHistoryReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewSearchHistoryReq() *SearchHistoryReq {
  return &SearchHistoryReq{}
}


func (p *SearchHistoryReq) GetUID() int64 {
  return p.UID
}

func (p *SearchHistoryReq) GetPage() int32 {
  return p.Page
}

func (p *SearchHistoryReq) GetSize() int32 {
  return p.Size
}

func (p *SearchHistoryReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *SearchHistoryReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchHistoryReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *SearchHistoryReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *SearchHistoryReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *SearchHistoryReq)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key209 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key209 = v
}
var _val210 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val210 = v
}
    p.Extra[_key209] = _val210
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SearchHistoryReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_history_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchHistoryReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *SearchHistoryReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *SearchHistoryReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *SearchHistoryReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *SearchHistoryReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchHistoryReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Lists
//  - Extra
type SearchHistoryRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Lists []*common.SearchHistoryItem `thrift:"lists,3" db:"lists" json:"lists"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewSearchHistoryRes() *SearchHistoryRes {
  return &SearchHistoryRes{}
}


func (p *SearchHistoryRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *SearchHistoryRes) GetResmsg() string {
  return p.Resmsg
}

func (p *SearchHistoryRes) GetLists() []*common.SearchHistoryItem {
  return p.Lists
}

func (p *SearchHistoryRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *SearchHistoryRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchHistoryRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *SearchHistoryRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *SearchHistoryRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.SearchHistoryItem, 0, size)
  p.Lists =  tSlice
  for i := 0; i < size; i ++ {
    _elem211 := &common.SearchHistoryItem{}
    if err := _elem211.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem211), err)
    }
    p.Lists = append(p.Lists, _elem211)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchHistoryRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key212 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key212 = v
}
var _val213 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val213 = v
}
    p.Extra[_key212] = _val213
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SearchHistoryRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_history_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchHistoryRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *SearchHistoryRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *SearchHistoryRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lists", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lists: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lists)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lists {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lists: ", p), err) }
  return err
}

func (p *SearchHistoryRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *SearchHistoryRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchHistoryRes(%+v)", *p)
}

// Attributes:
//  - Auth
//  - ID
//  - Reward
//  - Extra
type RefreshModifyRewardReq struct {
  Auth string `thrift:"auth,1" db:"auth" json:"auth"`
  ID int64 `thrift:"id,2" db:"id" json:"id"`
  Reward float64 `thrift:"reward,3" db:"reward" json:"reward"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshModifyRewardReq() *RefreshModifyRewardReq {
  return &RefreshModifyRewardReq{}
}


func (p *RefreshModifyRewardReq) GetAuth() string {
  return p.Auth
}

func (p *RefreshModifyRewardReq) GetID() int64 {
  return p.ID
}

func (p *RefreshModifyRewardReq) GetReward() float64 {
  return p.Reward
}

func (p *RefreshModifyRewardReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *RefreshModifyRewardReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RefreshModifyRewardReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Auth = v
}
  return nil
}

func (p *RefreshModifyRewardReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *RefreshModifyRewardReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reward = v
}
  return nil
}

func (p *RefreshModifyRewardReq)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key214 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key214 = v
}
var _val215 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val215 = v
}
    p.Extra[_key214] = _val215
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RefreshModifyRewardReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("refresh_modify_reward_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RefreshModifyRewardReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("auth", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth: ", p), err) }
  if err := oprot.WriteString(string(p.Auth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.auth (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth: ", p), err) }
  return err
}

func (p *RefreshModifyRewardReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *RefreshModifyRewardReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reward", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reward: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Reward)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reward (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reward: ", p), err) }
  return err
}

func (p *RefreshModifyRewardReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *RefreshModifyRewardReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RefreshModifyRewardReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Code
//  - Extra
type RefreshModifyRewardRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Code string `thrift:"code,3" db:"code" json:"code"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshModifyRewardRes() *RefreshModifyRewardRes {
  return &RefreshModifyRewardRes{}
}


func (p *RefreshModifyRewardRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *RefreshModifyRewardRes) GetResmsg() string {
  return p.Resmsg
}

func (p *RefreshModifyRewardRes) GetCode() string {
  return p.Code
}

func (p *RefreshModifyRewardRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *RefreshModifyRewardRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RefreshModifyRewardRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *RefreshModifyRewardRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *RefreshModifyRewardRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *RefreshModifyRewardRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key216 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key216 = v
}
var _val217 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val217 = v
}
    p.Extra[_key216] = _val217
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RefreshModifyRewardRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("refresh_modify_reward_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RefreshModifyRewardRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *RefreshModifyRewardRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *RefreshModifyRewardRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err) }
  return err
}

func (p *RefreshModifyRewardRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *RefreshModifyRewardRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RefreshModifyRewardRes(%+v)", *p)
}

// Attributes:
//  - Auth
//  - Userid
//  - Coin
//  - Extra
type RefreshUserCoinReq struct {
  Auth string `thrift:"auth,1" db:"auth" json:"auth"`
  Userid int64 `thrift:"userid,2" db:"userid" json:"userid"`
  Coin float64 `thrift:"coin,3" db:"coin" json:"coin"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshUserCoinReq() *RefreshUserCoinReq {
  return &RefreshUserCoinReq{}
}


func (p *RefreshUserCoinReq) GetAuth() string {
  return p.Auth
}

func (p *RefreshUserCoinReq) GetUserid() int64 {
  return p.Userid
}

func (p *RefreshUserCoinReq) GetCoin() float64 {
  return p.Coin
}

func (p *RefreshUserCoinReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *RefreshUserCoinReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RefreshUserCoinReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Auth = v
}
  return nil
}

func (p *RefreshUserCoinReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Userid = v
}
  return nil
}

func (p *RefreshUserCoinReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Coin = v
}
  return nil
}

func (p *RefreshUserCoinReq)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key218 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key218 = v
}
var _val219 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val219 = v
}
    p.Extra[_key218] = _val219
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RefreshUserCoinReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("refresh_user_coin_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RefreshUserCoinReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("auth", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth: ", p), err) }
  if err := oprot.WriteString(string(p.Auth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.auth (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth: ", p), err) }
  return err
}

func (p *RefreshUserCoinReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Userid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userid: ", p), err) }
  return err
}

func (p *RefreshUserCoinReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coin", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:coin: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Coin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.coin (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:coin: ", p), err) }
  return err
}

func (p *RefreshUserCoinReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *RefreshUserCoinReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RefreshUserCoinReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Code
//  - Extra
type RefreshUserCoinRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Code string `thrift:"code,3" db:"code" json:"code"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshUserCoinRes() *RefreshUserCoinRes {
  return &RefreshUserCoinRes{}
}


func (p *RefreshUserCoinRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *RefreshUserCoinRes) GetResmsg() string {
  return p.Resmsg
}

func (p *RefreshUserCoinRes) GetCode() string {
  return p.Code
}

func (p *RefreshUserCoinRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *RefreshUserCoinRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RefreshUserCoinRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *RefreshUserCoinRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *RefreshUserCoinRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *RefreshUserCoinRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key220 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key220 = v
}
var _val221 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val221 = v
}
    p.Extra[_key220] = _val221
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RefreshUserCoinRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("refresh_user_coin_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RefreshUserCoinRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *RefreshUserCoinRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *RefreshUserCoinRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err) }
  return err
}

func (p *RefreshUserCoinRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *RefreshUserCoinRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RefreshUserCoinRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Timu
type AddQuestionReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  // unused field # 2
  Timu *common.AddTimuItem `thrift:"timu,3" db:"timu" json:"timu"`
}

func NewAddQuestionReq() *AddQuestionReq {
  return &AddQuestionReq{}
}


func (p *AddQuestionReq) GetUID() int64 {
  return p.UID
}
var AddQuestionReq_Timu_DEFAULT *common.AddTimuItem
func (p *AddQuestionReq) GetTimu() *common.AddTimuItem {
  if !p.IsSetTimu() {
    return AddQuestionReq_Timu_DEFAULT
  }
return p.Timu
}
func (p *AddQuestionReq) IsSetTimu() bool {
  return p.Timu != nil
}

func (p *AddQuestionReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddQuestionReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *AddQuestionReq)  ReadField3(iprot thrift.TProtocol) error {
  p.Timu = &common.AddTimuItem{}
  if err := p.Timu.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Timu), err)
  }
  return nil
}

func (p *AddQuestionReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_question_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddQuestionReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *AddQuestionReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timu", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timu: ", p), err) }
  if err := p.Timu.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Timu), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timu: ", p), err) }
  return err
}

func (p *AddQuestionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddQuestionReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Code
//  - Extra
type AddQuestionRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Code string `thrift:"code,3" db:"code" json:"code"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewAddQuestionRes() *AddQuestionRes {
  return &AddQuestionRes{}
}


func (p *AddQuestionRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *AddQuestionRes) GetResmsg() string {
  return p.Resmsg
}

func (p *AddQuestionRes) GetCode() string {
  return p.Code
}

func (p *AddQuestionRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *AddQuestionRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddQuestionRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *AddQuestionRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *AddQuestionRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *AddQuestionRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key222 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key222 = v
}
var _val223 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val223 = v
}
    p.Extra[_key222] = _val223
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddQuestionRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_question_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddQuestionRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *AddQuestionRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *AddQuestionRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err) }
  return err
}

func (p *AddQuestionRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *AddQuestionRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddQuestionRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Page
//  - Size
//  - Sorted
//  - Status
type AddListReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
  Sorted string `thrift:"sorted,4" db:"sorted" json:"sorted"`
  Status string `thrift:"status,5" db:"status" json:"status"`
}

func NewAddListReq() *AddListReq {
  return &AddListReq{}
}


func (p *AddListReq) GetUID() int64 {
  return p.UID
}

func (p *AddListReq) GetPage() int32 {
  return p.Page
}

func (p *AddListReq) GetSize() int32 {
  return p.Size
}

func (p *AddListReq) GetSorted() string {
  return p.Sorted
}

func (p *AddListReq) GetStatus() string {
  return p.Status
}
func (p *AddListReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddListReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *AddListReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *AddListReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *AddListReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Sorted = v
}
  return nil
}

func (p *AddListReq)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *AddListReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_list_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddListReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *AddListReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *AddListReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *AddListReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sorted", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sorted: ", p), err) }
  if err := oprot.WriteString(string(p.Sorted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sorted (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sorted: ", p), err) }
  return err
}

func (p *AddListReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  return err
}

func (p *AddListReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddListReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Timus
//  - Extra
type AddListRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Timus []*common.AddTimuItem `thrift:"timus,3" db:"timus" json:"timus"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewAddListRes() *AddListRes {
  return &AddListRes{}
}


func (p *AddListRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *AddListRes) GetResmsg() string {
  return p.Resmsg
}

func (p *AddListRes) GetTimus() []*common.AddTimuItem {
  return p.Timus
}

func (p *AddListRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *AddListRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddListRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *AddListRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *AddListRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*common.AddTimuItem, 0, size)
  p.Timus =  tSlice
  for i := 0; i < size; i ++ {
    _elem224 := &common.AddTimuItem{}
    if err := _elem224.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem224), err)
    }
    p.Timus = append(p.Timus, _elem224)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddListRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key225 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key225 = v
}
var _val226 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val226 = v
}
    p.Extra[_key225] = _val226
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddListRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_list_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddListRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *AddListRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *AddListRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timus", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timus: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Timus)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Timus {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timus: ", p), err) }
  return err
}

func (p *AddListRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *AddListRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddListRes(%+v)", *p)
}

// Attributes:
//  - UID
//  - Status
//  - Extra
type AddCountReq struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Status string `thrift:"status,2" db:"status" json:"status"`
  Extra map[string]string `thrift:"extra,3" db:"extra" json:"extra"`
}

func NewAddCountReq() *AddCountReq {
  return &AddCountReq{}
}


func (p *AddCountReq) GetUID() int64 {
  return p.UID
}

func (p *AddCountReq) GetStatus() string {
  return p.Status
}

func (p *AddCountReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *AddCountReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddCountReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *AddCountReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *AddCountReq)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key227 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key227 = v
}
var _val228 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val228 = v
}
    p.Extra[_key227] = _val228
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddCountReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_count_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddCountReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *AddCountReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *AddCountReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extra: ", p), err) }
  return err
}

func (p *AddCountReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddCountReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Count
//  - Extra
type AddCountRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewAddCountRes() *AddCountRes {
  return &AddCountRes{}
}


func (p *AddCountRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *AddCountRes) GetResmsg() string {
  return p.Resmsg
}

func (p *AddCountRes) GetCount() int32 {
  return p.Count
}

func (p *AddCountRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *AddCountRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddCountRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *AddCountRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *AddCountRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *AddCountRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key229 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key229 = v
}
var _val230 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val230 = v
}
    p.Extra[_key229] = _val230
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddCountRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_count_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddCountRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *AddCountRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *AddCountRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *AddCountRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *AddCountRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddCountRes(%+v)", *p)
}

// Attributes:
//  - Auth
//  - ID
//  - Reward
//  - Extra
type RefreshAddRewardReq struct {
  Auth string `thrift:"auth,1" db:"auth" json:"auth"`
  ID int64 `thrift:"id,2" db:"id" json:"id"`
  Reward float64 `thrift:"reward,3" db:"reward" json:"reward"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshAddRewardReq() *RefreshAddRewardReq {
  return &RefreshAddRewardReq{}
}


func (p *RefreshAddRewardReq) GetAuth() string {
  return p.Auth
}

func (p *RefreshAddRewardReq) GetID() int64 {
  return p.ID
}

func (p *RefreshAddRewardReq) GetReward() float64 {
  return p.Reward
}

func (p *RefreshAddRewardReq) GetExtra() map[string]string {
  return p.Extra
}
func (p *RefreshAddRewardReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RefreshAddRewardReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Auth = v
}
  return nil
}

func (p *RefreshAddRewardReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *RefreshAddRewardReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reward = v
}
  return nil
}

func (p *RefreshAddRewardReq)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key231 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key231 = v
}
var _val232 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val232 = v
}
    p.Extra[_key231] = _val232
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RefreshAddRewardReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("refresh_add_reward_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RefreshAddRewardReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("auth", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:auth: ", p), err) }
  if err := oprot.WriteString(string(p.Auth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.auth (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:auth: ", p), err) }
  return err
}

func (p *RefreshAddRewardReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *RefreshAddRewardReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reward", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reward: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Reward)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reward (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reward: ", p), err) }
  return err
}

func (p *RefreshAddRewardReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *RefreshAddRewardReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RefreshAddRewardReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - Code
//  - Extra
type RefreshAddRewardRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  Code string `thrift:"code,3" db:"code" json:"code"`
  Extra map[string]string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewRefreshAddRewardRes() *RefreshAddRewardRes {
  return &RefreshAddRewardRes{}
}


func (p *RefreshAddRewardRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *RefreshAddRewardRes) GetResmsg() string {
  return p.Resmsg
}

func (p *RefreshAddRewardRes) GetCode() string {
  return p.Code
}

func (p *RefreshAddRewardRes) GetExtra() map[string]string {
  return p.Extra
}
func (p *RefreshAddRewardRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RefreshAddRewardRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *RefreshAddRewardRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *RefreshAddRewardRes)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *RefreshAddRewardRes)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key233 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key233 = v
}
var _val234 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val234 = v
}
    p.Extra[_key233] = _val234
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RefreshAddRewardRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("refresh_add_reward_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RefreshAddRewardRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *RefreshAddRewardRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *RefreshAddRewardRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err) }
  return err
}

func (p *RefreshAddRewardRes) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extra {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *RefreshAddRewardRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RefreshAddRewardRes(%+v)", *p)
}

type DatanodeService interface {
  // Parameters:
  //  - Req
  CreateUser(ctx context.Context, req *NewUserReq_) (r *UserRes, err error)
  // Parameters:
  //  - Req
  UserInfo(ctx context.Context, req *UserInfoReq) (r *UserRes, err error)
  // Parameters:
  //  - Req
  SearchUser(ctx context.Context, req *SearchUserReq) (r []*User, err error)
  // Parameters:
  //  - Req
  UpdateUser(ctx context.Context, req *UpdateReq) (r *UserRes, err error)
  // Parameters:
  //  - Req
  AddAttention(ctx context.Context, req *AddAttentionReq) (r *AddAttentionRes, err error)
  // Parameters:
  //  - Req
  DelAttention(ctx context.Context, req *DelAttentionReq) (r *DelAttentionRes, err error)
  // Parameters:
  //  - Req
  GetAttention(ctx context.Context, req *GetAttentionReq) (r *GetAttentionRes, err error)
  // Parameters:
  //  - Req
  AddUserAttention(ctx context.Context, req *AddUserAttentionReq) (r *AddUserAttentionRes, err error)
  // Parameters:
  //  - Req
  DelUserAttention(ctx context.Context, req *DelUserAttentionReq) (r *DelUserAttentionRes, err error)
  // Parameters:
  //  - Req
  GetUserAttention(ctx context.Context, req *GetUserAttentionReq) (r *GetUserAttentionRes, err error)
  // Parameters:
  //  - UID
  //  - Req
  AddFriends(ctx context.Context, uid int64, req *AddFriendReq) (r *AddFriendRes, err error)
  // Parameters:
  //  - UID
  //  - Req
  AgreeFriends(ctx context.Context, uid int64, req *AgreeFriendReq) (r *AgreeFriendRes, err error)
  // Parameters:
  //  - UID
  //  - Uid2
  FriendsList(ctx context.Context, uid int64, uid2 int64) (r *FriendRes, err error)
  // Parameters:
  //  - UID
  //  - Req
  CreateGroup(ctx context.Context, uid int64, req *CreateGroupReq) (r *CreateGroupRes, err error)
  // Parameters:
  //  - UID
  //  - Req
  RenameGroup(ctx context.Context, uid int64, req *RenameGroupReq) (r *RenameGroupRes, err error)
  // Parameters:
  //  - UID
  //  - Req
  AddNoteFriend(ctx context.Context, uid int64, req *AddFriendNoteReq) (r *AddFriendNoteRes, err error)
  // Parameters:
  //  - UID
  //  - Req
  MoveToNewGroup(ctx context.Context, uid int64, req *MoveGroupReq) (r *MoveGroupRes, err error)
  // Parameters:
  //  - UID
  //  - Req
  RemoveFriend(ctx context.Context, uid int64, req *RemoveFriendReq) (r *RemoveFriendRes, err error)
  // Parameters:
  //  - Mid
  LikesCount(ctx context.Context, mid string) (r *LikesCountRes, err error)
  // Parameters:
  //  - Mid
  //  - UID
  LikesAdd(ctx context.Context, mid string, uid int64) (r *LikesAddRes, err error)
  // Parameters:
  //  - Mid
  //  - Page
  //  - Size
  LikesList(ctx context.Context, mid string, page int32, size int32) (r *LikesListRes, err error)
  // Parameters:
  //  - UID
  //  - Req
  UpdateNote(ctx context.Context, uid int64, req *UpdateNoteReq) (r *NoteMetaRes, err error)
  // Parameters:
  //  - UID
  //  - Page
  //  - Size
  NoteMetaList(ctx context.Context, uid int64, page int32, size int32) (r *NoteMetaListRes, err error)
  // Parameters:
  //  - UID
  NoteListCount(ctx context.Context, uid int64) (r *NoteListCountRes, err error)
  // Parameters:
  //  - UID
  //  - Nid
  NoteData(ctx context.Context, uid int64, nid int64) (r *NoteDataRes, err error)
  // Parameters:
  //  - UID
  //  - Nid
  NoteHtml(ctx context.Context, uid int64, nid int64) (r *NoteHTMLRes, err error)
  // Parameters:
  //  - UID
  MomentsCount(ctx context.Context, uid int64) (r *MomentsCountRes, err error)
  // Parameters:
  //  - UID
  //  - Moments
  MomentsAdd(ctx context.Context, uid int64, moments *Moments) (r *AddMomentsRes, err error)
  // Parameters:
  //  - UID
  //  - Page
  //  - Size
  MomentsList(ctx context.Context, uid int64, page int32, size int32) (r *MomentsListRes, err error)
  // Parameters:
  //  - UID
  //  - Path
  FileDirOne(ctx context.Context, uid int64, path string) (r *FileDirRes, err error)
  // Parameters:
  //  - UID
  //  - Req
  FileDirAdd(ctx context.Context, uid int64, req *AddDirReq) (r *AddDirRes, err error)
  // Parameters:
  //  - UID
  //  - Req
  AddFile(ctx context.Context, uid int64, req *AddFileReq) (r *AddFileRes, err error)
  // Parameters:
  //  - UID
  YunSaveAttr(ctx context.Context, uid int64) (r *FileAttrRes, err error)
  // Parameters:
  //  - UID
  //  - Path
  Thumbnail(ctx context.Context, uid int64, path string) (r *ThumbnailRes, err error)
  // Parameters:
  //  - Req
  SetKeyValue(ctx context.Context, req *SetKeyvalueReq) (r *SetKeyvalueRes, err error)
  // Parameters:
  //  - Req
  GetKeyValue(ctx context.Context, req *GetKeyvalueReq) (r *GetKeyvalueRes, err error)
  // Parameters:
  //  - Req
  DelKeyValue(ctx context.Context, req *DelKeyvalueReq) (r *DelKeyvalueRes, err error)
  // Parameters:
  //  - Req
  QuestionVersion(ctx context.Context, req *common.QuestionQuery) (r *VersionRes, err error)
  // Parameters:
  //  - Req
  QuestionChapter(ctx context.Context, req *common.QuestionQuery) (r *ChapterRes, err error)
  // Parameters:
  //  - Req
  SubjectName(ctx context.Context, req string) (r *SubjectNameRes, err error)
  // Parameters:
  //  - Req
  QuestionSource(ctx context.Context, req *common.QuestionQuery) (r *SourceRes, err error)
  // Parameters:
  //  - Req
  QuestionTixing(ctx context.Context, req *common.QuestionQuery) (r *TixingRes, err error)
  // Parameters:
  //  - Req
  QuestionTimuCount(ctx context.Context, req *common.QuestionQuery) (r *TimuCountRes, err error)
  // Parameters:
  //  - UID
  //  - Req
  QuestionTimu(ctx context.Context, uid int64, req *common.QuestionQuery) (r *TimuRes, err error)
  // Parameters:
  //  - Req
  QuestionTimuByID(ctx context.Context, req *TimuByIDReq) (r *TimuByIDRes, err error)
  // Parameters:
  //  - UID
  //  - Req
  CollectTimu(ctx context.Context, uid int64, req *CollectReq) (r *CollectRes, err error)
  // Parameters:
  //  - Req
  QueryCollectTimu(ctx context.Context, req *CollectListReq) (r *CollectListRes, err error)
  // Parameters:
  //  - Req
  ModifyQuestion(ctx context.Context, req *ModifyReq) (r *ModifyRes, err error)
  // Parameters:
  //  - Req
  ModifyList(ctx context.Context, req *ModifyListReq) (r *ModifyListRes, err error)
  // Parameters:
  //  - Req
  ModifyCount(ctx context.Context, req *ModifyCountReq) (r *ModifyCountRes, err error)
  // Parameters:
  //  - Req
  QuestionTimuAdd(ctx context.Context, req *TimuAddReq) (r *TimuAddRes, err error)
  // Parameters:
  //  - Req
  AddList(ctx context.Context, req *AddListReq) (r *AddListRes, err error)
  // Parameters:
  //  - Req
  AddCount(ctx context.Context, req *AddCountReq) (r *AddCountRes, err error)
  // Parameters:
  //  - Req
  ApproveModify(ctx context.Context, req *ApproveModifyReq) (r *ApproveModifyRes, err error)
  // Parameters:
  //  - Req
  OnSearch(ctx context.Context, req *SearchReq) (r *SearchRes, err error)
  // Parameters:
  //  - Req
  GradeCateAdd(ctx context.Context, req *common.GradeCate) (r *AddGradeCateRes, err error)
  GradeCateCount(ctx context.Context) (r *GradeCateCountRes, err error)
  // Parameters:
  //  - Req
  GradeCateList(ctx context.Context, req *GradeCateListReq) (r *GradeCateListRes, err error)
  HomeBlackData(ctx context.Context) (r *HomeBlackDataRes, err error)
  // Parameters:
  //  - Req
  GradeSubject(ctx context.Context, req *GradeSubjectReq) (r *GradeSubjectRes, err error)
  // Parameters:
  //  - Req
  SchoolRollAdd(ctx context.Context, req *common.SchoolRoll) (r *SchoolRollAddRes, err error)
  SchoolRollCount(ctx context.Context) (r *SchoolRollCountRes, err error)
  // Parameters:
  //  - Req
  SchoolList(ctx context.Context, req *SchoolRollListReq) (r *SchoolRollListRes, err error)
  // Parameters:
  //  - Req
  SubjectCateAdd(ctx context.Context, req *common.SubjectCate) (r *SubjectCateAddRes, err error)
  SubjectCateCount(ctx context.Context) (r *SubjectCateCountRes, err error)
  // Parameters:
  //  - Req
  SubjectCateList(ctx context.Context, req *SubjectCateListReq) (r *SubjectCateListRes, err error)
  // Parameters:
  //  - Req
  SetUserInfo(ctx context.Context, req *SetUserInfoReq) (r *SetUserInfoRes, err error)
  // Parameters:
  //  - Req
  GetUserInfo(ctx context.Context, req *GetUserInfoReq) (r *GetUserInfoRes, err error)
  // Parameters:
  //  - Req
  SetWechatUinfo(ctx context.Context, req *SetWechatUinfoReq) (r *SetWechatUinfoRes, err error)
  // Parameters:
  //  - Req
  GetWechatUinfo(ctx context.Context, req *GetWechatUinfoReq) (r *GetWechatUinfoRes, err error)
  // Parameters:
  //  - Req
  SetAlipayUinfo(ctx context.Context, req *SetAlipayUinfoReq) (r *SetAlipayUinfoRes, err error)
  // Parameters:
  //  - Req
  GetAlipayUinfo(ctx context.Context, req *GetAlipayUinfoReq) (r *GetAlipayUinfoRes, err error)
  // Parameters:
  //  - Req
  SetBaiduEntity(ctx context.Context, req *SetBaiduEntityReq) (r *SetBaiduEntityRes, err error)
  // Parameters:
  //  - Req
  BaiduEntity(ctx context.Context, req *BaiduEntityReq) (r *BaiduEntityRes, err error)
  // Parameters:
  //  - Req
  SearchHistory(ctx context.Context, req *SearchHistoryReq) (r *SearchHistoryRes, err error)
  // Parameters:
  //  - Req
  SearchItem(ctx context.Context, req *SearchItemReq) (r *SearchItemRes, err error)
  // Parameters:
  //  - Req
  RefreshModifyReward(ctx context.Context, req *RefreshModifyRewardReq) (r *RefreshModifyRewardRes, err error)
  // Parameters:
  //  - Req
  RefreshAddReward(ctx context.Context, req *RefreshAddRewardReq) (r *RefreshAddRewardRes, err error)
  // Parameters:
  //  - Req
  RefreshUserCoin(ctx context.Context, req *RefreshUserCoinReq) (r *RefreshUserCoinRes, err error)
}

type DatanodeServiceClient struct {
  c thrift.TClient
}

func NewDatanodeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DatanodeServiceClient {
  return &DatanodeServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewDatanodeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DatanodeServiceClient {
  return &DatanodeServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewDatanodeServiceClient(c thrift.TClient) *DatanodeServiceClient {
  return &DatanodeServiceClient{
    c: c,
  }
}

func (p *DatanodeServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Req
func (p *DatanodeServiceClient) CreateUser(ctx context.Context, req *NewUserReq_) (r *UserRes, err error) {
  var _args235 DatanodeServiceCreateUserArgs
  _args235.Req = req
  var _result236 DatanodeServiceCreateUserResult
  if err = p.Client_().Call(ctx, "createUser", &_args235, &_result236); err != nil {
    return
  }
  return _result236.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) UserInfo(ctx context.Context, req *UserInfoReq) (r *UserRes, err error) {
  var _args237 DatanodeServiceUserInfoArgs
  _args237.Req = req
  var _result238 DatanodeServiceUserInfoResult
  if err = p.Client_().Call(ctx, "userInfo", &_args237, &_result238); err != nil {
    return
  }
  return _result238.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SearchUser(ctx context.Context, req *SearchUserReq) (r []*User, err error) {
  var _args239 DatanodeServiceSearchUserArgs
  _args239.Req = req
  var _result240 DatanodeServiceSearchUserResult
  if err = p.Client_().Call(ctx, "searchUser", &_args239, &_result240); err != nil {
    return
  }
  return _result240.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) UpdateUser(ctx context.Context, req *UpdateReq) (r *UserRes, err error) {
  var _args241 DatanodeServiceUpdateUserArgs
  _args241.Req = req
  var _result242 DatanodeServiceUpdateUserResult
  if err = p.Client_().Call(ctx, "updateUser", &_args241, &_result242); err != nil {
    return
  }
  return _result242.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) AddAttention(ctx context.Context, req *AddAttentionReq) (r *AddAttentionRes, err error) {
  var _args243 DatanodeServiceAddAttentionArgs
  _args243.Req = req
  var _result244 DatanodeServiceAddAttentionResult
  if err = p.Client_().Call(ctx, "add_attention", &_args243, &_result244); err != nil {
    return
  }
  return _result244.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) DelAttention(ctx context.Context, req *DelAttentionReq) (r *DelAttentionRes, err error) {
  var _args245 DatanodeServiceDelAttentionArgs
  _args245.Req = req
  var _result246 DatanodeServiceDelAttentionResult
  if err = p.Client_().Call(ctx, "del_attention", &_args245, &_result246); err != nil {
    return
  }
  return _result246.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) GetAttention(ctx context.Context, req *GetAttentionReq) (r *GetAttentionRes, err error) {
  var _args247 DatanodeServiceGetAttentionArgs
  _args247.Req = req
  var _result248 DatanodeServiceGetAttentionResult
  if err = p.Client_().Call(ctx, "get_attention", &_args247, &_result248); err != nil {
    return
  }
  return _result248.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) AddUserAttention(ctx context.Context, req *AddUserAttentionReq) (r *AddUserAttentionRes, err error) {
  var _args249 DatanodeServiceAddUserAttentionArgs
  _args249.Req = req
  var _result250 DatanodeServiceAddUserAttentionResult
  if err = p.Client_().Call(ctx, "add_user_attention", &_args249, &_result250); err != nil {
    return
  }
  return _result250.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) DelUserAttention(ctx context.Context, req *DelUserAttentionReq) (r *DelUserAttentionRes, err error) {
  var _args251 DatanodeServiceDelUserAttentionArgs
  _args251.Req = req
  var _result252 DatanodeServiceDelUserAttentionResult
  if err = p.Client_().Call(ctx, "del_user_attention", &_args251, &_result252); err != nil {
    return
  }
  return _result252.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) GetUserAttention(ctx context.Context, req *GetUserAttentionReq) (r *GetUserAttentionRes, err error) {
  var _args253 DatanodeServiceGetUserAttentionArgs
  _args253.Req = req
  var _result254 DatanodeServiceGetUserAttentionResult
  if err = p.Client_().Call(ctx, "get_user_attention", &_args253, &_result254); err != nil {
    return
  }
  return _result254.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) AddFriends(ctx context.Context, uid int64, req *AddFriendReq) (r *AddFriendRes, err error) {
  var _args255 DatanodeServiceAddFriendsArgs
  _args255.UID = uid
  _args255.Req = req
  var _result256 DatanodeServiceAddFriendsResult
  if err = p.Client_().Call(ctx, "addFriends", &_args255, &_result256); err != nil {
    return
  }
  return _result256.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) AgreeFriends(ctx context.Context, uid int64, req *AgreeFriendReq) (r *AgreeFriendRes, err error) {
  var _args257 DatanodeServiceAgreeFriendsArgs
  _args257.UID = uid
  _args257.Req = req
  var _result258 DatanodeServiceAgreeFriendsResult
  if err = p.Client_().Call(ctx, "agreeFriends", &_args257, &_result258); err != nil {
    return
  }
  return _result258.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Uid2
func (p *DatanodeServiceClient) FriendsList(ctx context.Context, uid int64, uid2 int64) (r *FriendRes, err error) {
  var _args259 DatanodeServiceFriendsListArgs
  _args259.UID = uid
  _args259.Uid2 = uid2
  var _result260 DatanodeServiceFriendsListResult
  if err = p.Client_().Call(ctx, "friendsList", &_args259, &_result260); err != nil {
    return
  }
  return _result260.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) CreateGroup(ctx context.Context, uid int64, req *CreateGroupReq) (r *CreateGroupRes, err error) {
  var _args261 DatanodeServiceCreateGroupArgs
  _args261.UID = uid
  _args261.Req = req
  var _result262 DatanodeServiceCreateGroupResult
  if err = p.Client_().Call(ctx, "createGroup", &_args261, &_result262); err != nil {
    return
  }
  return _result262.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) RenameGroup(ctx context.Context, uid int64, req *RenameGroupReq) (r *RenameGroupRes, err error) {
  var _args263 DatanodeServiceRenameGroupArgs
  _args263.UID = uid
  _args263.Req = req
  var _result264 DatanodeServiceRenameGroupResult
  if err = p.Client_().Call(ctx, "renameGroup", &_args263, &_result264); err != nil {
    return
  }
  return _result264.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) AddNoteFriend(ctx context.Context, uid int64, req *AddFriendNoteReq) (r *AddFriendNoteRes, err error) {
  var _args265 DatanodeServiceAddNoteFriendArgs
  _args265.UID = uid
  _args265.Req = req
  var _result266 DatanodeServiceAddNoteFriendResult
  if err = p.Client_().Call(ctx, "addNoteFriend", &_args265, &_result266); err != nil {
    return
  }
  return _result266.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) MoveToNewGroup(ctx context.Context, uid int64, req *MoveGroupReq) (r *MoveGroupRes, err error) {
  var _args267 DatanodeServiceMoveToNewGroupArgs
  _args267.UID = uid
  _args267.Req = req
  var _result268 DatanodeServiceMoveToNewGroupResult
  if err = p.Client_().Call(ctx, "moveToNewGroup", &_args267, &_result268); err != nil {
    return
  }
  return _result268.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) RemoveFriend(ctx context.Context, uid int64, req *RemoveFriendReq) (r *RemoveFriendRes, err error) {
  var _args269 DatanodeServiceRemoveFriendArgs
  _args269.UID = uid
  _args269.Req = req
  var _result270 DatanodeServiceRemoveFriendResult
  if err = p.Client_().Call(ctx, "removeFriend", &_args269, &_result270); err != nil {
    return
  }
  return _result270.GetSuccess(), nil
}

// Parameters:
//  - Mid
func (p *DatanodeServiceClient) LikesCount(ctx context.Context, mid string) (r *LikesCountRes, err error) {
  var _args271 DatanodeServiceLikesCountArgs
  _args271.Mid = mid
  var _result272 DatanodeServiceLikesCountResult
  if err = p.Client_().Call(ctx, "likesCount", &_args271, &_result272); err != nil {
    return
  }
  return _result272.GetSuccess(), nil
}

// Parameters:
//  - Mid
//  - UID
func (p *DatanodeServiceClient) LikesAdd(ctx context.Context, mid string, uid int64) (r *LikesAddRes, err error) {
  var _args273 DatanodeServiceLikesAddArgs
  _args273.Mid = mid
  _args273.UID = uid
  var _result274 DatanodeServiceLikesAddResult
  if err = p.Client_().Call(ctx, "likesAdd", &_args273, &_result274); err != nil {
    return
  }
  return _result274.GetSuccess(), nil
}

// Parameters:
//  - Mid
//  - Page
//  - Size
func (p *DatanodeServiceClient) LikesList(ctx context.Context, mid string, page int32, size int32) (r *LikesListRes, err error) {
  var _args275 DatanodeServiceLikesListArgs
  _args275.Mid = mid
  _args275.Page = page
  _args275.Size = size
  var _result276 DatanodeServiceLikesListResult
  if err = p.Client_().Call(ctx, "likesList", &_args275, &_result276); err != nil {
    return
  }
  return _result276.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) UpdateNote(ctx context.Context, uid int64, req *UpdateNoteReq) (r *NoteMetaRes, err error) {
  var _args277 DatanodeServiceUpdateNoteArgs
  _args277.UID = uid
  _args277.Req = req
  var _result278 DatanodeServiceUpdateNoteResult
  if err = p.Client_().Call(ctx, "updateNote", &_args277, &_result278); err != nil {
    return
  }
  return _result278.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Page
//  - Size
func (p *DatanodeServiceClient) NoteMetaList(ctx context.Context, uid int64, page int32, size int32) (r *NoteMetaListRes, err error) {
  var _args279 DatanodeServiceNoteMetaListArgs
  _args279.UID = uid
  _args279.Page = page
  _args279.Size = size
  var _result280 DatanodeServiceNoteMetaListResult
  if err = p.Client_().Call(ctx, "noteMetaList", &_args279, &_result280); err != nil {
    return
  }
  return _result280.GetSuccess(), nil
}

// Parameters:
//  - UID
func (p *DatanodeServiceClient) NoteListCount(ctx context.Context, uid int64) (r *NoteListCountRes, err error) {
  var _args281 DatanodeServiceNoteListCountArgs
  _args281.UID = uid
  var _result282 DatanodeServiceNoteListCountResult
  if err = p.Client_().Call(ctx, "noteListCount", &_args281, &_result282); err != nil {
    return
  }
  return _result282.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Nid
func (p *DatanodeServiceClient) NoteData(ctx context.Context, uid int64, nid int64) (r *NoteDataRes, err error) {
  var _args283 DatanodeServiceNoteDataArgs
  _args283.UID = uid
  _args283.Nid = nid
  var _result284 DatanodeServiceNoteDataResult
  if err = p.Client_().Call(ctx, "noteData", &_args283, &_result284); err != nil {
    return
  }
  return _result284.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Nid
func (p *DatanodeServiceClient) NoteHtml(ctx context.Context, uid int64, nid int64) (r *NoteHTMLRes, err error) {
  var _args285 DatanodeServiceNoteHtmlArgs
  _args285.UID = uid
  _args285.Nid = nid
  var _result286 DatanodeServiceNoteHtmlResult
  if err = p.Client_().Call(ctx, "noteHtml", &_args285, &_result286); err != nil {
    return
  }
  return _result286.GetSuccess(), nil
}

// Parameters:
//  - UID
func (p *DatanodeServiceClient) MomentsCount(ctx context.Context, uid int64) (r *MomentsCountRes, err error) {
  var _args287 DatanodeServiceMomentsCountArgs
  _args287.UID = uid
  var _result288 DatanodeServiceMomentsCountResult
  if err = p.Client_().Call(ctx, "momentsCount", &_args287, &_result288); err != nil {
    return
  }
  return _result288.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Moments
func (p *DatanodeServiceClient) MomentsAdd(ctx context.Context, uid int64, moments *Moments) (r *AddMomentsRes, err error) {
  var _args289 DatanodeServiceMomentsAddArgs
  _args289.UID = uid
  _args289.Moments = moments
  var _result290 DatanodeServiceMomentsAddResult
  if err = p.Client_().Call(ctx, "momentsAdd", &_args289, &_result290); err != nil {
    return
  }
  return _result290.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Page
//  - Size
func (p *DatanodeServiceClient) MomentsList(ctx context.Context, uid int64, page int32, size int32) (r *MomentsListRes, err error) {
  var _args291 DatanodeServiceMomentsListArgs
  _args291.UID = uid
  _args291.Page = page
  _args291.Size = size
  var _result292 DatanodeServiceMomentsListResult
  if err = p.Client_().Call(ctx, "momentsList", &_args291, &_result292); err != nil {
    return
  }
  return _result292.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Path
func (p *DatanodeServiceClient) FileDirOne(ctx context.Context, uid int64, path string) (r *FileDirRes, err error) {
  var _args293 DatanodeServiceFileDirOneArgs
  _args293.UID = uid
  _args293.Path = path
  var _result294 DatanodeServiceFileDirOneResult
  if err = p.Client_().Call(ctx, "fileDirOne", &_args293, &_result294); err != nil {
    return
  }
  return _result294.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) FileDirAdd(ctx context.Context, uid int64, req *AddDirReq) (r *AddDirRes, err error) {
  var _args295 DatanodeServiceFileDirAddArgs
  _args295.UID = uid
  _args295.Req = req
  var _result296 DatanodeServiceFileDirAddResult
  if err = p.Client_().Call(ctx, "fileDirAdd", &_args295, &_result296); err != nil {
    return
  }
  return _result296.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) AddFile(ctx context.Context, uid int64, req *AddFileReq) (r *AddFileRes, err error) {
  var _args297 DatanodeServiceAddFileArgs
  _args297.UID = uid
  _args297.Req = req
  var _result298 DatanodeServiceAddFileResult
  if err = p.Client_().Call(ctx, "addFile", &_args297, &_result298); err != nil {
    return
  }
  return _result298.GetSuccess(), nil
}

// Parameters:
//  - UID
func (p *DatanodeServiceClient) YunSaveAttr(ctx context.Context, uid int64) (r *FileAttrRes, err error) {
  var _args299 DatanodeServiceYunSaveAttrArgs
  _args299.UID = uid
  var _result300 DatanodeServiceYunSaveAttrResult
  if err = p.Client_().Call(ctx, "yunSaveAttr", &_args299, &_result300); err != nil {
    return
  }
  return _result300.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Path
func (p *DatanodeServiceClient) Thumbnail(ctx context.Context, uid int64, path string) (r *ThumbnailRes, err error) {
  var _args301 DatanodeServiceThumbnailArgs
  _args301.UID = uid
  _args301.Path = path
  var _result302 DatanodeServiceThumbnailResult
  if err = p.Client_().Call(ctx, "thumbnail", &_args301, &_result302); err != nil {
    return
  }
  return _result302.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SetKeyValue(ctx context.Context, req *SetKeyvalueReq) (r *SetKeyvalueRes, err error) {
  var _args303 DatanodeServiceSetKeyValueArgs
  _args303.Req = req
  var _result304 DatanodeServiceSetKeyValueResult
  if err = p.Client_().Call(ctx, "setKeyValue", &_args303, &_result304); err != nil {
    return
  }
  return _result304.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) GetKeyValue(ctx context.Context, req *GetKeyvalueReq) (r *GetKeyvalueRes, err error) {
  var _args305 DatanodeServiceGetKeyValueArgs
  _args305.Req = req
  var _result306 DatanodeServiceGetKeyValueResult
  if err = p.Client_().Call(ctx, "getKeyValue", &_args305, &_result306); err != nil {
    return
  }
  return _result306.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) DelKeyValue(ctx context.Context, req *DelKeyvalueReq) (r *DelKeyvalueRes, err error) {
  var _args307 DatanodeServiceDelKeyValueArgs
  _args307.Req = req
  var _result308 DatanodeServiceDelKeyValueResult
  if err = p.Client_().Call(ctx, "delKeyValue", &_args307, &_result308); err != nil {
    return
  }
  return _result308.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) QuestionVersion(ctx context.Context, req *common.QuestionQuery) (r *VersionRes, err error) {
  var _args309 DatanodeServiceQuestionVersionArgs
  _args309.Req = req
  var _result310 DatanodeServiceQuestionVersionResult
  if err = p.Client_().Call(ctx, "question_version", &_args309, &_result310); err != nil {
    return
  }
  return _result310.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) QuestionChapter(ctx context.Context, req *common.QuestionQuery) (r *ChapterRes, err error) {
  var _args311 DatanodeServiceQuestionChapterArgs
  _args311.Req = req
  var _result312 DatanodeServiceQuestionChapterResult
  if err = p.Client_().Call(ctx, "question_chapter", &_args311, &_result312); err != nil {
    return
  }
  return _result312.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SubjectName(ctx context.Context, req string) (r *SubjectNameRes, err error) {
  var _args313 DatanodeServiceSubjectNameArgs
  _args313.Req = req
  var _result314 DatanodeServiceSubjectNameResult
  if err = p.Client_().Call(ctx, "subject_name", &_args313, &_result314); err != nil {
    return
  }
  return _result314.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) QuestionSource(ctx context.Context, req *common.QuestionQuery) (r *SourceRes, err error) {
  var _args315 DatanodeServiceQuestionSourceArgs
  _args315.Req = req
  var _result316 DatanodeServiceQuestionSourceResult
  if err = p.Client_().Call(ctx, "question_source", &_args315, &_result316); err != nil {
    return
  }
  return _result316.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) QuestionTixing(ctx context.Context, req *common.QuestionQuery) (r *TixingRes, err error) {
  var _args317 DatanodeServiceQuestionTixingArgs
  _args317.Req = req
  var _result318 DatanodeServiceQuestionTixingResult
  if err = p.Client_().Call(ctx, "question_tixing", &_args317, &_result318); err != nil {
    return
  }
  return _result318.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) QuestionTimuCount(ctx context.Context, req *common.QuestionQuery) (r *TimuCountRes, err error) {
  var _args319 DatanodeServiceQuestionTimuCountArgs
  _args319.Req = req
  var _result320 DatanodeServiceQuestionTimuCountResult
  if err = p.Client_().Call(ctx, "question_timu_count", &_args319, &_result320); err != nil {
    return
  }
  return _result320.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) QuestionTimu(ctx context.Context, uid int64, req *common.QuestionQuery) (r *TimuRes, err error) {
  var _args321 DatanodeServiceQuestionTimuArgs
  _args321.UID = uid
  _args321.Req = req
  var _result322 DatanodeServiceQuestionTimuResult
  if err = p.Client_().Call(ctx, "question_timu", &_args321, &_result322); err != nil {
    return
  }
  return _result322.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) QuestionTimuByID(ctx context.Context, req *TimuByIDReq) (r *TimuByIDRes, err error) {
  var _args323 DatanodeServiceQuestionTimuByIDArgs
  _args323.Req = req
  var _result324 DatanodeServiceQuestionTimuByIDResult
  if err = p.Client_().Call(ctx, "question_timu_by_id", &_args323, &_result324); err != nil {
    return
  }
  return _result324.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Req
func (p *DatanodeServiceClient) CollectTimu(ctx context.Context, uid int64, req *CollectReq) (r *CollectRes, err error) {
  var _args325 DatanodeServiceCollectTimuArgs
  _args325.UID = uid
  _args325.Req = req
  var _result326 DatanodeServiceCollectTimuResult
  if err = p.Client_().Call(ctx, "collect_timu", &_args325, &_result326); err != nil {
    return
  }
  return _result326.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) QueryCollectTimu(ctx context.Context, req *CollectListReq) (r *CollectListRes, err error) {
  var _args327 DatanodeServiceQueryCollectTimuArgs
  _args327.Req = req
  var _result328 DatanodeServiceQueryCollectTimuResult
  if err = p.Client_().Call(ctx, "query_collect_timu", &_args327, &_result328); err != nil {
    return
  }
  return _result328.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) ModifyQuestion(ctx context.Context, req *ModifyReq) (r *ModifyRes, err error) {
  var _args329 DatanodeServiceModifyQuestionArgs
  _args329.Req = req
  var _result330 DatanodeServiceModifyQuestionResult
  if err = p.Client_().Call(ctx, "modify_question", &_args329, &_result330); err != nil {
    return
  }
  return _result330.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) ModifyList(ctx context.Context, req *ModifyListReq) (r *ModifyListRes, err error) {
  var _args331 DatanodeServiceModifyListArgs
  _args331.Req = req
  var _result332 DatanodeServiceModifyListResult
  if err = p.Client_().Call(ctx, "modify_list", &_args331, &_result332); err != nil {
    return
  }
  return _result332.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) ModifyCount(ctx context.Context, req *ModifyCountReq) (r *ModifyCountRes, err error) {
  var _args333 DatanodeServiceModifyCountArgs
  _args333.Req = req
  var _result334 DatanodeServiceModifyCountResult
  if err = p.Client_().Call(ctx, "modify_count", &_args333, &_result334); err != nil {
    return
  }
  return _result334.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) QuestionTimuAdd(ctx context.Context, req *TimuAddReq) (r *TimuAddRes, err error) {
  var _args335 DatanodeServiceQuestionTimuAddArgs
  _args335.Req = req
  var _result336 DatanodeServiceQuestionTimuAddResult
  if err = p.Client_().Call(ctx, "question_timu_add", &_args335, &_result336); err != nil {
    return
  }
  return _result336.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) AddList(ctx context.Context, req *AddListReq) (r *AddListRes, err error) {
  var _args337 DatanodeServiceAddListArgs
  _args337.Req = req
  var _result338 DatanodeServiceAddListResult
  if err = p.Client_().Call(ctx, "add_list", &_args337, &_result338); err != nil {
    return
  }
  return _result338.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) AddCount(ctx context.Context, req *AddCountReq) (r *AddCountRes, err error) {
  var _args339 DatanodeServiceAddCountArgs
  _args339.Req = req
  var _result340 DatanodeServiceAddCountResult
  if err = p.Client_().Call(ctx, "add_count", &_args339, &_result340); err != nil {
    return
  }
  return _result340.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) ApproveModify(ctx context.Context, req *ApproveModifyReq) (r *ApproveModifyRes, err error) {
  var _args341 DatanodeServiceApproveModifyArgs
  _args341.Req = req
  var _result342 DatanodeServiceApproveModifyResult
  if err = p.Client_().Call(ctx, "approve_modify", &_args341, &_result342); err != nil {
    return
  }
  return _result342.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) OnSearch(ctx context.Context, req *SearchReq) (r *SearchRes, err error) {
  var _args343 DatanodeServiceOnSearchArgs
  _args343.Req = req
  var _result344 DatanodeServiceOnSearchResult
  if err = p.Client_().Call(ctx, "on_search", &_args343, &_result344); err != nil {
    return
  }
  return _result344.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) GradeCateAdd(ctx context.Context, req *common.GradeCate) (r *AddGradeCateRes, err error) {
  var _args345 DatanodeServiceGradeCateAddArgs
  _args345.Req = req
  var _result346 DatanodeServiceGradeCateAddResult
  if err = p.Client_().Call(ctx, "grade_cate_add", &_args345, &_result346); err != nil {
    return
  }
  return _result346.GetSuccess(), nil
}

func (p *DatanodeServiceClient) GradeCateCount(ctx context.Context) (r *GradeCateCountRes, err error) {
  var _args347 DatanodeServiceGradeCateCountArgs
  var _result348 DatanodeServiceGradeCateCountResult
  if err = p.Client_().Call(ctx, "grade_cate_count", &_args347, &_result348); err != nil {
    return
  }
  return _result348.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) GradeCateList(ctx context.Context, req *GradeCateListReq) (r *GradeCateListRes, err error) {
  var _args349 DatanodeServiceGradeCateListArgs
  _args349.Req = req
  var _result350 DatanodeServiceGradeCateListResult
  if err = p.Client_().Call(ctx, "grade_cate_list", &_args349, &_result350); err != nil {
    return
  }
  return _result350.GetSuccess(), nil
}

func (p *DatanodeServiceClient) HomeBlackData(ctx context.Context) (r *HomeBlackDataRes, err error) {
  var _args351 DatanodeServiceHomeBlackDataArgs
  var _result352 DatanodeServiceHomeBlackDataResult
  if err = p.Client_().Call(ctx, "home_black_data", &_args351, &_result352); err != nil {
    return
  }
  return _result352.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) GradeSubject(ctx context.Context, req *GradeSubjectReq) (r *GradeSubjectRes, err error) {
  var _args353 DatanodeServiceGradeSubjectArgs
  _args353.Req = req
  var _result354 DatanodeServiceGradeSubjectResult
  if err = p.Client_().Call(ctx, "grade_subject", &_args353, &_result354); err != nil {
    return
  }
  return _result354.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SchoolRollAdd(ctx context.Context, req *common.SchoolRoll) (r *SchoolRollAddRes, err error) {
  var _args355 DatanodeServiceSchoolRollAddArgs
  _args355.Req = req
  var _result356 DatanodeServiceSchoolRollAddResult
  if err = p.Client_().Call(ctx, "school_roll_add", &_args355, &_result356); err != nil {
    return
  }
  return _result356.GetSuccess(), nil
}

func (p *DatanodeServiceClient) SchoolRollCount(ctx context.Context) (r *SchoolRollCountRes, err error) {
  var _args357 DatanodeServiceSchoolRollCountArgs
  var _result358 DatanodeServiceSchoolRollCountResult
  if err = p.Client_().Call(ctx, "school_roll_count", &_args357, &_result358); err != nil {
    return
  }
  return _result358.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SchoolList(ctx context.Context, req *SchoolRollListReq) (r *SchoolRollListRes, err error) {
  var _args359 DatanodeServiceSchoolListArgs
  _args359.Req = req
  var _result360 DatanodeServiceSchoolListResult
  if err = p.Client_().Call(ctx, "school_list", &_args359, &_result360); err != nil {
    return
  }
  return _result360.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SubjectCateAdd(ctx context.Context, req *common.SubjectCate) (r *SubjectCateAddRes, err error) {
  var _args361 DatanodeServiceSubjectCateAddArgs
  _args361.Req = req
  var _result362 DatanodeServiceSubjectCateAddResult
  if err = p.Client_().Call(ctx, "subject_cate_add", &_args361, &_result362); err != nil {
    return
  }
  return _result362.GetSuccess(), nil
}

func (p *DatanodeServiceClient) SubjectCateCount(ctx context.Context) (r *SubjectCateCountRes, err error) {
  var _args363 DatanodeServiceSubjectCateCountArgs
  var _result364 DatanodeServiceSubjectCateCountResult
  if err = p.Client_().Call(ctx, "subject_cate_count", &_args363, &_result364); err != nil {
    return
  }
  return _result364.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SubjectCateList(ctx context.Context, req *SubjectCateListReq) (r *SubjectCateListRes, err error) {
  var _args365 DatanodeServiceSubjectCateListArgs
  _args365.Req = req
  var _result366 DatanodeServiceSubjectCateListResult
  if err = p.Client_().Call(ctx, "subject_cate_list", &_args365, &_result366); err != nil {
    return
  }
  return _result366.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SetUserInfo(ctx context.Context, req *SetUserInfoReq) (r *SetUserInfoRes, err error) {
  var _args367 DatanodeServiceSetUserInfoArgs
  _args367.Req = req
  var _result368 DatanodeServiceSetUserInfoResult
  if err = p.Client_().Call(ctx, "set_user_info", &_args367, &_result368); err != nil {
    return
  }
  return _result368.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) GetUserInfo(ctx context.Context, req *GetUserInfoReq) (r *GetUserInfoRes, err error) {
  var _args369 DatanodeServiceGetUserInfoArgs
  _args369.Req = req
  var _result370 DatanodeServiceGetUserInfoResult
  if err = p.Client_().Call(ctx, "get_user_info", &_args369, &_result370); err != nil {
    return
  }
  return _result370.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SetWechatUinfo(ctx context.Context, req *SetWechatUinfoReq) (r *SetWechatUinfoRes, err error) {
  var _args371 DatanodeServiceSetWechatUinfoArgs
  _args371.Req = req
  var _result372 DatanodeServiceSetWechatUinfoResult
  if err = p.Client_().Call(ctx, "set_wechat_uinfo", &_args371, &_result372); err != nil {
    return
  }
  return _result372.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) GetWechatUinfo(ctx context.Context, req *GetWechatUinfoReq) (r *GetWechatUinfoRes, err error) {
  var _args373 DatanodeServiceGetWechatUinfoArgs
  _args373.Req = req
  var _result374 DatanodeServiceGetWechatUinfoResult
  if err = p.Client_().Call(ctx, "get_wechat_uinfo", &_args373, &_result374); err != nil {
    return
  }
  return _result374.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SetAlipayUinfo(ctx context.Context, req *SetAlipayUinfoReq) (r *SetAlipayUinfoRes, err error) {
  var _args375 DatanodeServiceSetAlipayUinfoArgs
  _args375.Req = req
  var _result376 DatanodeServiceSetAlipayUinfoResult
  if err = p.Client_().Call(ctx, "set_alipay_uinfo", &_args375, &_result376); err != nil {
    return
  }
  return _result376.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) GetAlipayUinfo(ctx context.Context, req *GetAlipayUinfoReq) (r *GetAlipayUinfoRes, err error) {
  var _args377 DatanodeServiceGetAlipayUinfoArgs
  _args377.Req = req
  var _result378 DatanodeServiceGetAlipayUinfoResult
  if err = p.Client_().Call(ctx, "get_alipay_uinfo", &_args377, &_result378); err != nil {
    return
  }
  return _result378.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SetBaiduEntity(ctx context.Context, req *SetBaiduEntityReq) (r *SetBaiduEntityRes, err error) {
  var _args379 DatanodeServiceSetBaiduEntityArgs
  _args379.Req = req
  var _result380 DatanodeServiceSetBaiduEntityResult
  if err = p.Client_().Call(ctx, "set_baidu_entity", &_args379, &_result380); err != nil {
    return
  }
  return _result380.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) BaiduEntity(ctx context.Context, req *BaiduEntityReq) (r *BaiduEntityRes, err error) {
  var _args381 DatanodeServiceBaiduEntityArgs
  _args381.Req = req
  var _result382 DatanodeServiceBaiduEntityResult
  if err = p.Client_().Call(ctx, "baidu_entity", &_args381, &_result382); err != nil {
    return
  }
  return _result382.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SearchHistory(ctx context.Context, req *SearchHistoryReq) (r *SearchHistoryRes, err error) {
  var _args383 DatanodeServiceSearchHistoryArgs
  _args383.Req = req
  var _result384 DatanodeServiceSearchHistoryResult
  if err = p.Client_().Call(ctx, "search_history", &_args383, &_result384); err != nil {
    return
  }
  return _result384.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) SearchItem(ctx context.Context, req *SearchItemReq) (r *SearchItemRes, err error) {
  var _args385 DatanodeServiceSearchItemArgs
  _args385.Req = req
  var _result386 DatanodeServiceSearchItemResult
  if err = p.Client_().Call(ctx, "search_item", &_args385, &_result386); err != nil {
    return
  }
  return _result386.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) RefreshModifyReward(ctx context.Context, req *RefreshModifyRewardReq) (r *RefreshModifyRewardRes, err error) {
  var _args387 DatanodeServiceRefreshModifyRewardArgs
  _args387.Req = req
  var _result388 DatanodeServiceRefreshModifyRewardResult
  if err = p.Client_().Call(ctx, "refresh_modify_reward", &_args387, &_result388); err != nil {
    return
  }
  return _result388.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) RefreshAddReward(ctx context.Context, req *RefreshAddRewardReq) (r *RefreshAddRewardRes, err error) {
  var _args389 DatanodeServiceRefreshAddRewardArgs
  _args389.Req = req
  var _result390 DatanodeServiceRefreshAddRewardResult
  if err = p.Client_().Call(ctx, "refresh_add_reward", &_args389, &_result390); err != nil {
    return
  }
  return _result390.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *DatanodeServiceClient) RefreshUserCoin(ctx context.Context, req *RefreshUserCoinReq) (r *RefreshUserCoinRes, err error) {
  var _args391 DatanodeServiceRefreshUserCoinArgs
  _args391.Req = req
  var _result392 DatanodeServiceRefreshUserCoinResult
  if err = p.Client_().Call(ctx, "refresh_user_coin", &_args391, &_result392); err != nil {
    return
  }
  return _result392.GetSuccess(), nil
}

type DatanodeServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler DatanodeService
}

func (p *DatanodeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *DatanodeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *DatanodeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewDatanodeServiceProcessor(handler DatanodeService) *DatanodeServiceProcessor {

  self393 := &DatanodeServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self393.processorMap["createUser"] = &datanodeServiceProcessorCreateUser{handler:handler}
  self393.processorMap["userInfo"] = &datanodeServiceProcessorUserInfo{handler:handler}
  self393.processorMap["searchUser"] = &datanodeServiceProcessorSearchUser{handler:handler}
  self393.processorMap["updateUser"] = &datanodeServiceProcessorUpdateUser{handler:handler}
  self393.processorMap["add_attention"] = &datanodeServiceProcessorAddAttention{handler:handler}
  self393.processorMap["del_attention"] = &datanodeServiceProcessorDelAttention{handler:handler}
  self393.processorMap["get_attention"] = &datanodeServiceProcessorGetAttention{handler:handler}
  self393.processorMap["add_user_attention"] = &datanodeServiceProcessorAddUserAttention{handler:handler}
  self393.processorMap["del_user_attention"] = &datanodeServiceProcessorDelUserAttention{handler:handler}
  self393.processorMap["get_user_attention"] = &datanodeServiceProcessorGetUserAttention{handler:handler}
  self393.processorMap["addFriends"] = &datanodeServiceProcessorAddFriends{handler:handler}
  self393.processorMap["agreeFriends"] = &datanodeServiceProcessorAgreeFriends{handler:handler}
  self393.processorMap["friendsList"] = &datanodeServiceProcessorFriendsList{handler:handler}
  self393.processorMap["createGroup"] = &datanodeServiceProcessorCreateGroup{handler:handler}
  self393.processorMap["renameGroup"] = &datanodeServiceProcessorRenameGroup{handler:handler}
  self393.processorMap["addNoteFriend"] = &datanodeServiceProcessorAddNoteFriend{handler:handler}
  self393.processorMap["moveToNewGroup"] = &datanodeServiceProcessorMoveToNewGroup{handler:handler}
  self393.processorMap["removeFriend"] = &datanodeServiceProcessorRemoveFriend{handler:handler}
  self393.processorMap["likesCount"] = &datanodeServiceProcessorLikesCount{handler:handler}
  self393.processorMap["likesAdd"] = &datanodeServiceProcessorLikesAdd{handler:handler}
  self393.processorMap["likesList"] = &datanodeServiceProcessorLikesList{handler:handler}
  self393.processorMap["updateNote"] = &datanodeServiceProcessorUpdateNote{handler:handler}
  self393.processorMap["noteMetaList"] = &datanodeServiceProcessorNoteMetaList{handler:handler}
  self393.processorMap["noteListCount"] = &datanodeServiceProcessorNoteListCount{handler:handler}
  self393.processorMap["noteData"] = &datanodeServiceProcessorNoteData{handler:handler}
  self393.processorMap["noteHtml"] = &datanodeServiceProcessorNoteHtml{handler:handler}
  self393.processorMap["momentsCount"] = &datanodeServiceProcessorMomentsCount{handler:handler}
  self393.processorMap["momentsAdd"] = &datanodeServiceProcessorMomentsAdd{handler:handler}
  self393.processorMap["momentsList"] = &datanodeServiceProcessorMomentsList{handler:handler}
  self393.processorMap["fileDirOne"] = &datanodeServiceProcessorFileDirOne{handler:handler}
  self393.processorMap["fileDirAdd"] = &datanodeServiceProcessorFileDirAdd{handler:handler}
  self393.processorMap["addFile"] = &datanodeServiceProcessorAddFile{handler:handler}
  self393.processorMap["yunSaveAttr"] = &datanodeServiceProcessorYunSaveAttr{handler:handler}
  self393.processorMap["thumbnail"] = &datanodeServiceProcessorThumbnail{handler:handler}
  self393.processorMap["setKeyValue"] = &datanodeServiceProcessorSetKeyValue{handler:handler}
  self393.processorMap["getKeyValue"] = &datanodeServiceProcessorGetKeyValue{handler:handler}
  self393.processorMap["delKeyValue"] = &datanodeServiceProcessorDelKeyValue{handler:handler}
  self393.processorMap["question_version"] = &datanodeServiceProcessorQuestionVersion{handler:handler}
  self393.processorMap["question_chapter"] = &datanodeServiceProcessorQuestionChapter{handler:handler}
  self393.processorMap["subject_name"] = &datanodeServiceProcessorSubjectName{handler:handler}
  self393.processorMap["question_source"] = &datanodeServiceProcessorQuestionSource{handler:handler}
  self393.processorMap["question_tixing"] = &datanodeServiceProcessorQuestionTixing{handler:handler}
  self393.processorMap["question_timu_count"] = &datanodeServiceProcessorQuestionTimuCount{handler:handler}
  self393.processorMap["question_timu"] = &datanodeServiceProcessorQuestionTimu{handler:handler}
  self393.processorMap["question_timu_by_id"] = &datanodeServiceProcessorQuestionTimuByID{handler:handler}
  self393.processorMap["collect_timu"] = &datanodeServiceProcessorCollectTimu{handler:handler}
  self393.processorMap["query_collect_timu"] = &datanodeServiceProcessorQueryCollectTimu{handler:handler}
  self393.processorMap["modify_question"] = &datanodeServiceProcessorModifyQuestion{handler:handler}
  self393.processorMap["modify_list"] = &datanodeServiceProcessorModifyList{handler:handler}
  self393.processorMap["modify_count"] = &datanodeServiceProcessorModifyCount{handler:handler}
  self393.processorMap["question_timu_add"] = &datanodeServiceProcessorQuestionTimuAdd{handler:handler}
  self393.processorMap["add_list"] = &datanodeServiceProcessorAddList{handler:handler}
  self393.processorMap["add_count"] = &datanodeServiceProcessorAddCount{handler:handler}
  self393.processorMap["approve_modify"] = &datanodeServiceProcessorApproveModify{handler:handler}
  self393.processorMap["on_search"] = &datanodeServiceProcessorOnSearch{handler:handler}
  self393.processorMap["grade_cate_add"] = &datanodeServiceProcessorGradeCateAdd{handler:handler}
  self393.processorMap["grade_cate_count"] = &datanodeServiceProcessorGradeCateCount{handler:handler}
  self393.processorMap["grade_cate_list"] = &datanodeServiceProcessorGradeCateList{handler:handler}
  self393.processorMap["home_black_data"] = &datanodeServiceProcessorHomeBlackData{handler:handler}
  self393.processorMap["grade_subject"] = &datanodeServiceProcessorGradeSubject{handler:handler}
  self393.processorMap["school_roll_add"] = &datanodeServiceProcessorSchoolRollAdd{handler:handler}
  self393.processorMap["school_roll_count"] = &datanodeServiceProcessorSchoolRollCount{handler:handler}
  self393.processorMap["school_list"] = &datanodeServiceProcessorSchoolList{handler:handler}
  self393.processorMap["subject_cate_add"] = &datanodeServiceProcessorSubjectCateAdd{handler:handler}
  self393.processorMap["subject_cate_count"] = &datanodeServiceProcessorSubjectCateCount{handler:handler}
  self393.processorMap["subject_cate_list"] = &datanodeServiceProcessorSubjectCateList{handler:handler}
  self393.processorMap["set_user_info"] = &datanodeServiceProcessorSetUserInfo{handler:handler}
  self393.processorMap["get_user_info"] = &datanodeServiceProcessorGetUserInfo{handler:handler}
  self393.processorMap["set_wechat_uinfo"] = &datanodeServiceProcessorSetWechatUinfo{handler:handler}
  self393.processorMap["get_wechat_uinfo"] = &datanodeServiceProcessorGetWechatUinfo{handler:handler}
  self393.processorMap["set_alipay_uinfo"] = &datanodeServiceProcessorSetAlipayUinfo{handler:handler}
  self393.processorMap["get_alipay_uinfo"] = &datanodeServiceProcessorGetAlipayUinfo{handler:handler}
  self393.processorMap["set_baidu_entity"] = &datanodeServiceProcessorSetBaiduEntity{handler:handler}
  self393.processorMap["baidu_entity"] = &datanodeServiceProcessorBaiduEntity{handler:handler}
  self393.processorMap["search_history"] = &datanodeServiceProcessorSearchHistory{handler:handler}
  self393.processorMap["search_item"] = &datanodeServiceProcessorSearchItem{handler:handler}
  self393.processorMap["refresh_modify_reward"] = &datanodeServiceProcessorRefreshModifyReward{handler:handler}
  self393.processorMap["refresh_add_reward"] = &datanodeServiceProcessorRefreshAddReward{handler:handler}
  self393.processorMap["refresh_user_coin"] = &datanodeServiceProcessorRefreshUserCoin{handler:handler}
return self393
}

func (p *DatanodeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x394 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x394.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x394

}

type datanodeServiceProcessorCreateUser struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorCreateUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceCreateUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceCreateUserResult{}
var retval *UserRes
  var err2 error
  if retval, err2 = p.handler.CreateUser(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createUser: " + err2.Error())
    oprot.WriteMessageBegin("createUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorUserInfo struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorUserInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceUserInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("userInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceUserInfoResult{}
var retval *UserRes
  var err2 error
  if retval, err2 = p.handler.UserInfo(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing userInfo: " + err2.Error())
    oprot.WriteMessageBegin("userInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("userInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSearchUser struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSearchUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSearchUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("searchUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSearchUserResult{}
var retval []*User
  var err2 error
  if retval, err2 = p.handler.SearchUser(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing searchUser: " + err2.Error())
    oprot.WriteMessageBegin("searchUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("searchUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorUpdateUser struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorUpdateUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceUpdateUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceUpdateUserResult{}
var retval *UserRes
  var err2 error
  if retval, err2 = p.handler.UpdateUser(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUser: " + err2.Error())
    oprot.WriteMessageBegin("updateUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorAddAttention struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorAddAttention) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceAddAttentionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_attention", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceAddAttentionResult{}
var retval *AddAttentionRes
  var err2 error
  if retval, err2 = p.handler.AddAttention(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_attention: " + err2.Error())
    oprot.WriteMessageBegin("add_attention", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("add_attention", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorDelAttention struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorDelAttention) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceDelAttentionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("del_attention", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceDelAttentionResult{}
var retval *DelAttentionRes
  var err2 error
  if retval, err2 = p.handler.DelAttention(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing del_attention: " + err2.Error())
    oprot.WriteMessageBegin("del_attention", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("del_attention", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorGetAttention struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorGetAttention) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceGetAttentionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_attention", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceGetAttentionResult{}
var retval *GetAttentionRes
  var err2 error
  if retval, err2 = p.handler.GetAttention(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_attention: " + err2.Error())
    oprot.WriteMessageBegin("get_attention", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_attention", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorAddUserAttention struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorAddUserAttention) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceAddUserAttentionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_user_attention", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceAddUserAttentionResult{}
var retval *AddUserAttentionRes
  var err2 error
  if retval, err2 = p.handler.AddUserAttention(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_user_attention: " + err2.Error())
    oprot.WriteMessageBegin("add_user_attention", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("add_user_attention", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorDelUserAttention struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorDelUserAttention) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceDelUserAttentionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("del_user_attention", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceDelUserAttentionResult{}
var retval *DelUserAttentionRes
  var err2 error
  if retval, err2 = p.handler.DelUserAttention(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing del_user_attention: " + err2.Error())
    oprot.WriteMessageBegin("del_user_attention", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("del_user_attention", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorGetUserAttention struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorGetUserAttention) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceGetUserAttentionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_user_attention", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceGetUserAttentionResult{}
var retval *GetUserAttentionRes
  var err2 error
  if retval, err2 = p.handler.GetUserAttention(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_user_attention: " + err2.Error())
    oprot.WriteMessageBegin("get_user_attention", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_user_attention", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorAddFriends struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorAddFriends) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceAddFriendsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addFriends", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceAddFriendsResult{}
var retval *AddFriendRes
  var err2 error
  if retval, err2 = p.handler.AddFriends(ctx, args.UID, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addFriends: " + err2.Error())
    oprot.WriteMessageBegin("addFriends", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addFriends", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorAgreeFriends struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorAgreeFriends) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceAgreeFriendsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("agreeFriends", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceAgreeFriendsResult{}
var retval *AgreeFriendRes
  var err2 error
  if retval, err2 = p.handler.AgreeFriends(ctx, args.UID, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing agreeFriends: " + err2.Error())
    oprot.WriteMessageBegin("agreeFriends", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("agreeFriends", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorFriendsList struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorFriendsList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceFriendsListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("friendsList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceFriendsListResult{}
var retval *FriendRes
  var err2 error
  if retval, err2 = p.handler.FriendsList(ctx, args.UID, args.Uid2); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing friendsList: " + err2.Error())
    oprot.WriteMessageBegin("friendsList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("friendsList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorCreateGroup struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorCreateGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceCreateGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceCreateGroupResult{}
var retval *CreateGroupRes
  var err2 error
  if retval, err2 = p.handler.CreateGroup(ctx, args.UID, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createGroup: " + err2.Error())
    oprot.WriteMessageBegin("createGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorRenameGroup struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorRenameGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceRenameGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("renameGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceRenameGroupResult{}
var retval *RenameGroupRes
  var err2 error
  if retval, err2 = p.handler.RenameGroup(ctx, args.UID, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renameGroup: " + err2.Error())
    oprot.WriteMessageBegin("renameGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("renameGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorAddNoteFriend struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorAddNoteFriend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceAddNoteFriendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addNoteFriend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceAddNoteFriendResult{}
var retval *AddFriendNoteRes
  var err2 error
  if retval, err2 = p.handler.AddNoteFriend(ctx, args.UID, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addNoteFriend: " + err2.Error())
    oprot.WriteMessageBegin("addNoteFriend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addNoteFriend", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorMoveToNewGroup struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorMoveToNewGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceMoveToNewGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("moveToNewGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceMoveToNewGroupResult{}
var retval *MoveGroupRes
  var err2 error
  if retval, err2 = p.handler.MoveToNewGroup(ctx, args.UID, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing moveToNewGroup: " + err2.Error())
    oprot.WriteMessageBegin("moveToNewGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("moveToNewGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorRemoveFriend struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorRemoveFriend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceRemoveFriendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeFriend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceRemoveFriendResult{}
var retval *RemoveFriendRes
  var err2 error
  if retval, err2 = p.handler.RemoveFriend(ctx, args.UID, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeFriend: " + err2.Error())
    oprot.WriteMessageBegin("removeFriend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("removeFriend", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorLikesCount struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorLikesCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceLikesCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("likesCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceLikesCountResult{}
var retval *LikesCountRes
  var err2 error
  if retval, err2 = p.handler.LikesCount(ctx, args.Mid); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing likesCount: " + err2.Error())
    oprot.WriteMessageBegin("likesCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("likesCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorLikesAdd struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorLikesAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceLikesAddArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("likesAdd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceLikesAddResult{}
var retval *LikesAddRes
  var err2 error
  if retval, err2 = p.handler.LikesAdd(ctx, args.Mid, args.UID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing likesAdd: " + err2.Error())
    oprot.WriteMessageBegin("likesAdd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("likesAdd", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorLikesList struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorLikesList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceLikesListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("likesList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceLikesListResult{}
var retval *LikesListRes
  var err2 error
  if retval, err2 = p.handler.LikesList(ctx, args.Mid, args.Page, args.Size); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing likesList: " + err2.Error())
    oprot.WriteMessageBegin("likesList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("likesList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorUpdateNote struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorUpdateNote) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceUpdateNoteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateNote", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceUpdateNoteResult{}
var retval *NoteMetaRes
  var err2 error
  if retval, err2 = p.handler.UpdateNote(ctx, args.UID, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNote: " + err2.Error())
    oprot.WriteMessageBegin("updateNote", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateNote", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorNoteMetaList struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorNoteMetaList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceNoteMetaListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("noteMetaList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceNoteMetaListResult{}
var retval *NoteMetaListRes
  var err2 error
  if retval, err2 = p.handler.NoteMetaList(ctx, args.UID, args.Page, args.Size); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing noteMetaList: " + err2.Error())
    oprot.WriteMessageBegin("noteMetaList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("noteMetaList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorNoteListCount struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorNoteListCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceNoteListCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("noteListCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceNoteListCountResult{}
var retval *NoteListCountRes
  var err2 error
  if retval, err2 = p.handler.NoteListCount(ctx, args.UID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing noteListCount: " + err2.Error())
    oprot.WriteMessageBegin("noteListCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("noteListCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorNoteData struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorNoteData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceNoteDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("noteData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceNoteDataResult{}
var retval *NoteDataRes
  var err2 error
  if retval, err2 = p.handler.NoteData(ctx, args.UID, args.Nid); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing noteData: " + err2.Error())
    oprot.WriteMessageBegin("noteData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("noteData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorNoteHtml struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorNoteHtml) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceNoteHtmlArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("noteHtml", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceNoteHtmlResult{}
var retval *NoteHTMLRes
  var err2 error
  if retval, err2 = p.handler.NoteHtml(ctx, args.UID, args.Nid); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing noteHtml: " + err2.Error())
    oprot.WriteMessageBegin("noteHtml", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("noteHtml", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorMomentsCount struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorMomentsCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceMomentsCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("momentsCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceMomentsCountResult{}
var retval *MomentsCountRes
  var err2 error
  if retval, err2 = p.handler.MomentsCount(ctx, args.UID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing momentsCount: " + err2.Error())
    oprot.WriteMessageBegin("momentsCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("momentsCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorMomentsAdd struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorMomentsAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceMomentsAddArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("momentsAdd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceMomentsAddResult{}
var retval *AddMomentsRes
  var err2 error
  if retval, err2 = p.handler.MomentsAdd(ctx, args.UID, args.Moments); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing momentsAdd: " + err2.Error())
    oprot.WriteMessageBegin("momentsAdd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("momentsAdd", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorMomentsList struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorMomentsList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceMomentsListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("momentsList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceMomentsListResult{}
var retval *MomentsListRes
  var err2 error
  if retval, err2 = p.handler.MomentsList(ctx, args.UID, args.Page, args.Size); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing momentsList: " + err2.Error())
    oprot.WriteMessageBegin("momentsList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("momentsList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorFileDirOne struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorFileDirOne) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceFileDirOneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fileDirOne", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceFileDirOneResult{}
var retval *FileDirRes
  var err2 error
  if retval, err2 = p.handler.FileDirOne(ctx, args.UID, args.Path); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fileDirOne: " + err2.Error())
    oprot.WriteMessageBegin("fileDirOne", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fileDirOne", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorFileDirAdd struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorFileDirAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceFileDirAddArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fileDirAdd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceFileDirAddResult{}
var retval *AddDirRes
  var err2 error
  if retval, err2 = p.handler.FileDirAdd(ctx, args.UID, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fileDirAdd: " + err2.Error())
    oprot.WriteMessageBegin("fileDirAdd", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fileDirAdd", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorAddFile struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorAddFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceAddFileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addFile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceAddFileResult{}
var retval *AddFileRes
  var err2 error
  if retval, err2 = p.handler.AddFile(ctx, args.UID, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addFile: " + err2.Error())
    oprot.WriteMessageBegin("addFile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addFile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorYunSaveAttr struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorYunSaveAttr) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceYunSaveAttrArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("yunSaveAttr", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceYunSaveAttrResult{}
var retval *FileAttrRes
  var err2 error
  if retval, err2 = p.handler.YunSaveAttr(ctx, args.UID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing yunSaveAttr: " + err2.Error())
    oprot.WriteMessageBegin("yunSaveAttr", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("yunSaveAttr", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorThumbnail struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorThumbnail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceThumbnailArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("thumbnail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceThumbnailResult{}
var retval *ThumbnailRes
  var err2 error
  if retval, err2 = p.handler.Thumbnail(ctx, args.UID, args.Path); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing thumbnail: " + err2.Error())
    oprot.WriteMessageBegin("thumbnail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("thumbnail", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSetKeyValue struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSetKeyValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSetKeyValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setKeyValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSetKeyValueResult{}
var retval *SetKeyvalueRes
  var err2 error
  if retval, err2 = p.handler.SetKeyValue(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setKeyValue: " + err2.Error())
    oprot.WriteMessageBegin("setKeyValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("setKeyValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorGetKeyValue struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorGetKeyValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceGetKeyValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getKeyValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceGetKeyValueResult{}
var retval *GetKeyvalueRes
  var err2 error
  if retval, err2 = p.handler.GetKeyValue(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getKeyValue: " + err2.Error())
    oprot.WriteMessageBegin("getKeyValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getKeyValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorDelKeyValue struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorDelKeyValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceDelKeyValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("delKeyValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceDelKeyValueResult{}
var retval *DelKeyvalueRes
  var err2 error
  if retval, err2 = p.handler.DelKeyValue(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delKeyValue: " + err2.Error())
    oprot.WriteMessageBegin("delKeyValue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("delKeyValue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorQuestionVersion struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorQuestionVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceQuestionVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("question_version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceQuestionVersionResult{}
var retval *VersionRes
  var err2 error
  if retval, err2 = p.handler.QuestionVersion(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing question_version: " + err2.Error())
    oprot.WriteMessageBegin("question_version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("question_version", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorQuestionChapter struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorQuestionChapter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceQuestionChapterArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("question_chapter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceQuestionChapterResult{}
var retval *ChapterRes
  var err2 error
  if retval, err2 = p.handler.QuestionChapter(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing question_chapter: " + err2.Error())
    oprot.WriteMessageBegin("question_chapter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("question_chapter", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSubjectName struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSubjectName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSubjectNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("subject_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSubjectNameResult{}
var retval *SubjectNameRes
  var err2 error
  if retval, err2 = p.handler.SubjectName(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing subject_name: " + err2.Error())
    oprot.WriteMessageBegin("subject_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("subject_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorQuestionSource struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorQuestionSource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceQuestionSourceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("question_source", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceQuestionSourceResult{}
var retval *SourceRes
  var err2 error
  if retval, err2 = p.handler.QuestionSource(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing question_source: " + err2.Error())
    oprot.WriteMessageBegin("question_source", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("question_source", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorQuestionTixing struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorQuestionTixing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceQuestionTixingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("question_tixing", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceQuestionTixingResult{}
var retval *TixingRes
  var err2 error
  if retval, err2 = p.handler.QuestionTixing(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing question_tixing: " + err2.Error())
    oprot.WriteMessageBegin("question_tixing", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("question_tixing", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorQuestionTimuCount struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorQuestionTimuCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceQuestionTimuCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("question_timu_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceQuestionTimuCountResult{}
var retval *TimuCountRes
  var err2 error
  if retval, err2 = p.handler.QuestionTimuCount(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing question_timu_count: " + err2.Error())
    oprot.WriteMessageBegin("question_timu_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("question_timu_count", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorQuestionTimu struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorQuestionTimu) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceQuestionTimuArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("question_timu", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceQuestionTimuResult{}
var retval *TimuRes
  var err2 error
  if retval, err2 = p.handler.QuestionTimu(ctx, args.UID, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing question_timu: " + err2.Error())
    oprot.WriteMessageBegin("question_timu", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("question_timu", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorQuestionTimuByID struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorQuestionTimuByID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceQuestionTimuByIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("question_timu_by_id", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceQuestionTimuByIDResult{}
var retval *TimuByIDRes
  var err2 error
  if retval, err2 = p.handler.QuestionTimuByID(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing question_timu_by_id: " + err2.Error())
    oprot.WriteMessageBegin("question_timu_by_id", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("question_timu_by_id", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorCollectTimu struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorCollectTimu) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceCollectTimuArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("collect_timu", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceCollectTimuResult{}
var retval *CollectRes
  var err2 error
  if retval, err2 = p.handler.CollectTimu(ctx, args.UID, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing collect_timu: " + err2.Error())
    oprot.WriteMessageBegin("collect_timu", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("collect_timu", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorQueryCollectTimu struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorQueryCollectTimu) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceQueryCollectTimuArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("query_collect_timu", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceQueryCollectTimuResult{}
var retval *CollectListRes
  var err2 error
  if retval, err2 = p.handler.QueryCollectTimu(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_collect_timu: " + err2.Error())
    oprot.WriteMessageBegin("query_collect_timu", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("query_collect_timu", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorModifyQuestion struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorModifyQuestion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceModifyQuestionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("modify_question", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceModifyQuestionResult{}
var retval *ModifyRes
  var err2 error
  if retval, err2 = p.handler.ModifyQuestion(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing modify_question: " + err2.Error())
    oprot.WriteMessageBegin("modify_question", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("modify_question", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorModifyList struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorModifyList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceModifyListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("modify_list", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceModifyListResult{}
var retval *ModifyListRes
  var err2 error
  if retval, err2 = p.handler.ModifyList(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing modify_list: " + err2.Error())
    oprot.WriteMessageBegin("modify_list", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("modify_list", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorModifyCount struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorModifyCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceModifyCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("modify_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceModifyCountResult{}
var retval *ModifyCountRes
  var err2 error
  if retval, err2 = p.handler.ModifyCount(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing modify_count: " + err2.Error())
    oprot.WriteMessageBegin("modify_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("modify_count", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorQuestionTimuAdd struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorQuestionTimuAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceQuestionTimuAddArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("question_timu_add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceQuestionTimuAddResult{}
var retval *TimuAddRes
  var err2 error
  if retval, err2 = p.handler.QuestionTimuAdd(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing question_timu_add: " + err2.Error())
    oprot.WriteMessageBegin("question_timu_add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("question_timu_add", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorAddList struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorAddList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceAddListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_list", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceAddListResult{}
var retval *AddListRes
  var err2 error
  if retval, err2 = p.handler.AddList(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_list: " + err2.Error())
    oprot.WriteMessageBegin("add_list", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("add_list", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorAddCount struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorAddCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceAddCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceAddCountResult{}
var retval *AddCountRes
  var err2 error
  if retval, err2 = p.handler.AddCount(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_count: " + err2.Error())
    oprot.WriteMessageBegin("add_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("add_count", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorApproveModify struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorApproveModify) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceApproveModifyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("approve_modify", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceApproveModifyResult{}
var retval *ApproveModifyRes
  var err2 error
  if retval, err2 = p.handler.ApproveModify(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing approve_modify: " + err2.Error())
    oprot.WriteMessageBegin("approve_modify", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("approve_modify", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorOnSearch struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorOnSearch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceOnSearchArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("on_search", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceOnSearchResult{}
var retval *SearchRes
  var err2 error
  if retval, err2 = p.handler.OnSearch(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing on_search: " + err2.Error())
    oprot.WriteMessageBegin("on_search", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("on_search", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorGradeCateAdd struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorGradeCateAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceGradeCateAddArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("grade_cate_add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceGradeCateAddResult{}
var retval *AddGradeCateRes
  var err2 error
  if retval, err2 = p.handler.GradeCateAdd(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grade_cate_add: " + err2.Error())
    oprot.WriteMessageBegin("grade_cate_add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("grade_cate_add", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorGradeCateCount struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorGradeCateCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceGradeCateCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("grade_cate_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceGradeCateCountResult{}
var retval *GradeCateCountRes
  var err2 error
  if retval, err2 = p.handler.GradeCateCount(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grade_cate_count: " + err2.Error())
    oprot.WriteMessageBegin("grade_cate_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("grade_cate_count", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorGradeCateList struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorGradeCateList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceGradeCateListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("grade_cate_list", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceGradeCateListResult{}
var retval *GradeCateListRes
  var err2 error
  if retval, err2 = p.handler.GradeCateList(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grade_cate_list: " + err2.Error())
    oprot.WriteMessageBegin("grade_cate_list", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("grade_cate_list", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorHomeBlackData struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorHomeBlackData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceHomeBlackDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("home_black_data", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceHomeBlackDataResult{}
var retval *HomeBlackDataRes
  var err2 error
  if retval, err2 = p.handler.HomeBlackData(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing home_black_data: " + err2.Error())
    oprot.WriteMessageBegin("home_black_data", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("home_black_data", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorGradeSubject struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorGradeSubject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceGradeSubjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("grade_subject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceGradeSubjectResult{}
var retval *GradeSubjectRes
  var err2 error
  if retval, err2 = p.handler.GradeSubject(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grade_subject: " + err2.Error())
    oprot.WriteMessageBegin("grade_subject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("grade_subject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSchoolRollAdd struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSchoolRollAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSchoolRollAddArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("school_roll_add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSchoolRollAddResult{}
var retval *SchoolRollAddRes
  var err2 error
  if retval, err2 = p.handler.SchoolRollAdd(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing school_roll_add: " + err2.Error())
    oprot.WriteMessageBegin("school_roll_add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("school_roll_add", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSchoolRollCount struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSchoolRollCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSchoolRollCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("school_roll_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSchoolRollCountResult{}
var retval *SchoolRollCountRes
  var err2 error
  if retval, err2 = p.handler.SchoolRollCount(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing school_roll_count: " + err2.Error())
    oprot.WriteMessageBegin("school_roll_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("school_roll_count", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSchoolList struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSchoolList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSchoolListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("school_list", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSchoolListResult{}
var retval *SchoolRollListRes
  var err2 error
  if retval, err2 = p.handler.SchoolList(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing school_list: " + err2.Error())
    oprot.WriteMessageBegin("school_list", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("school_list", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSubjectCateAdd struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSubjectCateAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSubjectCateAddArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("subject_cate_add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSubjectCateAddResult{}
var retval *SubjectCateAddRes
  var err2 error
  if retval, err2 = p.handler.SubjectCateAdd(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing subject_cate_add: " + err2.Error())
    oprot.WriteMessageBegin("subject_cate_add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("subject_cate_add", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSubjectCateCount struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSubjectCateCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSubjectCateCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("subject_cate_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSubjectCateCountResult{}
var retval *SubjectCateCountRes
  var err2 error
  if retval, err2 = p.handler.SubjectCateCount(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing subject_cate_count: " + err2.Error())
    oprot.WriteMessageBegin("subject_cate_count", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("subject_cate_count", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSubjectCateList struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSubjectCateList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSubjectCateListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("subject_cate_list", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSubjectCateListResult{}
var retval *SubjectCateListRes
  var err2 error
  if retval, err2 = p.handler.SubjectCateList(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing subject_cate_list: " + err2.Error())
    oprot.WriteMessageBegin("subject_cate_list", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("subject_cate_list", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSetUserInfo struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSetUserInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSetUserInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_user_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSetUserInfoResult{}
var retval *SetUserInfoRes
  var err2 error
  if retval, err2 = p.handler.SetUserInfo(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_user_info: " + err2.Error())
    oprot.WriteMessageBegin("set_user_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("set_user_info", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorGetUserInfo struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorGetUserInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceGetUserInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_user_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceGetUserInfoResult{}
var retval *GetUserInfoRes
  var err2 error
  if retval, err2 = p.handler.GetUserInfo(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_user_info: " + err2.Error())
    oprot.WriteMessageBegin("get_user_info", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_user_info", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSetWechatUinfo struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSetWechatUinfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSetWechatUinfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_wechat_uinfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSetWechatUinfoResult{}
var retval *SetWechatUinfoRes
  var err2 error
  if retval, err2 = p.handler.SetWechatUinfo(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_wechat_uinfo: " + err2.Error())
    oprot.WriteMessageBegin("set_wechat_uinfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("set_wechat_uinfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorGetWechatUinfo struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorGetWechatUinfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceGetWechatUinfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_wechat_uinfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceGetWechatUinfoResult{}
var retval *GetWechatUinfoRes
  var err2 error
  if retval, err2 = p.handler.GetWechatUinfo(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_wechat_uinfo: " + err2.Error())
    oprot.WriteMessageBegin("get_wechat_uinfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_wechat_uinfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSetAlipayUinfo struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSetAlipayUinfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSetAlipayUinfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_alipay_uinfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSetAlipayUinfoResult{}
var retval *SetAlipayUinfoRes
  var err2 error
  if retval, err2 = p.handler.SetAlipayUinfo(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_alipay_uinfo: " + err2.Error())
    oprot.WriteMessageBegin("set_alipay_uinfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("set_alipay_uinfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorGetAlipayUinfo struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorGetAlipayUinfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceGetAlipayUinfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_alipay_uinfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceGetAlipayUinfoResult{}
var retval *GetAlipayUinfoRes
  var err2 error
  if retval, err2 = p.handler.GetAlipayUinfo(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_alipay_uinfo: " + err2.Error())
    oprot.WriteMessageBegin("get_alipay_uinfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_alipay_uinfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSetBaiduEntity struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSetBaiduEntity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSetBaiduEntityArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_baidu_entity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSetBaiduEntityResult{}
var retval *SetBaiduEntityRes
  var err2 error
  if retval, err2 = p.handler.SetBaiduEntity(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_baidu_entity: " + err2.Error())
    oprot.WriteMessageBegin("set_baidu_entity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("set_baidu_entity", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorBaiduEntity struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorBaiduEntity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceBaiduEntityArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("baidu_entity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceBaiduEntityResult{}
var retval *BaiduEntityRes
  var err2 error
  if retval, err2 = p.handler.BaiduEntity(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing baidu_entity: " + err2.Error())
    oprot.WriteMessageBegin("baidu_entity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("baidu_entity", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSearchHistory struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSearchHistory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSearchHistoryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("search_history", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSearchHistoryResult{}
var retval *SearchHistoryRes
  var err2 error
  if retval, err2 = p.handler.SearchHistory(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing search_history: " + err2.Error())
    oprot.WriteMessageBegin("search_history", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("search_history", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorSearchItem struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorSearchItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceSearchItemArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("search_item", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceSearchItemResult{}
var retval *SearchItemRes
  var err2 error
  if retval, err2 = p.handler.SearchItem(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing search_item: " + err2.Error())
    oprot.WriteMessageBegin("search_item", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("search_item", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorRefreshModifyReward struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorRefreshModifyReward) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceRefreshModifyRewardArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("refresh_modify_reward", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceRefreshModifyRewardResult{}
var retval *RefreshModifyRewardRes
  var err2 error
  if retval, err2 = p.handler.RefreshModifyReward(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing refresh_modify_reward: " + err2.Error())
    oprot.WriteMessageBegin("refresh_modify_reward", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("refresh_modify_reward", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorRefreshAddReward struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorRefreshAddReward) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceRefreshAddRewardArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("refresh_add_reward", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceRefreshAddRewardResult{}
var retval *RefreshAddRewardRes
  var err2 error
  if retval, err2 = p.handler.RefreshAddReward(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing refresh_add_reward: " + err2.Error())
    oprot.WriteMessageBegin("refresh_add_reward", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("refresh_add_reward", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type datanodeServiceProcessorRefreshUserCoin struct {
  handler DatanodeService
}

func (p *datanodeServiceProcessorRefreshUserCoin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DatanodeServiceRefreshUserCoinArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("refresh_user_coin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DatanodeServiceRefreshUserCoinResult{}
var retval *RefreshUserCoinRes
  var err2 error
  if retval, err2 = p.handler.RefreshUserCoin(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing refresh_user_coin: " + err2.Error())
    oprot.WriteMessageBegin("refresh_user_coin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("refresh_user_coin", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type DatanodeServiceCreateUserArgs struct {
  Req *NewUserReq_ `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceCreateUserArgs() *DatanodeServiceCreateUserArgs {
  return &DatanodeServiceCreateUserArgs{}
}

var DatanodeServiceCreateUserArgs_Req_DEFAULT *NewUserReq_
func (p *DatanodeServiceCreateUserArgs) GetReq() *NewUserReq_ {
  if !p.IsSetReq() {
    return DatanodeServiceCreateUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceCreateUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceCreateUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceCreateUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &NewUserReq_{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceCreateUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceCreateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceCreateUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceCreateUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceCreateUserResult struct {
  Success *UserRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceCreateUserResult() *DatanodeServiceCreateUserResult {
  return &DatanodeServiceCreateUserResult{}
}

var DatanodeServiceCreateUserResult_Success_DEFAULT *UserRes
func (p *DatanodeServiceCreateUserResult) GetSuccess() *UserRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceCreateUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceCreateUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceCreateUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceCreateUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceCreateUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceCreateUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceCreateUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceCreateUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceUserInfoArgs struct {
  Req *UserInfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceUserInfoArgs() *DatanodeServiceUserInfoArgs {
  return &DatanodeServiceUserInfoArgs{}
}

var DatanodeServiceUserInfoArgs_Req_DEFAULT *UserInfoReq
func (p *DatanodeServiceUserInfoArgs) GetReq() *UserInfoReq {
  if !p.IsSetReq() {
    return DatanodeServiceUserInfoArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceUserInfoArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceUserInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceUserInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &UserInfoReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceUserInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("userInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceUserInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceUserInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceUserInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceUserInfoResult struct {
  Success *UserRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceUserInfoResult() *DatanodeServiceUserInfoResult {
  return &DatanodeServiceUserInfoResult{}
}

var DatanodeServiceUserInfoResult_Success_DEFAULT *UserRes
func (p *DatanodeServiceUserInfoResult) GetSuccess() *UserRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceUserInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceUserInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceUserInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceUserInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceUserInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("userInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceUserInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceUserInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceUserInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSearchUserArgs struct {
  Req *SearchUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSearchUserArgs() *DatanodeServiceSearchUserArgs {
  return &DatanodeServiceSearchUserArgs{}
}

var DatanodeServiceSearchUserArgs_Req_DEFAULT *SearchUserReq
func (p *DatanodeServiceSearchUserArgs) GetReq() *SearchUserReq {
  if !p.IsSetReq() {
    return DatanodeServiceSearchUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceSearchUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceSearchUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSearchUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SearchUserReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceSearchUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSearchUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSearchUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSearchUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSearchUserResult struct {
  Success []*User `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSearchUserResult() *DatanodeServiceSearchUserResult {
  return &DatanodeServiceSearchUserResult{}
}

var DatanodeServiceSearchUserResult_Success_DEFAULT []*User

func (p *DatanodeServiceSearchUserResult) GetSuccess() []*User {
  return p.Success
}
func (p *DatanodeServiceSearchUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSearchUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSearchUserResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*User, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem395 := &User{}
    if err := _elem395.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem395), err)
    }
    p.Success = append(p.Success, _elem395)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DatanodeServiceSearchUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSearchUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSearchUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSearchUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceUpdateUserArgs struct {
  Req *UpdateReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceUpdateUserArgs() *DatanodeServiceUpdateUserArgs {
  return &DatanodeServiceUpdateUserArgs{}
}

var DatanodeServiceUpdateUserArgs_Req_DEFAULT *UpdateReq
func (p *DatanodeServiceUpdateUserArgs) GetReq() *UpdateReq {
  if !p.IsSetReq() {
    return DatanodeServiceUpdateUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceUpdateUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceUpdateUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceUpdateUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &UpdateReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceUpdateUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceUpdateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceUpdateUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceUpdateUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceUpdateUserResult struct {
  Success *UserRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceUpdateUserResult() *DatanodeServiceUpdateUserResult {
  return &DatanodeServiceUpdateUserResult{}
}

var DatanodeServiceUpdateUserResult_Success_DEFAULT *UserRes
func (p *DatanodeServiceUpdateUserResult) GetSuccess() *UserRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceUpdateUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceUpdateUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceUpdateUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceUpdateUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceUpdateUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceUpdateUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceUpdateUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceUpdateUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceAddAttentionArgs struct {
  Req *AddAttentionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceAddAttentionArgs() *DatanodeServiceAddAttentionArgs {
  return &DatanodeServiceAddAttentionArgs{}
}

var DatanodeServiceAddAttentionArgs_Req_DEFAULT *AddAttentionReq
func (p *DatanodeServiceAddAttentionArgs) GetReq() *AddAttentionReq {
  if !p.IsSetReq() {
    return DatanodeServiceAddAttentionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceAddAttentionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceAddAttentionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddAttentionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &AddAttentionReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceAddAttentionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_attention_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddAttentionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceAddAttentionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddAttentionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceAddAttentionResult struct {
  Success *AddAttentionRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceAddAttentionResult() *DatanodeServiceAddAttentionResult {
  return &DatanodeServiceAddAttentionResult{}
}

var DatanodeServiceAddAttentionResult_Success_DEFAULT *AddAttentionRes
func (p *DatanodeServiceAddAttentionResult) GetSuccess() *AddAttentionRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceAddAttentionResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceAddAttentionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceAddAttentionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddAttentionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AddAttentionRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceAddAttentionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_attention_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddAttentionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceAddAttentionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddAttentionResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceDelAttentionArgs struct {
  Req *DelAttentionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceDelAttentionArgs() *DatanodeServiceDelAttentionArgs {
  return &DatanodeServiceDelAttentionArgs{}
}

var DatanodeServiceDelAttentionArgs_Req_DEFAULT *DelAttentionReq
func (p *DatanodeServiceDelAttentionArgs) GetReq() *DelAttentionReq {
  if !p.IsSetReq() {
    return DatanodeServiceDelAttentionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceDelAttentionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceDelAttentionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceDelAttentionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &DelAttentionReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceDelAttentionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_attention_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceDelAttentionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceDelAttentionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceDelAttentionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceDelAttentionResult struct {
  Success *DelAttentionRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceDelAttentionResult() *DatanodeServiceDelAttentionResult {
  return &DatanodeServiceDelAttentionResult{}
}

var DatanodeServiceDelAttentionResult_Success_DEFAULT *DelAttentionRes
func (p *DatanodeServiceDelAttentionResult) GetSuccess() *DelAttentionRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceDelAttentionResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceDelAttentionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceDelAttentionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceDelAttentionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DelAttentionRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceDelAttentionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_attention_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceDelAttentionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceDelAttentionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceDelAttentionResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceGetAttentionArgs struct {
  Req *GetAttentionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceGetAttentionArgs() *DatanodeServiceGetAttentionArgs {
  return &DatanodeServiceGetAttentionArgs{}
}

var DatanodeServiceGetAttentionArgs_Req_DEFAULT *GetAttentionReq
func (p *DatanodeServiceGetAttentionArgs) GetReq() *GetAttentionReq {
  if !p.IsSetReq() {
    return DatanodeServiceGetAttentionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceGetAttentionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceGetAttentionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGetAttentionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &GetAttentionReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceGetAttentionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_attention_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGetAttentionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceGetAttentionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGetAttentionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceGetAttentionResult struct {
  Success *GetAttentionRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceGetAttentionResult() *DatanodeServiceGetAttentionResult {
  return &DatanodeServiceGetAttentionResult{}
}

var DatanodeServiceGetAttentionResult_Success_DEFAULT *GetAttentionRes
func (p *DatanodeServiceGetAttentionResult) GetSuccess() *GetAttentionRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceGetAttentionResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceGetAttentionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceGetAttentionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGetAttentionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetAttentionRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceGetAttentionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_attention_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGetAttentionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceGetAttentionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGetAttentionResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceAddUserAttentionArgs struct {
  Req *AddUserAttentionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceAddUserAttentionArgs() *DatanodeServiceAddUserAttentionArgs {
  return &DatanodeServiceAddUserAttentionArgs{}
}

var DatanodeServiceAddUserAttentionArgs_Req_DEFAULT *AddUserAttentionReq
func (p *DatanodeServiceAddUserAttentionArgs) GetReq() *AddUserAttentionReq {
  if !p.IsSetReq() {
    return DatanodeServiceAddUserAttentionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceAddUserAttentionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceAddUserAttentionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddUserAttentionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &AddUserAttentionReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceAddUserAttentionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_user_attention_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddUserAttentionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceAddUserAttentionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddUserAttentionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceAddUserAttentionResult struct {
  Success *AddUserAttentionRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceAddUserAttentionResult() *DatanodeServiceAddUserAttentionResult {
  return &DatanodeServiceAddUserAttentionResult{}
}

var DatanodeServiceAddUserAttentionResult_Success_DEFAULT *AddUserAttentionRes
func (p *DatanodeServiceAddUserAttentionResult) GetSuccess() *AddUserAttentionRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceAddUserAttentionResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceAddUserAttentionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceAddUserAttentionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddUserAttentionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AddUserAttentionRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceAddUserAttentionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_user_attention_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddUserAttentionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceAddUserAttentionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddUserAttentionResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceDelUserAttentionArgs struct {
  Req *DelUserAttentionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceDelUserAttentionArgs() *DatanodeServiceDelUserAttentionArgs {
  return &DatanodeServiceDelUserAttentionArgs{}
}

var DatanodeServiceDelUserAttentionArgs_Req_DEFAULT *DelUserAttentionReq
func (p *DatanodeServiceDelUserAttentionArgs) GetReq() *DelUserAttentionReq {
  if !p.IsSetReq() {
    return DatanodeServiceDelUserAttentionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceDelUserAttentionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceDelUserAttentionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceDelUserAttentionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &DelUserAttentionReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceDelUserAttentionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_user_attention_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceDelUserAttentionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceDelUserAttentionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceDelUserAttentionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceDelUserAttentionResult struct {
  Success *DelUserAttentionRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceDelUserAttentionResult() *DatanodeServiceDelUserAttentionResult {
  return &DatanodeServiceDelUserAttentionResult{}
}

var DatanodeServiceDelUserAttentionResult_Success_DEFAULT *DelUserAttentionRes
func (p *DatanodeServiceDelUserAttentionResult) GetSuccess() *DelUserAttentionRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceDelUserAttentionResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceDelUserAttentionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceDelUserAttentionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceDelUserAttentionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DelUserAttentionRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceDelUserAttentionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_user_attention_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceDelUserAttentionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceDelUserAttentionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceDelUserAttentionResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceGetUserAttentionArgs struct {
  Req *GetUserAttentionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceGetUserAttentionArgs() *DatanodeServiceGetUserAttentionArgs {
  return &DatanodeServiceGetUserAttentionArgs{}
}

var DatanodeServiceGetUserAttentionArgs_Req_DEFAULT *GetUserAttentionReq
func (p *DatanodeServiceGetUserAttentionArgs) GetReq() *GetUserAttentionReq {
  if !p.IsSetReq() {
    return DatanodeServiceGetUserAttentionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceGetUserAttentionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceGetUserAttentionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGetUserAttentionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &GetUserAttentionReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceGetUserAttentionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_user_attention_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGetUserAttentionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceGetUserAttentionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGetUserAttentionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceGetUserAttentionResult struct {
  Success *GetUserAttentionRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceGetUserAttentionResult() *DatanodeServiceGetUserAttentionResult {
  return &DatanodeServiceGetUserAttentionResult{}
}

var DatanodeServiceGetUserAttentionResult_Success_DEFAULT *GetUserAttentionRes
func (p *DatanodeServiceGetUserAttentionResult) GetSuccess() *GetUserAttentionRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceGetUserAttentionResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceGetUserAttentionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceGetUserAttentionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGetUserAttentionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetUserAttentionRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceGetUserAttentionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_user_attention_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGetUserAttentionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceGetUserAttentionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGetUserAttentionResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceAddFriendsArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Req *AddFriendReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceAddFriendsArgs() *DatanodeServiceAddFriendsArgs {
  return &DatanodeServiceAddFriendsArgs{}
}


func (p *DatanodeServiceAddFriendsArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceAddFriendsArgs_Req_DEFAULT *AddFriendReq
func (p *DatanodeServiceAddFriendsArgs) GetReq() *AddFriendReq {
  if !p.IsSetReq() {
    return DatanodeServiceAddFriendsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceAddFriendsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceAddFriendsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddFriendsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceAddFriendsArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Req = &AddFriendReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceAddFriendsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addFriends_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddFriendsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceAddFriendsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *DatanodeServiceAddFriendsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddFriendsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceAddFriendsResult struct {
  Success *AddFriendRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceAddFriendsResult() *DatanodeServiceAddFriendsResult {
  return &DatanodeServiceAddFriendsResult{}
}

var DatanodeServiceAddFriendsResult_Success_DEFAULT *AddFriendRes
func (p *DatanodeServiceAddFriendsResult) GetSuccess() *AddFriendRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceAddFriendsResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceAddFriendsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceAddFriendsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddFriendsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AddFriendRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceAddFriendsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addFriends_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddFriendsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceAddFriendsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddFriendsResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceAgreeFriendsArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Req *AgreeFriendReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceAgreeFriendsArgs() *DatanodeServiceAgreeFriendsArgs {
  return &DatanodeServiceAgreeFriendsArgs{}
}


func (p *DatanodeServiceAgreeFriendsArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceAgreeFriendsArgs_Req_DEFAULT *AgreeFriendReq
func (p *DatanodeServiceAgreeFriendsArgs) GetReq() *AgreeFriendReq {
  if !p.IsSetReq() {
    return DatanodeServiceAgreeFriendsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceAgreeFriendsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceAgreeFriendsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAgreeFriendsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceAgreeFriendsArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Req = &AgreeFriendReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceAgreeFriendsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("agreeFriends_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAgreeFriendsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceAgreeFriendsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *DatanodeServiceAgreeFriendsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAgreeFriendsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceAgreeFriendsResult struct {
  Success *AgreeFriendRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceAgreeFriendsResult() *DatanodeServiceAgreeFriendsResult {
  return &DatanodeServiceAgreeFriendsResult{}
}

var DatanodeServiceAgreeFriendsResult_Success_DEFAULT *AgreeFriendRes
func (p *DatanodeServiceAgreeFriendsResult) GetSuccess() *AgreeFriendRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceAgreeFriendsResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceAgreeFriendsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceAgreeFriendsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAgreeFriendsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AgreeFriendRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceAgreeFriendsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("agreeFriends_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAgreeFriendsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceAgreeFriendsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAgreeFriendsResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Uid2
type DatanodeServiceFriendsListArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Uid2 int64 `thrift:"uid2,2" db:"uid2" json:"uid2"`
}

func NewDatanodeServiceFriendsListArgs() *DatanodeServiceFriendsListArgs {
  return &DatanodeServiceFriendsListArgs{}
}


func (p *DatanodeServiceFriendsListArgs) GetUID() int64 {
  return p.UID
}

func (p *DatanodeServiceFriendsListArgs) GetUid2() int64 {
  return p.Uid2
}
func (p *DatanodeServiceFriendsListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceFriendsListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceFriendsListArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Uid2 = v
}
  return nil
}

func (p *DatanodeServiceFriendsListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("friendsList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceFriendsListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceFriendsListArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid2", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid2: ", p), err) }
  if err := oprot.WriteI64(int64(p.Uid2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid2: ", p), err) }
  return err
}

func (p *DatanodeServiceFriendsListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceFriendsListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceFriendsListResult struct {
  Success *FriendRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceFriendsListResult() *DatanodeServiceFriendsListResult {
  return &DatanodeServiceFriendsListResult{}
}

var DatanodeServiceFriendsListResult_Success_DEFAULT *FriendRes
func (p *DatanodeServiceFriendsListResult) GetSuccess() *FriendRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceFriendsListResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceFriendsListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceFriendsListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceFriendsListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FriendRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceFriendsListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("friendsList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceFriendsListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceFriendsListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceFriendsListResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceCreateGroupArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Req *CreateGroupReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceCreateGroupArgs() *DatanodeServiceCreateGroupArgs {
  return &DatanodeServiceCreateGroupArgs{}
}


func (p *DatanodeServiceCreateGroupArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceCreateGroupArgs_Req_DEFAULT *CreateGroupReq
func (p *DatanodeServiceCreateGroupArgs) GetReq() *CreateGroupReq {
  if !p.IsSetReq() {
    return DatanodeServiceCreateGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceCreateGroupArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceCreateGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceCreateGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceCreateGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Req = &CreateGroupReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceCreateGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceCreateGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceCreateGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *DatanodeServiceCreateGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceCreateGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceCreateGroupResult struct {
  Success *CreateGroupRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceCreateGroupResult() *DatanodeServiceCreateGroupResult {
  return &DatanodeServiceCreateGroupResult{}
}

var DatanodeServiceCreateGroupResult_Success_DEFAULT *CreateGroupRes
func (p *DatanodeServiceCreateGroupResult) GetSuccess() *CreateGroupRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceCreateGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceCreateGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceCreateGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceCreateGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CreateGroupRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceCreateGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceCreateGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceCreateGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceCreateGroupResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceRenameGroupArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Req *RenameGroupReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceRenameGroupArgs() *DatanodeServiceRenameGroupArgs {
  return &DatanodeServiceRenameGroupArgs{}
}


func (p *DatanodeServiceRenameGroupArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceRenameGroupArgs_Req_DEFAULT *RenameGroupReq
func (p *DatanodeServiceRenameGroupArgs) GetReq() *RenameGroupReq {
  if !p.IsSetReq() {
    return DatanodeServiceRenameGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceRenameGroupArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceRenameGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceRenameGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceRenameGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Req = &RenameGroupReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceRenameGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("renameGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceRenameGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceRenameGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *DatanodeServiceRenameGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceRenameGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceRenameGroupResult struct {
  Success *RenameGroupRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceRenameGroupResult() *DatanodeServiceRenameGroupResult {
  return &DatanodeServiceRenameGroupResult{}
}

var DatanodeServiceRenameGroupResult_Success_DEFAULT *RenameGroupRes
func (p *DatanodeServiceRenameGroupResult) GetSuccess() *RenameGroupRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceRenameGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceRenameGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceRenameGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceRenameGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RenameGroupRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceRenameGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("renameGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceRenameGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceRenameGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceRenameGroupResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceAddNoteFriendArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Req *AddFriendNoteReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceAddNoteFriendArgs() *DatanodeServiceAddNoteFriendArgs {
  return &DatanodeServiceAddNoteFriendArgs{}
}


func (p *DatanodeServiceAddNoteFriendArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceAddNoteFriendArgs_Req_DEFAULT *AddFriendNoteReq
func (p *DatanodeServiceAddNoteFriendArgs) GetReq() *AddFriendNoteReq {
  if !p.IsSetReq() {
    return DatanodeServiceAddNoteFriendArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceAddNoteFriendArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceAddNoteFriendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddNoteFriendArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceAddNoteFriendArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Req = &AddFriendNoteReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceAddNoteFriendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addNoteFriend_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddNoteFriendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceAddNoteFriendArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *DatanodeServiceAddNoteFriendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddNoteFriendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceAddNoteFriendResult struct {
  Success *AddFriendNoteRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceAddNoteFriendResult() *DatanodeServiceAddNoteFriendResult {
  return &DatanodeServiceAddNoteFriendResult{}
}

var DatanodeServiceAddNoteFriendResult_Success_DEFAULT *AddFriendNoteRes
func (p *DatanodeServiceAddNoteFriendResult) GetSuccess() *AddFriendNoteRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceAddNoteFriendResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceAddNoteFriendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceAddNoteFriendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddNoteFriendResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AddFriendNoteRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceAddNoteFriendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addNoteFriend_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddNoteFriendResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceAddNoteFriendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddNoteFriendResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceMoveToNewGroupArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Req *MoveGroupReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceMoveToNewGroupArgs() *DatanodeServiceMoveToNewGroupArgs {
  return &DatanodeServiceMoveToNewGroupArgs{}
}


func (p *DatanodeServiceMoveToNewGroupArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceMoveToNewGroupArgs_Req_DEFAULT *MoveGroupReq
func (p *DatanodeServiceMoveToNewGroupArgs) GetReq() *MoveGroupReq {
  if !p.IsSetReq() {
    return DatanodeServiceMoveToNewGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceMoveToNewGroupArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceMoveToNewGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceMoveToNewGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceMoveToNewGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Req = &MoveGroupReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceMoveToNewGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("moveToNewGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceMoveToNewGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceMoveToNewGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *DatanodeServiceMoveToNewGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceMoveToNewGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceMoveToNewGroupResult struct {
  Success *MoveGroupRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceMoveToNewGroupResult() *DatanodeServiceMoveToNewGroupResult {
  return &DatanodeServiceMoveToNewGroupResult{}
}

var DatanodeServiceMoveToNewGroupResult_Success_DEFAULT *MoveGroupRes
func (p *DatanodeServiceMoveToNewGroupResult) GetSuccess() *MoveGroupRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceMoveToNewGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceMoveToNewGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceMoveToNewGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceMoveToNewGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &MoveGroupRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceMoveToNewGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("moveToNewGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceMoveToNewGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceMoveToNewGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceMoveToNewGroupResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceRemoveFriendArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Req *RemoveFriendReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceRemoveFriendArgs() *DatanodeServiceRemoveFriendArgs {
  return &DatanodeServiceRemoveFriendArgs{}
}


func (p *DatanodeServiceRemoveFriendArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceRemoveFriendArgs_Req_DEFAULT *RemoveFriendReq
func (p *DatanodeServiceRemoveFriendArgs) GetReq() *RemoveFriendReq {
  if !p.IsSetReq() {
    return DatanodeServiceRemoveFriendArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceRemoveFriendArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceRemoveFriendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceRemoveFriendArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceRemoveFriendArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Req = &RemoveFriendReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceRemoveFriendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeFriend_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceRemoveFriendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceRemoveFriendArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *DatanodeServiceRemoveFriendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceRemoveFriendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceRemoveFriendResult struct {
  Success *RemoveFriendRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceRemoveFriendResult() *DatanodeServiceRemoveFriendResult {
  return &DatanodeServiceRemoveFriendResult{}
}

var DatanodeServiceRemoveFriendResult_Success_DEFAULT *RemoveFriendRes
func (p *DatanodeServiceRemoveFriendResult) GetSuccess() *RemoveFriendRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceRemoveFriendResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceRemoveFriendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceRemoveFriendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceRemoveFriendResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RemoveFriendRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceRemoveFriendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeFriend_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceRemoveFriendResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceRemoveFriendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceRemoveFriendResult(%+v)", *p)
}

// Attributes:
//  - Mid
type DatanodeServiceLikesCountArgs struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
}

func NewDatanodeServiceLikesCountArgs() *DatanodeServiceLikesCountArgs {
  return &DatanodeServiceLikesCountArgs{}
}


func (p *DatanodeServiceLikesCountArgs) GetMid() string {
  return p.Mid
}
func (p *DatanodeServiceLikesCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceLikesCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *DatanodeServiceLikesCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("likesCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceLikesCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *DatanodeServiceLikesCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceLikesCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceLikesCountResult struct {
  Success *LikesCountRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceLikesCountResult() *DatanodeServiceLikesCountResult {
  return &DatanodeServiceLikesCountResult{}
}

var DatanodeServiceLikesCountResult_Success_DEFAULT *LikesCountRes
func (p *DatanodeServiceLikesCountResult) GetSuccess() *LikesCountRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceLikesCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceLikesCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceLikesCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceLikesCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &LikesCountRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceLikesCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("likesCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceLikesCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceLikesCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceLikesCountResult(%+v)", *p)
}

// Attributes:
//  - Mid
//  - UID
type DatanodeServiceLikesAddArgs struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  UID int64 `thrift:"uid,2" db:"uid" json:"uid"`
}

func NewDatanodeServiceLikesAddArgs() *DatanodeServiceLikesAddArgs {
  return &DatanodeServiceLikesAddArgs{}
}


func (p *DatanodeServiceLikesAddArgs) GetMid() string {
  return p.Mid
}

func (p *DatanodeServiceLikesAddArgs) GetUID() int64 {
  return p.UID
}
func (p *DatanodeServiceLikesAddArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceLikesAddArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *DatanodeServiceLikesAddArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceLikesAddArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("likesAdd_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceLikesAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *DatanodeServiceLikesAddArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceLikesAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceLikesAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceLikesAddResult struct {
  Success *LikesAddRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceLikesAddResult() *DatanodeServiceLikesAddResult {
  return &DatanodeServiceLikesAddResult{}
}

var DatanodeServiceLikesAddResult_Success_DEFAULT *LikesAddRes
func (p *DatanodeServiceLikesAddResult) GetSuccess() *LikesAddRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceLikesAddResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceLikesAddResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceLikesAddResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceLikesAddResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &LikesAddRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceLikesAddResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("likesAdd_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceLikesAddResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceLikesAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceLikesAddResult(%+v)", *p)
}

// Attributes:
//  - Mid
//  - Page
//  - Size
type DatanodeServiceLikesListArgs struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
}

func NewDatanodeServiceLikesListArgs() *DatanodeServiceLikesListArgs {
  return &DatanodeServiceLikesListArgs{}
}


func (p *DatanodeServiceLikesListArgs) GetMid() string {
  return p.Mid
}

func (p *DatanodeServiceLikesListArgs) GetPage() int32 {
  return p.Page
}

func (p *DatanodeServiceLikesListArgs) GetSize() int32 {
  return p.Size
}
func (p *DatanodeServiceLikesListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceLikesListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *DatanodeServiceLikesListArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *DatanodeServiceLikesListArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *DatanodeServiceLikesListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("likesList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceLikesListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *DatanodeServiceLikesListArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *DatanodeServiceLikesListArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *DatanodeServiceLikesListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceLikesListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceLikesListResult struct {
  Success *LikesListRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceLikesListResult() *DatanodeServiceLikesListResult {
  return &DatanodeServiceLikesListResult{}
}

var DatanodeServiceLikesListResult_Success_DEFAULT *LikesListRes
func (p *DatanodeServiceLikesListResult) GetSuccess() *LikesListRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceLikesListResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceLikesListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceLikesListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceLikesListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &LikesListRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceLikesListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("likesList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceLikesListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceLikesListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceLikesListResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceUpdateNoteArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Req *UpdateNoteReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceUpdateNoteArgs() *DatanodeServiceUpdateNoteArgs {
  return &DatanodeServiceUpdateNoteArgs{}
}


func (p *DatanodeServiceUpdateNoteArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceUpdateNoteArgs_Req_DEFAULT *UpdateNoteReq
func (p *DatanodeServiceUpdateNoteArgs) GetReq() *UpdateNoteReq {
  if !p.IsSetReq() {
    return DatanodeServiceUpdateNoteArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceUpdateNoteArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceUpdateNoteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceUpdateNoteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceUpdateNoteArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Req = &UpdateNoteReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceUpdateNoteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateNote_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceUpdateNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceUpdateNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *DatanodeServiceUpdateNoteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceUpdateNoteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceUpdateNoteResult struct {
  Success *NoteMetaRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceUpdateNoteResult() *DatanodeServiceUpdateNoteResult {
  return &DatanodeServiceUpdateNoteResult{}
}

var DatanodeServiceUpdateNoteResult_Success_DEFAULT *NoteMetaRes
func (p *DatanodeServiceUpdateNoteResult) GetSuccess() *NoteMetaRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceUpdateNoteResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceUpdateNoteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceUpdateNoteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceUpdateNoteResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &NoteMetaRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceUpdateNoteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateNote_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceUpdateNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceUpdateNoteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceUpdateNoteResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Page
//  - Size
type DatanodeServiceNoteMetaListArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
}

func NewDatanodeServiceNoteMetaListArgs() *DatanodeServiceNoteMetaListArgs {
  return &DatanodeServiceNoteMetaListArgs{}
}


func (p *DatanodeServiceNoteMetaListArgs) GetUID() int64 {
  return p.UID
}

func (p *DatanodeServiceNoteMetaListArgs) GetPage() int32 {
  return p.Page
}

func (p *DatanodeServiceNoteMetaListArgs) GetSize() int32 {
  return p.Size
}
func (p *DatanodeServiceNoteMetaListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceNoteMetaListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceNoteMetaListArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *DatanodeServiceNoteMetaListArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *DatanodeServiceNoteMetaListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("noteMetaList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceNoteMetaListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceNoteMetaListArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *DatanodeServiceNoteMetaListArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *DatanodeServiceNoteMetaListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceNoteMetaListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceNoteMetaListResult struct {
  Success *NoteMetaListRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceNoteMetaListResult() *DatanodeServiceNoteMetaListResult {
  return &DatanodeServiceNoteMetaListResult{}
}

var DatanodeServiceNoteMetaListResult_Success_DEFAULT *NoteMetaListRes
func (p *DatanodeServiceNoteMetaListResult) GetSuccess() *NoteMetaListRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceNoteMetaListResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceNoteMetaListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceNoteMetaListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceNoteMetaListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &NoteMetaListRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceNoteMetaListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("noteMetaList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceNoteMetaListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceNoteMetaListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceNoteMetaListResult(%+v)", *p)
}

// Attributes:
//  - UID
type DatanodeServiceNoteListCountArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
}

func NewDatanodeServiceNoteListCountArgs() *DatanodeServiceNoteListCountArgs {
  return &DatanodeServiceNoteListCountArgs{}
}


func (p *DatanodeServiceNoteListCountArgs) GetUID() int64 {
  return p.UID
}
func (p *DatanodeServiceNoteListCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceNoteListCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceNoteListCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("noteListCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceNoteListCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceNoteListCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceNoteListCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceNoteListCountResult struct {
  Success *NoteListCountRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceNoteListCountResult() *DatanodeServiceNoteListCountResult {
  return &DatanodeServiceNoteListCountResult{}
}

var DatanodeServiceNoteListCountResult_Success_DEFAULT *NoteListCountRes
func (p *DatanodeServiceNoteListCountResult) GetSuccess() *NoteListCountRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceNoteListCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceNoteListCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceNoteListCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceNoteListCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &NoteListCountRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceNoteListCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("noteListCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceNoteListCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceNoteListCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceNoteListCountResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Nid
type DatanodeServiceNoteDataArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Nid int64 `thrift:"nid,2" db:"nid" json:"nid"`
}

func NewDatanodeServiceNoteDataArgs() *DatanodeServiceNoteDataArgs {
  return &DatanodeServiceNoteDataArgs{}
}


func (p *DatanodeServiceNoteDataArgs) GetUID() int64 {
  return p.UID
}

func (p *DatanodeServiceNoteDataArgs) GetNid() int64 {
  return p.Nid
}
func (p *DatanodeServiceNoteDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceNoteDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceNoteDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nid = v
}
  return nil
}

func (p *DatanodeServiceNoteDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("noteData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceNoteDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceNoteDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Nid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nid: ", p), err) }
  return err
}

func (p *DatanodeServiceNoteDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceNoteDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceNoteDataResult struct {
  Success *NoteDataRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceNoteDataResult() *DatanodeServiceNoteDataResult {
  return &DatanodeServiceNoteDataResult{}
}

var DatanodeServiceNoteDataResult_Success_DEFAULT *NoteDataRes
func (p *DatanodeServiceNoteDataResult) GetSuccess() *NoteDataRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceNoteDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceNoteDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceNoteDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceNoteDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &NoteDataRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceNoteDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("noteData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceNoteDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceNoteDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceNoteDataResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Nid
type DatanodeServiceNoteHtmlArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Nid int64 `thrift:"nid,2" db:"nid" json:"nid"`
}

func NewDatanodeServiceNoteHtmlArgs() *DatanodeServiceNoteHtmlArgs {
  return &DatanodeServiceNoteHtmlArgs{}
}


func (p *DatanodeServiceNoteHtmlArgs) GetUID() int64 {
  return p.UID
}

func (p *DatanodeServiceNoteHtmlArgs) GetNid() int64 {
  return p.Nid
}
func (p *DatanodeServiceNoteHtmlArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceNoteHtmlArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceNoteHtmlArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nid = v
}
  return nil
}

func (p *DatanodeServiceNoteHtmlArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("noteHtml_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceNoteHtmlArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceNoteHtmlArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Nid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nid: ", p), err) }
  return err
}

func (p *DatanodeServiceNoteHtmlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceNoteHtmlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceNoteHtmlResult struct {
  Success *NoteHTMLRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceNoteHtmlResult() *DatanodeServiceNoteHtmlResult {
  return &DatanodeServiceNoteHtmlResult{}
}

var DatanodeServiceNoteHtmlResult_Success_DEFAULT *NoteHTMLRes
func (p *DatanodeServiceNoteHtmlResult) GetSuccess() *NoteHTMLRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceNoteHtmlResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceNoteHtmlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceNoteHtmlResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceNoteHtmlResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &NoteHTMLRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceNoteHtmlResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("noteHtml_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceNoteHtmlResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceNoteHtmlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceNoteHtmlResult(%+v)", *p)
}

// Attributes:
//  - UID
type DatanodeServiceMomentsCountArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
}

func NewDatanodeServiceMomentsCountArgs() *DatanodeServiceMomentsCountArgs {
  return &DatanodeServiceMomentsCountArgs{}
}


func (p *DatanodeServiceMomentsCountArgs) GetUID() int64 {
  return p.UID
}
func (p *DatanodeServiceMomentsCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceMomentsCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceMomentsCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("momentsCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceMomentsCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceMomentsCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceMomentsCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceMomentsCountResult struct {
  Success *MomentsCountRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceMomentsCountResult() *DatanodeServiceMomentsCountResult {
  return &DatanodeServiceMomentsCountResult{}
}

var DatanodeServiceMomentsCountResult_Success_DEFAULT *MomentsCountRes
func (p *DatanodeServiceMomentsCountResult) GetSuccess() *MomentsCountRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceMomentsCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceMomentsCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceMomentsCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceMomentsCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &MomentsCountRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceMomentsCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("momentsCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceMomentsCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceMomentsCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceMomentsCountResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Moments
type DatanodeServiceMomentsAddArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Moments *Moments `thrift:"moments,2" db:"moments" json:"moments"`
}

func NewDatanodeServiceMomentsAddArgs() *DatanodeServiceMomentsAddArgs {
  return &DatanodeServiceMomentsAddArgs{}
}


func (p *DatanodeServiceMomentsAddArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceMomentsAddArgs_Moments_DEFAULT *Moments
func (p *DatanodeServiceMomentsAddArgs) GetMoments() *Moments {
  if !p.IsSetMoments() {
    return DatanodeServiceMomentsAddArgs_Moments_DEFAULT
  }
return p.Moments
}
func (p *DatanodeServiceMomentsAddArgs) IsSetMoments() bool {
  return p.Moments != nil
}

func (p *DatanodeServiceMomentsAddArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceMomentsAddArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceMomentsAddArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Moments = &Moments{}
  if err := p.Moments.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Moments), err)
  }
  return nil
}

func (p *DatanodeServiceMomentsAddArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("momentsAdd_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceMomentsAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceMomentsAddArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("moments", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:moments: ", p), err) }
  if err := p.Moments.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Moments), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:moments: ", p), err) }
  return err
}

func (p *DatanodeServiceMomentsAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceMomentsAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceMomentsAddResult struct {
  Success *AddMomentsRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceMomentsAddResult() *DatanodeServiceMomentsAddResult {
  return &DatanodeServiceMomentsAddResult{}
}

var DatanodeServiceMomentsAddResult_Success_DEFAULT *AddMomentsRes
func (p *DatanodeServiceMomentsAddResult) GetSuccess() *AddMomentsRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceMomentsAddResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceMomentsAddResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceMomentsAddResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceMomentsAddResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AddMomentsRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceMomentsAddResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("momentsAdd_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceMomentsAddResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceMomentsAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceMomentsAddResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Page
//  - Size
type DatanodeServiceMomentsListArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
}

func NewDatanodeServiceMomentsListArgs() *DatanodeServiceMomentsListArgs {
  return &DatanodeServiceMomentsListArgs{}
}


func (p *DatanodeServiceMomentsListArgs) GetUID() int64 {
  return p.UID
}

func (p *DatanodeServiceMomentsListArgs) GetPage() int32 {
  return p.Page
}

func (p *DatanodeServiceMomentsListArgs) GetSize() int32 {
  return p.Size
}
func (p *DatanodeServiceMomentsListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceMomentsListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceMomentsListArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *DatanodeServiceMomentsListArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *DatanodeServiceMomentsListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("momentsList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceMomentsListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceMomentsListArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *DatanodeServiceMomentsListArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *DatanodeServiceMomentsListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceMomentsListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceMomentsListResult struct {
  Success *MomentsListRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceMomentsListResult() *DatanodeServiceMomentsListResult {
  return &DatanodeServiceMomentsListResult{}
}

var DatanodeServiceMomentsListResult_Success_DEFAULT *MomentsListRes
func (p *DatanodeServiceMomentsListResult) GetSuccess() *MomentsListRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceMomentsListResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceMomentsListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceMomentsListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceMomentsListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &MomentsListRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceMomentsListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("momentsList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceMomentsListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceMomentsListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceMomentsListResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Path
type DatanodeServiceFileDirOneArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Path string `thrift:"path,2" db:"path" json:"path"`
}

func NewDatanodeServiceFileDirOneArgs() *DatanodeServiceFileDirOneArgs {
  return &DatanodeServiceFileDirOneArgs{}
}


func (p *DatanodeServiceFileDirOneArgs) GetUID() int64 {
  return p.UID
}

func (p *DatanodeServiceFileDirOneArgs) GetPath() string {
  return p.Path
}
func (p *DatanodeServiceFileDirOneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceFileDirOneArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceFileDirOneArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *DatanodeServiceFileDirOneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fileDirOne_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceFileDirOneArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceFileDirOneArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *DatanodeServiceFileDirOneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceFileDirOneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceFileDirOneResult struct {
  Success *FileDirRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceFileDirOneResult() *DatanodeServiceFileDirOneResult {
  return &DatanodeServiceFileDirOneResult{}
}

var DatanodeServiceFileDirOneResult_Success_DEFAULT *FileDirRes
func (p *DatanodeServiceFileDirOneResult) GetSuccess() *FileDirRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceFileDirOneResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceFileDirOneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceFileDirOneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceFileDirOneResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FileDirRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceFileDirOneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fileDirOne_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceFileDirOneResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceFileDirOneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceFileDirOneResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceFileDirAddArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Req *AddDirReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceFileDirAddArgs() *DatanodeServiceFileDirAddArgs {
  return &DatanodeServiceFileDirAddArgs{}
}


func (p *DatanodeServiceFileDirAddArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceFileDirAddArgs_Req_DEFAULT *AddDirReq
func (p *DatanodeServiceFileDirAddArgs) GetReq() *AddDirReq {
  if !p.IsSetReq() {
    return DatanodeServiceFileDirAddArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceFileDirAddArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceFileDirAddArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceFileDirAddArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceFileDirAddArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Req = &AddDirReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceFileDirAddArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fileDirAdd_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceFileDirAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceFileDirAddArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *DatanodeServiceFileDirAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceFileDirAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceFileDirAddResult struct {
  Success *AddDirRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceFileDirAddResult() *DatanodeServiceFileDirAddResult {
  return &DatanodeServiceFileDirAddResult{}
}

var DatanodeServiceFileDirAddResult_Success_DEFAULT *AddDirRes
func (p *DatanodeServiceFileDirAddResult) GetSuccess() *AddDirRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceFileDirAddResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceFileDirAddResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceFileDirAddResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceFileDirAddResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AddDirRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceFileDirAddResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fileDirAdd_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceFileDirAddResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceFileDirAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceFileDirAddResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceAddFileArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Req *AddFileReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceAddFileArgs() *DatanodeServiceAddFileArgs {
  return &DatanodeServiceAddFileArgs{}
}


func (p *DatanodeServiceAddFileArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceAddFileArgs_Req_DEFAULT *AddFileReq
func (p *DatanodeServiceAddFileArgs) GetReq() *AddFileReq {
  if !p.IsSetReq() {
    return DatanodeServiceAddFileArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceAddFileArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceAddFileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddFileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceAddFileArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Req = &AddFileReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceAddFileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addFile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceAddFileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *DatanodeServiceAddFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceAddFileResult struct {
  Success *AddFileRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceAddFileResult() *DatanodeServiceAddFileResult {
  return &DatanodeServiceAddFileResult{}
}

var DatanodeServiceAddFileResult_Success_DEFAULT *AddFileRes
func (p *DatanodeServiceAddFileResult) GetSuccess() *AddFileRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceAddFileResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceAddFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceAddFileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddFileResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AddFileRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceAddFileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addFile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddFileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceAddFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddFileResult(%+v)", *p)
}

// Attributes:
//  - UID
type DatanodeServiceYunSaveAttrArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
}

func NewDatanodeServiceYunSaveAttrArgs() *DatanodeServiceYunSaveAttrArgs {
  return &DatanodeServiceYunSaveAttrArgs{}
}


func (p *DatanodeServiceYunSaveAttrArgs) GetUID() int64 {
  return p.UID
}
func (p *DatanodeServiceYunSaveAttrArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceYunSaveAttrArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceYunSaveAttrArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("yunSaveAttr_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceYunSaveAttrArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceYunSaveAttrArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceYunSaveAttrArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceYunSaveAttrResult struct {
  Success *FileAttrRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceYunSaveAttrResult() *DatanodeServiceYunSaveAttrResult {
  return &DatanodeServiceYunSaveAttrResult{}
}

var DatanodeServiceYunSaveAttrResult_Success_DEFAULT *FileAttrRes
func (p *DatanodeServiceYunSaveAttrResult) GetSuccess() *FileAttrRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceYunSaveAttrResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceYunSaveAttrResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceYunSaveAttrResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceYunSaveAttrResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FileAttrRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceYunSaveAttrResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("yunSaveAttr_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceYunSaveAttrResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceYunSaveAttrResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceYunSaveAttrResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Path
type DatanodeServiceThumbnailArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Path string `thrift:"path,2" db:"path" json:"path"`
}

func NewDatanodeServiceThumbnailArgs() *DatanodeServiceThumbnailArgs {
  return &DatanodeServiceThumbnailArgs{}
}


func (p *DatanodeServiceThumbnailArgs) GetUID() int64 {
  return p.UID
}

func (p *DatanodeServiceThumbnailArgs) GetPath() string {
  return p.Path
}
func (p *DatanodeServiceThumbnailArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceThumbnailArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceThumbnailArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *DatanodeServiceThumbnailArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("thumbnail_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceThumbnailArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceThumbnailArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *DatanodeServiceThumbnailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceThumbnailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceThumbnailResult struct {
  Success *ThumbnailRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceThumbnailResult() *DatanodeServiceThumbnailResult {
  return &DatanodeServiceThumbnailResult{}
}

var DatanodeServiceThumbnailResult_Success_DEFAULT *ThumbnailRes
func (p *DatanodeServiceThumbnailResult) GetSuccess() *ThumbnailRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceThumbnailResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceThumbnailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceThumbnailResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceThumbnailResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ThumbnailRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceThumbnailResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("thumbnail_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceThumbnailResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceThumbnailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceThumbnailResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSetKeyValueArgs struct {
  Req *SetKeyvalueReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSetKeyValueArgs() *DatanodeServiceSetKeyValueArgs {
  return &DatanodeServiceSetKeyValueArgs{}
}

var DatanodeServiceSetKeyValueArgs_Req_DEFAULT *SetKeyvalueReq
func (p *DatanodeServiceSetKeyValueArgs) GetReq() *SetKeyvalueReq {
  if !p.IsSetReq() {
    return DatanodeServiceSetKeyValueArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceSetKeyValueArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceSetKeyValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSetKeyValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SetKeyvalueReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceSetKeyValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setKeyValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSetKeyValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSetKeyValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSetKeyValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSetKeyValueResult struct {
  Success *SetKeyvalueRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSetKeyValueResult() *DatanodeServiceSetKeyValueResult {
  return &DatanodeServiceSetKeyValueResult{}
}

var DatanodeServiceSetKeyValueResult_Success_DEFAULT *SetKeyvalueRes
func (p *DatanodeServiceSetKeyValueResult) GetSuccess() *SetKeyvalueRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSetKeyValueResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSetKeyValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSetKeyValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSetKeyValueResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SetKeyvalueRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSetKeyValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setKeyValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSetKeyValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSetKeyValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSetKeyValueResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceGetKeyValueArgs struct {
  Req *GetKeyvalueReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceGetKeyValueArgs() *DatanodeServiceGetKeyValueArgs {
  return &DatanodeServiceGetKeyValueArgs{}
}

var DatanodeServiceGetKeyValueArgs_Req_DEFAULT *GetKeyvalueReq
func (p *DatanodeServiceGetKeyValueArgs) GetReq() *GetKeyvalueReq {
  if !p.IsSetReq() {
    return DatanodeServiceGetKeyValueArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceGetKeyValueArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceGetKeyValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGetKeyValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &GetKeyvalueReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceGetKeyValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getKeyValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGetKeyValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceGetKeyValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGetKeyValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceGetKeyValueResult struct {
  Success *GetKeyvalueRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceGetKeyValueResult() *DatanodeServiceGetKeyValueResult {
  return &DatanodeServiceGetKeyValueResult{}
}

var DatanodeServiceGetKeyValueResult_Success_DEFAULT *GetKeyvalueRes
func (p *DatanodeServiceGetKeyValueResult) GetSuccess() *GetKeyvalueRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceGetKeyValueResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceGetKeyValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceGetKeyValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGetKeyValueResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetKeyvalueRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceGetKeyValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getKeyValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGetKeyValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceGetKeyValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGetKeyValueResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceDelKeyValueArgs struct {
  Req *DelKeyvalueReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceDelKeyValueArgs() *DatanodeServiceDelKeyValueArgs {
  return &DatanodeServiceDelKeyValueArgs{}
}

var DatanodeServiceDelKeyValueArgs_Req_DEFAULT *DelKeyvalueReq
func (p *DatanodeServiceDelKeyValueArgs) GetReq() *DelKeyvalueReq {
  if !p.IsSetReq() {
    return DatanodeServiceDelKeyValueArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceDelKeyValueArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceDelKeyValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceDelKeyValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &DelKeyvalueReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceDelKeyValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delKeyValue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceDelKeyValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceDelKeyValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceDelKeyValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceDelKeyValueResult struct {
  Success *DelKeyvalueRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceDelKeyValueResult() *DatanodeServiceDelKeyValueResult {
  return &DatanodeServiceDelKeyValueResult{}
}

var DatanodeServiceDelKeyValueResult_Success_DEFAULT *DelKeyvalueRes
func (p *DatanodeServiceDelKeyValueResult) GetSuccess() *DelKeyvalueRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceDelKeyValueResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceDelKeyValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceDelKeyValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceDelKeyValueResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DelKeyvalueRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceDelKeyValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delKeyValue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceDelKeyValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceDelKeyValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceDelKeyValueResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceQuestionVersionArgs struct {
  Req *common.QuestionQuery `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceQuestionVersionArgs() *DatanodeServiceQuestionVersionArgs {
  return &DatanodeServiceQuestionVersionArgs{}
}

var DatanodeServiceQuestionVersionArgs_Req_DEFAULT *common.QuestionQuery
func (p *DatanodeServiceQuestionVersionArgs) GetReq() *common.QuestionQuery {
  if !p.IsSetReq() {
    return DatanodeServiceQuestionVersionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceQuestionVersionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceQuestionVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionVersionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &common.QuestionQuery{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_version_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceQuestionVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceQuestionVersionResult struct {
  Success *VersionRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceQuestionVersionResult() *DatanodeServiceQuestionVersionResult {
  return &DatanodeServiceQuestionVersionResult{}
}

var DatanodeServiceQuestionVersionResult_Success_DEFAULT *VersionRes
func (p *DatanodeServiceQuestionVersionResult) GetSuccess() *VersionRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceQuestionVersionResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceQuestionVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceQuestionVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &VersionRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_version_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceQuestionVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionVersionResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceQuestionChapterArgs struct {
  Req *common.QuestionQuery `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceQuestionChapterArgs() *DatanodeServiceQuestionChapterArgs {
  return &DatanodeServiceQuestionChapterArgs{}
}

var DatanodeServiceQuestionChapterArgs_Req_DEFAULT *common.QuestionQuery
func (p *DatanodeServiceQuestionChapterArgs) GetReq() *common.QuestionQuery {
  if !p.IsSetReq() {
    return DatanodeServiceQuestionChapterArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceQuestionChapterArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceQuestionChapterArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionChapterArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &common.QuestionQuery{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionChapterArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_chapter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionChapterArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceQuestionChapterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionChapterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceQuestionChapterResult struct {
  Success *ChapterRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceQuestionChapterResult() *DatanodeServiceQuestionChapterResult {
  return &DatanodeServiceQuestionChapterResult{}
}

var DatanodeServiceQuestionChapterResult_Success_DEFAULT *ChapterRes
func (p *DatanodeServiceQuestionChapterResult) GetSuccess() *ChapterRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceQuestionChapterResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceQuestionChapterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceQuestionChapterResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionChapterResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ChapterRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionChapterResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_chapter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionChapterResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceQuestionChapterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionChapterResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSubjectNameArgs struct {
  Req string `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSubjectNameArgs() *DatanodeServiceSubjectNameArgs {
  return &DatanodeServiceSubjectNameArgs{}
}


func (p *DatanodeServiceSubjectNameArgs) GetReq() string {
  return p.Req
}
func (p *DatanodeServiceSubjectNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Req = v
}
  return nil
}

func (p *DatanodeServiceSubjectNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSubjectNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := oprot.WriteString(string(p.Req)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSubjectNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSubjectNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSubjectNameResult struct {
  Success *SubjectNameRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSubjectNameResult() *DatanodeServiceSubjectNameResult {
  return &DatanodeServiceSubjectNameResult{}
}

var DatanodeServiceSubjectNameResult_Success_DEFAULT *SubjectNameRes
func (p *DatanodeServiceSubjectNameResult) GetSuccess() *SubjectNameRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSubjectNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSubjectNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSubjectNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectNameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SubjectNameRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSubjectNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSubjectNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSubjectNameResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceQuestionSourceArgs struct {
  Req *common.QuestionQuery `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceQuestionSourceArgs() *DatanodeServiceQuestionSourceArgs {
  return &DatanodeServiceQuestionSourceArgs{}
}

var DatanodeServiceQuestionSourceArgs_Req_DEFAULT *common.QuestionQuery
func (p *DatanodeServiceQuestionSourceArgs) GetReq() *common.QuestionQuery {
  if !p.IsSetReq() {
    return DatanodeServiceQuestionSourceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceQuestionSourceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceQuestionSourceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionSourceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &common.QuestionQuery{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionSourceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_source_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionSourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceQuestionSourceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionSourceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceQuestionSourceResult struct {
  Success *SourceRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceQuestionSourceResult() *DatanodeServiceQuestionSourceResult {
  return &DatanodeServiceQuestionSourceResult{}
}

var DatanodeServiceQuestionSourceResult_Success_DEFAULT *SourceRes
func (p *DatanodeServiceQuestionSourceResult) GetSuccess() *SourceRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceQuestionSourceResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceQuestionSourceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceQuestionSourceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionSourceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SourceRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionSourceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_source_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionSourceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceQuestionSourceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionSourceResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceQuestionTixingArgs struct {
  Req *common.QuestionQuery `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceQuestionTixingArgs() *DatanodeServiceQuestionTixingArgs {
  return &DatanodeServiceQuestionTixingArgs{}
}

var DatanodeServiceQuestionTixingArgs_Req_DEFAULT *common.QuestionQuery
func (p *DatanodeServiceQuestionTixingArgs) GetReq() *common.QuestionQuery {
  if !p.IsSetReq() {
    return DatanodeServiceQuestionTixingArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceQuestionTixingArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceQuestionTixingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTixingArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &common.QuestionQuery{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTixingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_tixing_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionTixingArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceQuestionTixingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionTixingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceQuestionTixingResult struct {
  Success *TixingRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceQuestionTixingResult() *DatanodeServiceQuestionTixingResult {
  return &DatanodeServiceQuestionTixingResult{}
}

var DatanodeServiceQuestionTixingResult_Success_DEFAULT *TixingRes
func (p *DatanodeServiceQuestionTixingResult) GetSuccess() *TixingRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceQuestionTixingResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceQuestionTixingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceQuestionTixingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTixingResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TixingRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTixingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_tixing_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionTixingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceQuestionTixingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionTixingResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceQuestionTimuCountArgs struct {
  Req *common.QuestionQuery `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceQuestionTimuCountArgs() *DatanodeServiceQuestionTimuCountArgs {
  return &DatanodeServiceQuestionTimuCountArgs{}
}

var DatanodeServiceQuestionTimuCountArgs_Req_DEFAULT *common.QuestionQuery
func (p *DatanodeServiceQuestionTimuCountArgs) GetReq() *common.QuestionQuery {
  if !p.IsSetReq() {
    return DatanodeServiceQuestionTimuCountArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceQuestionTimuCountArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceQuestionTimuCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &common.QuestionQuery{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_timu_count_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionTimuCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceQuestionTimuCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionTimuCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceQuestionTimuCountResult struct {
  Success *TimuCountRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceQuestionTimuCountResult() *DatanodeServiceQuestionTimuCountResult {
  return &DatanodeServiceQuestionTimuCountResult{}
}

var DatanodeServiceQuestionTimuCountResult_Success_DEFAULT *TimuCountRes
func (p *DatanodeServiceQuestionTimuCountResult) GetSuccess() *TimuCountRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceQuestionTimuCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceQuestionTimuCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceQuestionTimuCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TimuCountRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_timu_count_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionTimuCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceQuestionTimuCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionTimuCountResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceQuestionTimuArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Req *common.QuestionQuery `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceQuestionTimuArgs() *DatanodeServiceQuestionTimuArgs {
  return &DatanodeServiceQuestionTimuArgs{}
}


func (p *DatanodeServiceQuestionTimuArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceQuestionTimuArgs_Req_DEFAULT *common.QuestionQuery
func (p *DatanodeServiceQuestionTimuArgs) GetReq() *common.QuestionQuery {
  if !p.IsSetReq() {
    return DatanodeServiceQuestionTimuArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceQuestionTimuArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceQuestionTimuArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceQuestionTimuArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Req = &common.QuestionQuery{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_timu_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionTimuArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceQuestionTimuArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *DatanodeServiceQuestionTimuArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionTimuArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceQuestionTimuResult struct {
  Success *TimuRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceQuestionTimuResult() *DatanodeServiceQuestionTimuResult {
  return &DatanodeServiceQuestionTimuResult{}
}

var DatanodeServiceQuestionTimuResult_Success_DEFAULT *TimuRes
func (p *DatanodeServiceQuestionTimuResult) GetSuccess() *TimuRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceQuestionTimuResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceQuestionTimuResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceQuestionTimuResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TimuRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_timu_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionTimuResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceQuestionTimuResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionTimuResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceQuestionTimuByIDArgs struct {
  Req *TimuByIDReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceQuestionTimuByIDArgs() *DatanodeServiceQuestionTimuByIDArgs {
  return &DatanodeServiceQuestionTimuByIDArgs{}
}

var DatanodeServiceQuestionTimuByIDArgs_Req_DEFAULT *TimuByIDReq
func (p *DatanodeServiceQuestionTimuByIDArgs) GetReq() *TimuByIDReq {
  if !p.IsSetReq() {
    return DatanodeServiceQuestionTimuByIDArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceQuestionTimuByIDArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceQuestionTimuByIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuByIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &TimuByIDReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuByIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_timu_by_id_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionTimuByIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceQuestionTimuByIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionTimuByIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceQuestionTimuByIDResult struct {
  Success *TimuByIDRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceQuestionTimuByIDResult() *DatanodeServiceQuestionTimuByIDResult {
  return &DatanodeServiceQuestionTimuByIDResult{}
}

var DatanodeServiceQuestionTimuByIDResult_Success_DEFAULT *TimuByIDRes
func (p *DatanodeServiceQuestionTimuByIDResult) GetSuccess() *TimuByIDRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceQuestionTimuByIDResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceQuestionTimuByIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceQuestionTimuByIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuByIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TimuByIDRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuByIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_timu_by_id_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionTimuByIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceQuestionTimuByIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionTimuByIDResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Req
type DatanodeServiceCollectTimuArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
  Req *CollectReq `thrift:"req,2" db:"req" json:"req"`
}

func NewDatanodeServiceCollectTimuArgs() *DatanodeServiceCollectTimuArgs {
  return &DatanodeServiceCollectTimuArgs{}
}


func (p *DatanodeServiceCollectTimuArgs) GetUID() int64 {
  return p.UID
}
var DatanodeServiceCollectTimuArgs_Req_DEFAULT *CollectReq
func (p *DatanodeServiceCollectTimuArgs) GetReq() *CollectReq {
  if !p.IsSetReq() {
    return DatanodeServiceCollectTimuArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceCollectTimuArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceCollectTimuArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceCollectTimuArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *DatanodeServiceCollectTimuArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Req = &CollectReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceCollectTimuArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("collect_timu_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceCollectTimuArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *DatanodeServiceCollectTimuArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *DatanodeServiceCollectTimuArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceCollectTimuArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceCollectTimuResult struct {
  Success *CollectRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceCollectTimuResult() *DatanodeServiceCollectTimuResult {
  return &DatanodeServiceCollectTimuResult{}
}

var DatanodeServiceCollectTimuResult_Success_DEFAULT *CollectRes
func (p *DatanodeServiceCollectTimuResult) GetSuccess() *CollectRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceCollectTimuResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceCollectTimuResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceCollectTimuResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceCollectTimuResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CollectRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceCollectTimuResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("collect_timu_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceCollectTimuResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceCollectTimuResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceCollectTimuResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceQueryCollectTimuArgs struct {
  Req *CollectListReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceQueryCollectTimuArgs() *DatanodeServiceQueryCollectTimuArgs {
  return &DatanodeServiceQueryCollectTimuArgs{}
}

var DatanodeServiceQueryCollectTimuArgs_Req_DEFAULT *CollectListReq
func (p *DatanodeServiceQueryCollectTimuArgs) GetReq() *CollectListReq {
  if !p.IsSetReq() {
    return DatanodeServiceQueryCollectTimuArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceQueryCollectTimuArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceQueryCollectTimuArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQueryCollectTimuArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &CollectListReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceQueryCollectTimuArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("query_collect_timu_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQueryCollectTimuArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceQueryCollectTimuArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQueryCollectTimuArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceQueryCollectTimuResult struct {
  Success *CollectListRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceQueryCollectTimuResult() *DatanodeServiceQueryCollectTimuResult {
  return &DatanodeServiceQueryCollectTimuResult{}
}

var DatanodeServiceQueryCollectTimuResult_Success_DEFAULT *CollectListRes
func (p *DatanodeServiceQueryCollectTimuResult) GetSuccess() *CollectListRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceQueryCollectTimuResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceQueryCollectTimuResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceQueryCollectTimuResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQueryCollectTimuResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CollectListRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceQueryCollectTimuResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("query_collect_timu_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQueryCollectTimuResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceQueryCollectTimuResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQueryCollectTimuResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceModifyQuestionArgs struct {
  Req *ModifyReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceModifyQuestionArgs() *DatanodeServiceModifyQuestionArgs {
  return &DatanodeServiceModifyQuestionArgs{}
}

var DatanodeServiceModifyQuestionArgs_Req_DEFAULT *ModifyReq
func (p *DatanodeServiceModifyQuestionArgs) GetReq() *ModifyReq {
  if !p.IsSetReq() {
    return DatanodeServiceModifyQuestionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceModifyQuestionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceModifyQuestionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceModifyQuestionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &ModifyReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceModifyQuestionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modify_question_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceModifyQuestionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceModifyQuestionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceModifyQuestionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceModifyQuestionResult struct {
  Success *ModifyRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceModifyQuestionResult() *DatanodeServiceModifyQuestionResult {
  return &DatanodeServiceModifyQuestionResult{}
}

var DatanodeServiceModifyQuestionResult_Success_DEFAULT *ModifyRes
func (p *DatanodeServiceModifyQuestionResult) GetSuccess() *ModifyRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceModifyQuestionResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceModifyQuestionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceModifyQuestionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceModifyQuestionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ModifyRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceModifyQuestionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modify_question_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceModifyQuestionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceModifyQuestionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceModifyQuestionResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceModifyListArgs struct {
  Req *ModifyListReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceModifyListArgs() *DatanodeServiceModifyListArgs {
  return &DatanodeServiceModifyListArgs{}
}

var DatanodeServiceModifyListArgs_Req_DEFAULT *ModifyListReq
func (p *DatanodeServiceModifyListArgs) GetReq() *ModifyListReq {
  if !p.IsSetReq() {
    return DatanodeServiceModifyListArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceModifyListArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceModifyListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceModifyListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &ModifyListReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceModifyListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modify_list_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceModifyListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceModifyListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceModifyListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceModifyListResult struct {
  Success *ModifyListRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceModifyListResult() *DatanodeServiceModifyListResult {
  return &DatanodeServiceModifyListResult{}
}

var DatanodeServiceModifyListResult_Success_DEFAULT *ModifyListRes
func (p *DatanodeServiceModifyListResult) GetSuccess() *ModifyListRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceModifyListResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceModifyListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceModifyListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceModifyListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ModifyListRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceModifyListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modify_list_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceModifyListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceModifyListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceModifyListResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceModifyCountArgs struct {
  Req *ModifyCountReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceModifyCountArgs() *DatanodeServiceModifyCountArgs {
  return &DatanodeServiceModifyCountArgs{}
}

var DatanodeServiceModifyCountArgs_Req_DEFAULT *ModifyCountReq
func (p *DatanodeServiceModifyCountArgs) GetReq() *ModifyCountReq {
  if !p.IsSetReq() {
    return DatanodeServiceModifyCountArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceModifyCountArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceModifyCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceModifyCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &ModifyCountReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceModifyCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modify_count_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceModifyCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceModifyCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceModifyCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceModifyCountResult struct {
  Success *ModifyCountRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceModifyCountResult() *DatanodeServiceModifyCountResult {
  return &DatanodeServiceModifyCountResult{}
}

var DatanodeServiceModifyCountResult_Success_DEFAULT *ModifyCountRes
func (p *DatanodeServiceModifyCountResult) GetSuccess() *ModifyCountRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceModifyCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceModifyCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceModifyCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceModifyCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ModifyCountRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceModifyCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modify_count_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceModifyCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceModifyCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceModifyCountResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceQuestionTimuAddArgs struct {
  Req *TimuAddReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceQuestionTimuAddArgs() *DatanodeServiceQuestionTimuAddArgs {
  return &DatanodeServiceQuestionTimuAddArgs{}
}

var DatanodeServiceQuestionTimuAddArgs_Req_DEFAULT *TimuAddReq
func (p *DatanodeServiceQuestionTimuAddArgs) GetReq() *TimuAddReq {
  if !p.IsSetReq() {
    return DatanodeServiceQuestionTimuAddArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceQuestionTimuAddArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceQuestionTimuAddArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuAddArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &TimuAddReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuAddArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_timu_add_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionTimuAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceQuestionTimuAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionTimuAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceQuestionTimuAddResult struct {
  Success *TimuAddRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceQuestionTimuAddResult() *DatanodeServiceQuestionTimuAddResult {
  return &DatanodeServiceQuestionTimuAddResult{}
}

var DatanodeServiceQuestionTimuAddResult_Success_DEFAULT *TimuAddRes
func (p *DatanodeServiceQuestionTimuAddResult) GetSuccess() *TimuAddRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceQuestionTimuAddResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceQuestionTimuAddResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceQuestionTimuAddResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuAddResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TimuAddRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceQuestionTimuAddResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("question_timu_add_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceQuestionTimuAddResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceQuestionTimuAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceQuestionTimuAddResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceAddListArgs struct {
  Req *AddListReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceAddListArgs() *DatanodeServiceAddListArgs {
  return &DatanodeServiceAddListArgs{}
}

var DatanodeServiceAddListArgs_Req_DEFAULT *AddListReq
func (p *DatanodeServiceAddListArgs) GetReq() *AddListReq {
  if !p.IsSetReq() {
    return DatanodeServiceAddListArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceAddListArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceAddListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &AddListReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceAddListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_list_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceAddListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceAddListResult struct {
  Success *AddListRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceAddListResult() *DatanodeServiceAddListResult {
  return &DatanodeServiceAddListResult{}
}

var DatanodeServiceAddListResult_Success_DEFAULT *AddListRes
func (p *DatanodeServiceAddListResult) GetSuccess() *AddListRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceAddListResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceAddListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceAddListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AddListRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceAddListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_list_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceAddListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddListResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceAddCountArgs struct {
  Req *AddCountReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceAddCountArgs() *DatanodeServiceAddCountArgs {
  return &DatanodeServiceAddCountArgs{}
}

var DatanodeServiceAddCountArgs_Req_DEFAULT *AddCountReq
func (p *DatanodeServiceAddCountArgs) GetReq() *AddCountReq {
  if !p.IsSetReq() {
    return DatanodeServiceAddCountArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceAddCountArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceAddCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &AddCountReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceAddCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_count_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceAddCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceAddCountResult struct {
  Success *AddCountRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceAddCountResult() *DatanodeServiceAddCountResult {
  return &DatanodeServiceAddCountResult{}
}

var DatanodeServiceAddCountResult_Success_DEFAULT *AddCountRes
func (p *DatanodeServiceAddCountResult) GetSuccess() *AddCountRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceAddCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceAddCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceAddCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceAddCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AddCountRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceAddCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_count_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceAddCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceAddCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceAddCountResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceApproveModifyArgs struct {
  Req *ApproveModifyReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceApproveModifyArgs() *DatanodeServiceApproveModifyArgs {
  return &DatanodeServiceApproveModifyArgs{}
}

var DatanodeServiceApproveModifyArgs_Req_DEFAULT *ApproveModifyReq
func (p *DatanodeServiceApproveModifyArgs) GetReq() *ApproveModifyReq {
  if !p.IsSetReq() {
    return DatanodeServiceApproveModifyArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceApproveModifyArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceApproveModifyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceApproveModifyArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &ApproveModifyReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceApproveModifyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("approve_modify_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceApproveModifyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceApproveModifyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceApproveModifyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceApproveModifyResult struct {
  Success *ApproveModifyRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceApproveModifyResult() *DatanodeServiceApproveModifyResult {
  return &DatanodeServiceApproveModifyResult{}
}

var DatanodeServiceApproveModifyResult_Success_DEFAULT *ApproveModifyRes
func (p *DatanodeServiceApproveModifyResult) GetSuccess() *ApproveModifyRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceApproveModifyResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceApproveModifyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceApproveModifyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceApproveModifyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ApproveModifyRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceApproveModifyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("approve_modify_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceApproveModifyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceApproveModifyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceApproveModifyResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceOnSearchArgs struct {
  Req *SearchReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceOnSearchArgs() *DatanodeServiceOnSearchArgs {
  return &DatanodeServiceOnSearchArgs{}
}

var DatanodeServiceOnSearchArgs_Req_DEFAULT *SearchReq
func (p *DatanodeServiceOnSearchArgs) GetReq() *SearchReq {
  if !p.IsSetReq() {
    return DatanodeServiceOnSearchArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceOnSearchArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceOnSearchArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceOnSearchArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SearchReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceOnSearchArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("on_search_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceOnSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceOnSearchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceOnSearchArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceOnSearchResult struct {
  Success *SearchRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceOnSearchResult() *DatanodeServiceOnSearchResult {
  return &DatanodeServiceOnSearchResult{}
}

var DatanodeServiceOnSearchResult_Success_DEFAULT *SearchRes
func (p *DatanodeServiceOnSearchResult) GetSuccess() *SearchRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceOnSearchResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceOnSearchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceOnSearchResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceOnSearchResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SearchRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceOnSearchResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("on_search_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceOnSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceOnSearchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceOnSearchResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceGradeCateAddArgs struct {
  Req *common.GradeCate `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceGradeCateAddArgs() *DatanodeServiceGradeCateAddArgs {
  return &DatanodeServiceGradeCateAddArgs{}
}

var DatanodeServiceGradeCateAddArgs_Req_DEFAULT *common.GradeCate
func (p *DatanodeServiceGradeCateAddArgs) GetReq() *common.GradeCate {
  if !p.IsSetReq() {
    return DatanodeServiceGradeCateAddArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceGradeCateAddArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceGradeCateAddArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGradeCateAddArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &common.GradeCate{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceGradeCateAddArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_cate_add_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGradeCateAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceGradeCateAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGradeCateAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceGradeCateAddResult struct {
  Success *AddGradeCateRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceGradeCateAddResult() *DatanodeServiceGradeCateAddResult {
  return &DatanodeServiceGradeCateAddResult{}
}

var DatanodeServiceGradeCateAddResult_Success_DEFAULT *AddGradeCateRes
func (p *DatanodeServiceGradeCateAddResult) GetSuccess() *AddGradeCateRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceGradeCateAddResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceGradeCateAddResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceGradeCateAddResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGradeCateAddResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AddGradeCateRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceGradeCateAddResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_cate_add_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGradeCateAddResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceGradeCateAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGradeCateAddResult(%+v)", *p)
}

type DatanodeServiceGradeCateCountArgs struct {
}

func NewDatanodeServiceGradeCateCountArgs() *DatanodeServiceGradeCateCountArgs {
  return &DatanodeServiceGradeCateCountArgs{}
}

func (p *DatanodeServiceGradeCateCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGradeCateCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_cate_count_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGradeCateCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGradeCateCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceGradeCateCountResult struct {
  Success *GradeCateCountRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceGradeCateCountResult() *DatanodeServiceGradeCateCountResult {
  return &DatanodeServiceGradeCateCountResult{}
}

var DatanodeServiceGradeCateCountResult_Success_DEFAULT *GradeCateCountRes
func (p *DatanodeServiceGradeCateCountResult) GetSuccess() *GradeCateCountRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceGradeCateCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceGradeCateCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceGradeCateCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGradeCateCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GradeCateCountRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceGradeCateCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_cate_count_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGradeCateCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceGradeCateCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGradeCateCountResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceGradeCateListArgs struct {
  Req *GradeCateListReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceGradeCateListArgs() *DatanodeServiceGradeCateListArgs {
  return &DatanodeServiceGradeCateListArgs{}
}

var DatanodeServiceGradeCateListArgs_Req_DEFAULT *GradeCateListReq
func (p *DatanodeServiceGradeCateListArgs) GetReq() *GradeCateListReq {
  if !p.IsSetReq() {
    return DatanodeServiceGradeCateListArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceGradeCateListArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceGradeCateListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGradeCateListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &GradeCateListReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceGradeCateListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_cate_list_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGradeCateListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceGradeCateListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGradeCateListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceGradeCateListResult struct {
  Success *GradeCateListRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceGradeCateListResult() *DatanodeServiceGradeCateListResult {
  return &DatanodeServiceGradeCateListResult{}
}

var DatanodeServiceGradeCateListResult_Success_DEFAULT *GradeCateListRes
func (p *DatanodeServiceGradeCateListResult) GetSuccess() *GradeCateListRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceGradeCateListResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceGradeCateListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceGradeCateListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGradeCateListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GradeCateListRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceGradeCateListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_cate_list_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGradeCateListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceGradeCateListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGradeCateListResult(%+v)", *p)
}

type DatanodeServiceHomeBlackDataArgs struct {
}

func NewDatanodeServiceHomeBlackDataArgs() *DatanodeServiceHomeBlackDataArgs {
  return &DatanodeServiceHomeBlackDataArgs{}
}

func (p *DatanodeServiceHomeBlackDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceHomeBlackDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("home_black_data_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceHomeBlackDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceHomeBlackDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceHomeBlackDataResult struct {
  Success *HomeBlackDataRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceHomeBlackDataResult() *DatanodeServiceHomeBlackDataResult {
  return &DatanodeServiceHomeBlackDataResult{}
}

var DatanodeServiceHomeBlackDataResult_Success_DEFAULT *HomeBlackDataRes
func (p *DatanodeServiceHomeBlackDataResult) GetSuccess() *HomeBlackDataRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceHomeBlackDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceHomeBlackDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceHomeBlackDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceHomeBlackDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HomeBlackDataRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceHomeBlackDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("home_black_data_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceHomeBlackDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceHomeBlackDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceHomeBlackDataResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceGradeSubjectArgs struct {
  Req *GradeSubjectReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceGradeSubjectArgs() *DatanodeServiceGradeSubjectArgs {
  return &DatanodeServiceGradeSubjectArgs{}
}

var DatanodeServiceGradeSubjectArgs_Req_DEFAULT *GradeSubjectReq
func (p *DatanodeServiceGradeSubjectArgs) GetReq() *GradeSubjectReq {
  if !p.IsSetReq() {
    return DatanodeServiceGradeSubjectArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceGradeSubjectArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceGradeSubjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGradeSubjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &GradeSubjectReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceGradeSubjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_subject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGradeSubjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceGradeSubjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGradeSubjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceGradeSubjectResult struct {
  Success *GradeSubjectRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceGradeSubjectResult() *DatanodeServiceGradeSubjectResult {
  return &DatanodeServiceGradeSubjectResult{}
}

var DatanodeServiceGradeSubjectResult_Success_DEFAULT *GradeSubjectRes
func (p *DatanodeServiceGradeSubjectResult) GetSuccess() *GradeSubjectRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceGradeSubjectResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceGradeSubjectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceGradeSubjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGradeSubjectResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GradeSubjectRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceGradeSubjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grade_subject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGradeSubjectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceGradeSubjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGradeSubjectResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSchoolRollAddArgs struct {
  Req *common.SchoolRoll `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSchoolRollAddArgs() *DatanodeServiceSchoolRollAddArgs {
  return &DatanodeServiceSchoolRollAddArgs{}
}

var DatanodeServiceSchoolRollAddArgs_Req_DEFAULT *common.SchoolRoll
func (p *DatanodeServiceSchoolRollAddArgs) GetReq() *common.SchoolRoll {
  if !p.IsSetReq() {
    return DatanodeServiceSchoolRollAddArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceSchoolRollAddArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceSchoolRollAddArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSchoolRollAddArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &common.SchoolRoll{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceSchoolRollAddArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("school_roll_add_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSchoolRollAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSchoolRollAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSchoolRollAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSchoolRollAddResult struct {
  Success *SchoolRollAddRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSchoolRollAddResult() *DatanodeServiceSchoolRollAddResult {
  return &DatanodeServiceSchoolRollAddResult{}
}

var DatanodeServiceSchoolRollAddResult_Success_DEFAULT *SchoolRollAddRes
func (p *DatanodeServiceSchoolRollAddResult) GetSuccess() *SchoolRollAddRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSchoolRollAddResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSchoolRollAddResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSchoolRollAddResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSchoolRollAddResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SchoolRollAddRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSchoolRollAddResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("school_roll_add_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSchoolRollAddResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSchoolRollAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSchoolRollAddResult(%+v)", *p)
}

type DatanodeServiceSchoolRollCountArgs struct {
}

func NewDatanodeServiceSchoolRollCountArgs() *DatanodeServiceSchoolRollCountArgs {
  return &DatanodeServiceSchoolRollCountArgs{}
}

func (p *DatanodeServiceSchoolRollCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSchoolRollCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("school_roll_count_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSchoolRollCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSchoolRollCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSchoolRollCountResult struct {
  Success *SchoolRollCountRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSchoolRollCountResult() *DatanodeServiceSchoolRollCountResult {
  return &DatanodeServiceSchoolRollCountResult{}
}

var DatanodeServiceSchoolRollCountResult_Success_DEFAULT *SchoolRollCountRes
func (p *DatanodeServiceSchoolRollCountResult) GetSuccess() *SchoolRollCountRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSchoolRollCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSchoolRollCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSchoolRollCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSchoolRollCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SchoolRollCountRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSchoolRollCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("school_roll_count_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSchoolRollCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSchoolRollCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSchoolRollCountResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSchoolListArgs struct {
  Req *SchoolRollListReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSchoolListArgs() *DatanodeServiceSchoolListArgs {
  return &DatanodeServiceSchoolListArgs{}
}

var DatanodeServiceSchoolListArgs_Req_DEFAULT *SchoolRollListReq
func (p *DatanodeServiceSchoolListArgs) GetReq() *SchoolRollListReq {
  if !p.IsSetReq() {
    return DatanodeServiceSchoolListArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceSchoolListArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceSchoolListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSchoolListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SchoolRollListReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceSchoolListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("school_list_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSchoolListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSchoolListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSchoolListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSchoolListResult struct {
  Success *SchoolRollListRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSchoolListResult() *DatanodeServiceSchoolListResult {
  return &DatanodeServiceSchoolListResult{}
}

var DatanodeServiceSchoolListResult_Success_DEFAULT *SchoolRollListRes
func (p *DatanodeServiceSchoolListResult) GetSuccess() *SchoolRollListRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSchoolListResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSchoolListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSchoolListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSchoolListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SchoolRollListRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSchoolListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("school_list_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSchoolListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSchoolListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSchoolListResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSubjectCateAddArgs struct {
  Req *common.SubjectCate `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSubjectCateAddArgs() *DatanodeServiceSubjectCateAddArgs {
  return &DatanodeServiceSubjectCateAddArgs{}
}

var DatanodeServiceSubjectCateAddArgs_Req_DEFAULT *common.SubjectCate
func (p *DatanodeServiceSubjectCateAddArgs) GetReq() *common.SubjectCate {
  if !p.IsSetReq() {
    return DatanodeServiceSubjectCateAddArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceSubjectCateAddArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceSubjectCateAddArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectCateAddArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &common.SubjectCate{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectCateAddArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_cate_add_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSubjectCateAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSubjectCateAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSubjectCateAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSubjectCateAddResult struct {
  Success *SubjectCateAddRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSubjectCateAddResult() *DatanodeServiceSubjectCateAddResult {
  return &DatanodeServiceSubjectCateAddResult{}
}

var DatanodeServiceSubjectCateAddResult_Success_DEFAULT *SubjectCateAddRes
func (p *DatanodeServiceSubjectCateAddResult) GetSuccess() *SubjectCateAddRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSubjectCateAddResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSubjectCateAddResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSubjectCateAddResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectCateAddResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SubjectCateAddRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectCateAddResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_cate_add_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSubjectCateAddResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSubjectCateAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSubjectCateAddResult(%+v)", *p)
}

type DatanodeServiceSubjectCateCountArgs struct {
}

func NewDatanodeServiceSubjectCateCountArgs() *DatanodeServiceSubjectCateCountArgs {
  return &DatanodeServiceSubjectCateCountArgs{}
}

func (p *DatanodeServiceSubjectCateCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectCateCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_cate_count_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSubjectCateCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSubjectCateCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSubjectCateCountResult struct {
  Success *SubjectCateCountRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSubjectCateCountResult() *DatanodeServiceSubjectCateCountResult {
  return &DatanodeServiceSubjectCateCountResult{}
}

var DatanodeServiceSubjectCateCountResult_Success_DEFAULT *SubjectCateCountRes
func (p *DatanodeServiceSubjectCateCountResult) GetSuccess() *SubjectCateCountRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSubjectCateCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSubjectCateCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSubjectCateCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectCateCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SubjectCateCountRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectCateCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_cate_count_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSubjectCateCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSubjectCateCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSubjectCateCountResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSubjectCateListArgs struct {
  Req *SubjectCateListReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSubjectCateListArgs() *DatanodeServiceSubjectCateListArgs {
  return &DatanodeServiceSubjectCateListArgs{}
}

var DatanodeServiceSubjectCateListArgs_Req_DEFAULT *SubjectCateListReq
func (p *DatanodeServiceSubjectCateListArgs) GetReq() *SubjectCateListReq {
  if !p.IsSetReq() {
    return DatanodeServiceSubjectCateListArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceSubjectCateListArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceSubjectCateListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectCateListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SubjectCateListReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectCateListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_cate_list_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSubjectCateListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSubjectCateListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSubjectCateListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSubjectCateListResult struct {
  Success *SubjectCateListRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSubjectCateListResult() *DatanodeServiceSubjectCateListResult {
  return &DatanodeServiceSubjectCateListResult{}
}

var DatanodeServiceSubjectCateListResult_Success_DEFAULT *SubjectCateListRes
func (p *DatanodeServiceSubjectCateListResult) GetSuccess() *SubjectCateListRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSubjectCateListResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSubjectCateListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSubjectCateListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectCateListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SubjectCateListRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSubjectCateListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("subject_cate_list_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSubjectCateListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSubjectCateListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSubjectCateListResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSetUserInfoArgs struct {
  Req *SetUserInfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSetUserInfoArgs() *DatanodeServiceSetUserInfoArgs {
  return &DatanodeServiceSetUserInfoArgs{}
}

var DatanodeServiceSetUserInfoArgs_Req_DEFAULT *SetUserInfoReq
func (p *DatanodeServiceSetUserInfoArgs) GetReq() *SetUserInfoReq {
  if !p.IsSetReq() {
    return DatanodeServiceSetUserInfoArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceSetUserInfoArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceSetUserInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSetUserInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SetUserInfoReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceSetUserInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_user_info_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSetUserInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSetUserInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSetUserInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSetUserInfoResult struct {
  Success *SetUserInfoRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSetUserInfoResult() *DatanodeServiceSetUserInfoResult {
  return &DatanodeServiceSetUserInfoResult{}
}

var DatanodeServiceSetUserInfoResult_Success_DEFAULT *SetUserInfoRes
func (p *DatanodeServiceSetUserInfoResult) GetSuccess() *SetUserInfoRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSetUserInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSetUserInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSetUserInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSetUserInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SetUserInfoRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSetUserInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_user_info_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSetUserInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSetUserInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSetUserInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceGetUserInfoArgs struct {
  Req *GetUserInfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceGetUserInfoArgs() *DatanodeServiceGetUserInfoArgs {
  return &DatanodeServiceGetUserInfoArgs{}
}

var DatanodeServiceGetUserInfoArgs_Req_DEFAULT *GetUserInfoReq
func (p *DatanodeServiceGetUserInfoArgs) GetReq() *GetUserInfoReq {
  if !p.IsSetReq() {
    return DatanodeServiceGetUserInfoArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceGetUserInfoArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceGetUserInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGetUserInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &GetUserInfoReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceGetUserInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_user_info_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGetUserInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceGetUserInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGetUserInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceGetUserInfoResult struct {
  Success *GetUserInfoRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceGetUserInfoResult() *DatanodeServiceGetUserInfoResult {
  return &DatanodeServiceGetUserInfoResult{}
}

var DatanodeServiceGetUserInfoResult_Success_DEFAULT *GetUserInfoRes
func (p *DatanodeServiceGetUserInfoResult) GetSuccess() *GetUserInfoRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceGetUserInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceGetUserInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceGetUserInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGetUserInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetUserInfoRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceGetUserInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_user_info_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGetUserInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceGetUserInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGetUserInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSetWechatUinfoArgs struct {
  Req *SetWechatUinfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSetWechatUinfoArgs() *DatanodeServiceSetWechatUinfoArgs {
  return &DatanodeServiceSetWechatUinfoArgs{}
}

var DatanodeServiceSetWechatUinfoArgs_Req_DEFAULT *SetWechatUinfoReq
func (p *DatanodeServiceSetWechatUinfoArgs) GetReq() *SetWechatUinfoReq {
  if !p.IsSetReq() {
    return DatanodeServiceSetWechatUinfoArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceSetWechatUinfoArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceSetWechatUinfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSetWechatUinfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SetWechatUinfoReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceSetWechatUinfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_wechat_uinfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSetWechatUinfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSetWechatUinfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSetWechatUinfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSetWechatUinfoResult struct {
  Success *SetWechatUinfoRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSetWechatUinfoResult() *DatanodeServiceSetWechatUinfoResult {
  return &DatanodeServiceSetWechatUinfoResult{}
}

var DatanodeServiceSetWechatUinfoResult_Success_DEFAULT *SetWechatUinfoRes
func (p *DatanodeServiceSetWechatUinfoResult) GetSuccess() *SetWechatUinfoRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSetWechatUinfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSetWechatUinfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSetWechatUinfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSetWechatUinfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SetWechatUinfoRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSetWechatUinfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_wechat_uinfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSetWechatUinfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSetWechatUinfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSetWechatUinfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceGetWechatUinfoArgs struct {
  Req *GetWechatUinfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceGetWechatUinfoArgs() *DatanodeServiceGetWechatUinfoArgs {
  return &DatanodeServiceGetWechatUinfoArgs{}
}

var DatanodeServiceGetWechatUinfoArgs_Req_DEFAULT *GetWechatUinfoReq
func (p *DatanodeServiceGetWechatUinfoArgs) GetReq() *GetWechatUinfoReq {
  if !p.IsSetReq() {
    return DatanodeServiceGetWechatUinfoArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceGetWechatUinfoArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceGetWechatUinfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGetWechatUinfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &GetWechatUinfoReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceGetWechatUinfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_wechat_uinfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGetWechatUinfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceGetWechatUinfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGetWechatUinfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceGetWechatUinfoResult struct {
  Success *GetWechatUinfoRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceGetWechatUinfoResult() *DatanodeServiceGetWechatUinfoResult {
  return &DatanodeServiceGetWechatUinfoResult{}
}

var DatanodeServiceGetWechatUinfoResult_Success_DEFAULT *GetWechatUinfoRes
func (p *DatanodeServiceGetWechatUinfoResult) GetSuccess() *GetWechatUinfoRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceGetWechatUinfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceGetWechatUinfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceGetWechatUinfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGetWechatUinfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetWechatUinfoRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceGetWechatUinfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_wechat_uinfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGetWechatUinfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceGetWechatUinfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGetWechatUinfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSetAlipayUinfoArgs struct {
  Req *SetAlipayUinfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSetAlipayUinfoArgs() *DatanodeServiceSetAlipayUinfoArgs {
  return &DatanodeServiceSetAlipayUinfoArgs{}
}

var DatanodeServiceSetAlipayUinfoArgs_Req_DEFAULT *SetAlipayUinfoReq
func (p *DatanodeServiceSetAlipayUinfoArgs) GetReq() *SetAlipayUinfoReq {
  if !p.IsSetReq() {
    return DatanodeServiceSetAlipayUinfoArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceSetAlipayUinfoArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceSetAlipayUinfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSetAlipayUinfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SetAlipayUinfoReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceSetAlipayUinfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_alipay_uinfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSetAlipayUinfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSetAlipayUinfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSetAlipayUinfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSetAlipayUinfoResult struct {
  Success *SetAlipayUinfoRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSetAlipayUinfoResult() *DatanodeServiceSetAlipayUinfoResult {
  return &DatanodeServiceSetAlipayUinfoResult{}
}

var DatanodeServiceSetAlipayUinfoResult_Success_DEFAULT *SetAlipayUinfoRes
func (p *DatanodeServiceSetAlipayUinfoResult) GetSuccess() *SetAlipayUinfoRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSetAlipayUinfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSetAlipayUinfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSetAlipayUinfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSetAlipayUinfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SetAlipayUinfoRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSetAlipayUinfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_alipay_uinfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSetAlipayUinfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSetAlipayUinfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSetAlipayUinfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceGetAlipayUinfoArgs struct {
  Req *GetAlipayUinfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceGetAlipayUinfoArgs() *DatanodeServiceGetAlipayUinfoArgs {
  return &DatanodeServiceGetAlipayUinfoArgs{}
}

var DatanodeServiceGetAlipayUinfoArgs_Req_DEFAULT *GetAlipayUinfoReq
func (p *DatanodeServiceGetAlipayUinfoArgs) GetReq() *GetAlipayUinfoReq {
  if !p.IsSetReq() {
    return DatanodeServiceGetAlipayUinfoArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceGetAlipayUinfoArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceGetAlipayUinfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGetAlipayUinfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &GetAlipayUinfoReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceGetAlipayUinfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_alipay_uinfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGetAlipayUinfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceGetAlipayUinfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGetAlipayUinfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceGetAlipayUinfoResult struct {
  Success *GetAlipayUinfoRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceGetAlipayUinfoResult() *DatanodeServiceGetAlipayUinfoResult {
  return &DatanodeServiceGetAlipayUinfoResult{}
}

var DatanodeServiceGetAlipayUinfoResult_Success_DEFAULT *GetAlipayUinfoRes
func (p *DatanodeServiceGetAlipayUinfoResult) GetSuccess() *GetAlipayUinfoRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceGetAlipayUinfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceGetAlipayUinfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceGetAlipayUinfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceGetAlipayUinfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetAlipayUinfoRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceGetAlipayUinfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_alipay_uinfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceGetAlipayUinfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceGetAlipayUinfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceGetAlipayUinfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSetBaiduEntityArgs struct {
  Req *SetBaiduEntityReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSetBaiduEntityArgs() *DatanodeServiceSetBaiduEntityArgs {
  return &DatanodeServiceSetBaiduEntityArgs{}
}

var DatanodeServiceSetBaiduEntityArgs_Req_DEFAULT *SetBaiduEntityReq
func (p *DatanodeServiceSetBaiduEntityArgs) GetReq() *SetBaiduEntityReq {
  if !p.IsSetReq() {
    return DatanodeServiceSetBaiduEntityArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceSetBaiduEntityArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceSetBaiduEntityArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSetBaiduEntityArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SetBaiduEntityReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceSetBaiduEntityArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_baidu_entity_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSetBaiduEntityArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSetBaiduEntityArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSetBaiduEntityArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSetBaiduEntityResult struct {
  Success *SetBaiduEntityRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSetBaiduEntityResult() *DatanodeServiceSetBaiduEntityResult {
  return &DatanodeServiceSetBaiduEntityResult{}
}

var DatanodeServiceSetBaiduEntityResult_Success_DEFAULT *SetBaiduEntityRes
func (p *DatanodeServiceSetBaiduEntityResult) GetSuccess() *SetBaiduEntityRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSetBaiduEntityResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSetBaiduEntityResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSetBaiduEntityResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSetBaiduEntityResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SetBaiduEntityRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSetBaiduEntityResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_baidu_entity_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSetBaiduEntityResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSetBaiduEntityResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSetBaiduEntityResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceBaiduEntityArgs struct {
  Req *BaiduEntityReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceBaiduEntityArgs() *DatanodeServiceBaiduEntityArgs {
  return &DatanodeServiceBaiduEntityArgs{}
}

var DatanodeServiceBaiduEntityArgs_Req_DEFAULT *BaiduEntityReq
func (p *DatanodeServiceBaiduEntityArgs) GetReq() *BaiduEntityReq {
  if !p.IsSetReq() {
    return DatanodeServiceBaiduEntityArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceBaiduEntityArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceBaiduEntityArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceBaiduEntityArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &BaiduEntityReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceBaiduEntityArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("baidu_entity_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceBaiduEntityArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceBaiduEntityArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceBaiduEntityArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceBaiduEntityResult struct {
  Success *BaiduEntityRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceBaiduEntityResult() *DatanodeServiceBaiduEntityResult {
  return &DatanodeServiceBaiduEntityResult{}
}

var DatanodeServiceBaiduEntityResult_Success_DEFAULT *BaiduEntityRes
func (p *DatanodeServiceBaiduEntityResult) GetSuccess() *BaiduEntityRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceBaiduEntityResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceBaiduEntityResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceBaiduEntityResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceBaiduEntityResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &BaiduEntityRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceBaiduEntityResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("baidu_entity_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceBaiduEntityResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceBaiduEntityResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceBaiduEntityResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSearchHistoryArgs struct {
  Req *SearchHistoryReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSearchHistoryArgs() *DatanodeServiceSearchHistoryArgs {
  return &DatanodeServiceSearchHistoryArgs{}
}

var DatanodeServiceSearchHistoryArgs_Req_DEFAULT *SearchHistoryReq
func (p *DatanodeServiceSearchHistoryArgs) GetReq() *SearchHistoryReq {
  if !p.IsSetReq() {
    return DatanodeServiceSearchHistoryArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceSearchHistoryArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceSearchHistoryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSearchHistoryArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SearchHistoryReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceSearchHistoryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_history_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSearchHistoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSearchHistoryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSearchHistoryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSearchHistoryResult struct {
  Success *SearchHistoryRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSearchHistoryResult() *DatanodeServiceSearchHistoryResult {
  return &DatanodeServiceSearchHistoryResult{}
}

var DatanodeServiceSearchHistoryResult_Success_DEFAULT *SearchHistoryRes
func (p *DatanodeServiceSearchHistoryResult) GetSuccess() *SearchHistoryRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSearchHistoryResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSearchHistoryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSearchHistoryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSearchHistoryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SearchHistoryRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSearchHistoryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_history_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSearchHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSearchHistoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSearchHistoryResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceSearchItemArgs struct {
  Req *SearchItemReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceSearchItemArgs() *DatanodeServiceSearchItemArgs {
  return &DatanodeServiceSearchItemArgs{}
}

var DatanodeServiceSearchItemArgs_Req_DEFAULT *SearchItemReq
func (p *DatanodeServiceSearchItemArgs) GetReq() *SearchItemReq {
  if !p.IsSetReq() {
    return DatanodeServiceSearchItemArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceSearchItemArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceSearchItemArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSearchItemArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SearchItemReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceSearchItemArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_item_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSearchItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceSearchItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSearchItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceSearchItemResult struct {
  Success *SearchItemRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceSearchItemResult() *DatanodeServiceSearchItemResult {
  return &DatanodeServiceSearchItemResult{}
}

var DatanodeServiceSearchItemResult_Success_DEFAULT *SearchItemRes
func (p *DatanodeServiceSearchItemResult) GetSuccess() *SearchItemRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceSearchItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceSearchItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceSearchItemResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceSearchItemResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SearchItemRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceSearchItemResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_item_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceSearchItemResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceSearchItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceSearchItemResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceRefreshModifyRewardArgs struct {
  Req *RefreshModifyRewardReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceRefreshModifyRewardArgs() *DatanodeServiceRefreshModifyRewardArgs {
  return &DatanodeServiceRefreshModifyRewardArgs{}
}

var DatanodeServiceRefreshModifyRewardArgs_Req_DEFAULT *RefreshModifyRewardReq
func (p *DatanodeServiceRefreshModifyRewardArgs) GetReq() *RefreshModifyRewardReq {
  if !p.IsSetReq() {
    return DatanodeServiceRefreshModifyRewardArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceRefreshModifyRewardArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceRefreshModifyRewardArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceRefreshModifyRewardArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &RefreshModifyRewardReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceRefreshModifyRewardArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("refresh_modify_reward_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceRefreshModifyRewardArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceRefreshModifyRewardArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceRefreshModifyRewardArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceRefreshModifyRewardResult struct {
  Success *RefreshModifyRewardRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceRefreshModifyRewardResult() *DatanodeServiceRefreshModifyRewardResult {
  return &DatanodeServiceRefreshModifyRewardResult{}
}

var DatanodeServiceRefreshModifyRewardResult_Success_DEFAULT *RefreshModifyRewardRes
func (p *DatanodeServiceRefreshModifyRewardResult) GetSuccess() *RefreshModifyRewardRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceRefreshModifyRewardResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceRefreshModifyRewardResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceRefreshModifyRewardResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceRefreshModifyRewardResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RefreshModifyRewardRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceRefreshModifyRewardResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("refresh_modify_reward_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceRefreshModifyRewardResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceRefreshModifyRewardResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceRefreshModifyRewardResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceRefreshAddRewardArgs struct {
  Req *RefreshAddRewardReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceRefreshAddRewardArgs() *DatanodeServiceRefreshAddRewardArgs {
  return &DatanodeServiceRefreshAddRewardArgs{}
}

var DatanodeServiceRefreshAddRewardArgs_Req_DEFAULT *RefreshAddRewardReq
func (p *DatanodeServiceRefreshAddRewardArgs) GetReq() *RefreshAddRewardReq {
  if !p.IsSetReq() {
    return DatanodeServiceRefreshAddRewardArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceRefreshAddRewardArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceRefreshAddRewardArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceRefreshAddRewardArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &RefreshAddRewardReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceRefreshAddRewardArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("refresh_add_reward_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceRefreshAddRewardArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceRefreshAddRewardArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceRefreshAddRewardArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceRefreshAddRewardResult struct {
  Success *RefreshAddRewardRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceRefreshAddRewardResult() *DatanodeServiceRefreshAddRewardResult {
  return &DatanodeServiceRefreshAddRewardResult{}
}

var DatanodeServiceRefreshAddRewardResult_Success_DEFAULT *RefreshAddRewardRes
func (p *DatanodeServiceRefreshAddRewardResult) GetSuccess() *RefreshAddRewardRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceRefreshAddRewardResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceRefreshAddRewardResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceRefreshAddRewardResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceRefreshAddRewardResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RefreshAddRewardRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceRefreshAddRewardResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("refresh_add_reward_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceRefreshAddRewardResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceRefreshAddRewardResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceRefreshAddRewardResult(%+v)", *p)
}

// Attributes:
//  - Req
type DatanodeServiceRefreshUserCoinArgs struct {
  Req *RefreshUserCoinReq `thrift:"req,1" db:"req" json:"req"`
}

func NewDatanodeServiceRefreshUserCoinArgs() *DatanodeServiceRefreshUserCoinArgs {
  return &DatanodeServiceRefreshUserCoinArgs{}
}

var DatanodeServiceRefreshUserCoinArgs_Req_DEFAULT *RefreshUserCoinReq
func (p *DatanodeServiceRefreshUserCoinArgs) GetReq() *RefreshUserCoinReq {
  if !p.IsSetReq() {
    return DatanodeServiceRefreshUserCoinArgs_Req_DEFAULT
  }
return p.Req
}
func (p *DatanodeServiceRefreshUserCoinArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *DatanodeServiceRefreshUserCoinArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceRefreshUserCoinArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &RefreshUserCoinReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *DatanodeServiceRefreshUserCoinArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("refresh_user_coin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceRefreshUserCoinArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *DatanodeServiceRefreshUserCoinArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceRefreshUserCoinArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatanodeServiceRefreshUserCoinResult struct {
  Success *RefreshUserCoinRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatanodeServiceRefreshUserCoinResult() *DatanodeServiceRefreshUserCoinResult {
  return &DatanodeServiceRefreshUserCoinResult{}
}

var DatanodeServiceRefreshUserCoinResult_Success_DEFAULT *RefreshUserCoinRes
func (p *DatanodeServiceRefreshUserCoinResult) GetSuccess() *RefreshUserCoinRes {
  if !p.IsSetSuccess() {
    return DatanodeServiceRefreshUserCoinResult_Success_DEFAULT
  }
return p.Success
}
func (p *DatanodeServiceRefreshUserCoinResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DatanodeServiceRefreshUserCoinResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DatanodeServiceRefreshUserCoinResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RefreshUserCoinRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DatanodeServiceRefreshUserCoinResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("refresh_user_coin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DatanodeServiceRefreshUserCoinResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DatanodeServiceRefreshUserCoinResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DatanodeServiceRefreshUserCoinResult(%+v)", *p)
}


