// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package likenode

import (
	"fmt"
	"math"

	"github.com/heegspace/heegproto/common"
	"github.com/heegspace/heegproto/rescode"
	"github.com/heegspace/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = rescode.GoUnusedProtection__
var _ = common.GoUnusedProtection__
var GoUnusedProtection__ int

type LikesCountReq struct {
	Auth *common.Authorize `thrift:"auth,1"`
	Uid  int64             `thrift:"uid,2"`
	Mid  string            `thrift:"mid,3"`
}

func NewLikesCountReq() *LikesCountReq {
	return &LikesCountReq{}
}

func (p *LikesCountReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LikesCountReq) readField1(iprot thrift.TProtocol) error {
	p.Auth = common.NewAuthorize()
	if err := p.Auth.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Auth)
	}
	return nil
}

func (p *LikesCountReq) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *LikesCountReq) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Mid = v
	}
	return nil
}

func (p *LikesCountReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("likes_count_req"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *LikesCountReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Auth != nil {
		if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:auth: %s", p, err)
		}
		if err := p.Auth.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Auth)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:auth: %s", p, err)
		}
	}
	return err
}

func (p *LikesCountReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *LikesCountReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:mid: %s", p, err)
	}
	return err
}

func (p *LikesCountReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikesCountReq(%+v)", *p)
}

type LikesCountRes struct {
	Rescode rescode.Code      `thrift:"rescode,1"`
	Count   int32             `thrift:"count,2"`
	Resmsg  string            `thrift:"resmsg,3"`
	Extra   map[string]string `thrift:"extra,4"`
}

func NewLikesCountRes() *LikesCountRes {
	return &LikesCountRes{
		Rescode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *LikesCountRes) IsSetRescode() bool {
	return int64(p.Rescode) != math.MinInt32-1
}

func (p *LikesCountRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LikesCountRes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Rescode = rescode.Code(v)
	}
	return nil
}

func (p *LikesCountRes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Count = v
	}
	return nil
}

func (p *LikesCountRes) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *LikesCountRes) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val1 = v
		}
		p.Extra[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *LikesCountRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("likes_count_res"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *LikesCountRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRescode() {
		if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:rescode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
			return fmt.Errorf("%T.rescode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:rescode: %s", p, err)
		}
	}
	return err
}

func (p *LikesCountRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:count: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return fmt.Errorf("%T.count (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:count: %s", p, err)
	}
	return err
}

func (p *LikesCountRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:resmsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return fmt.Errorf("%T.resmsg (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:resmsg: %s", p, err)
	}
	return err
}

func (p *LikesCountRes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:extra: %s", p, err)
		}
	}
	return err
}

func (p *LikesCountRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikesCountRes(%+v)", *p)
}

type LikesAddReq struct {
	Auth *common.Authorize `thrift:"auth,1"`
	Uid  int64             `thrift:"uid,2"`
	Mid  string            `thrift:"mid,3"`
}

func NewLikesAddReq() *LikesAddReq {
	return &LikesAddReq{}
}

func (p *LikesAddReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LikesAddReq) readField1(iprot thrift.TProtocol) error {
	p.Auth = common.NewAuthorize()
	if err := p.Auth.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Auth)
	}
	return nil
}

func (p *LikesAddReq) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *LikesAddReq) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Mid = v
	}
	return nil
}

func (p *LikesAddReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("likes_add_req"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *LikesAddReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Auth != nil {
		if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:auth: %s", p, err)
		}
		if err := p.Auth.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Auth)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:auth: %s", p, err)
		}
	}
	return err
}

func (p *LikesAddReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *LikesAddReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:mid: %s", p, err)
	}
	return err
}

func (p *LikesAddReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikesAddReq(%+v)", *p)
}

type LikesAddRes struct {
	Rescode rescode.Code      `thrift:"rescode,1"`
	Resmsg  string            `thrift:"resmsg,2"`
	Extra   map[string]string `thrift:"extra,3"`
}

func NewLikesAddRes() *LikesAddRes {
	return &LikesAddRes{
		Rescode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *LikesAddRes) IsSetRescode() bool {
	return int64(p.Rescode) != math.MinInt32-1
}

func (p *LikesAddRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LikesAddRes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Rescode = rescode.Code(v)
	}
	return nil
}

func (p *LikesAddRes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *LikesAddRes) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val3 = v
		}
		p.Extra[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *LikesAddRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("likes_add_res"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *LikesAddRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRescode() {
		if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:rescode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
			return fmt.Errorf("%T.rescode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:rescode: %s", p, err)
		}
	}
	return err
}

func (p *LikesAddRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:resmsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return fmt.Errorf("%T.resmsg (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:resmsg: %s", p, err)
	}
	return err
}

func (p *LikesAddRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:extra: %s", p, err)
		}
	}
	return err
}

func (p *LikesAddRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikesAddRes(%+v)", *p)
}

type LikesListReq struct {
	Auth *common.Authorize `thrift:"auth,1"`
	Uid  int64             `thrift:"uid,2"`
	Mid  string            `thrift:"mid,3"`
	Page int32             `thrift:"page,4"`
	Size int32             `thrift:"size,5"`
}

func NewLikesListReq() *LikesListReq {
	return &LikesListReq{}
}

func (p *LikesListReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LikesListReq) readField1(iprot thrift.TProtocol) error {
	p.Auth = common.NewAuthorize()
	if err := p.Auth.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Auth)
	}
	return nil
}

func (p *LikesListReq) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *LikesListReq) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Mid = v
	}
	return nil
}

func (p *LikesListReq) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Page = v
	}
	return nil
}

func (p *LikesListReq) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Size = v
	}
	return nil
}

func (p *LikesListReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("likes_list_req"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *LikesListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Auth != nil {
		if err := oprot.WriteFieldBegin("auth", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:auth: %s", p, err)
		}
		if err := p.Auth.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Auth)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:auth: %s", p, err)
		}
	}
	return err
}

func (p *LikesListReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *LikesListReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:mid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:mid: %s", p, err)
	}
	return err
}

func (p *LikesListReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("page", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:page: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Page)); err != nil {
		return fmt.Errorf("%T.page (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:page: %s", p, err)
	}
	return err
}

func (p *LikesListReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:size: %s", p, err)
	}
	return err
}

func (p *LikesListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikesListReq(%+v)", *p)
}

type Likes struct {
	Uid      int64 `thrift:"uid,1"`
	CreateAt int64 `thrift:"create_at,2"`
}

func NewLikes() *Likes {
	return &Likes{}
}

func (p *Likes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Likes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *Likes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.CreateAt = v
	}
	return nil
}

func (p *Likes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("likes"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Likes) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *Likes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_at", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:create_at: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreateAt)); err != nil {
		return fmt.Errorf("%T.create_at (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:create_at: %s", p, err)
	}
	return err
}

func (p *Likes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Likes(%+v)", *p)
}

type LikesListRes struct {
	Rescode rescode.Code      `thrift:"rescode,1"`
	Resmsg  string            `thrift:"resmsg,2"`
	Data    []*Likes          `thrift:"data,3"`
	Extra   map[string]string `thrift:"extra,4"`
}

func NewLikesListRes() *LikesListRes {
	return &LikesListRes{
		Rescode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *LikesListRes) IsSetRescode() bool {
	return int64(p.Rescode) != math.MinInt32-1
}

func (p *LikesListRes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LikesListRes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Rescode = rescode.Code(v)
	}
	return nil
}

func (p *LikesListRes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Resmsg = v
	}
	return nil
}

func (p *LikesListRes) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Data = make([]*Likes, 0, size)
	for i := 0; i < size; i++ {
		_elem4 := NewLikes()
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4)
		}
		p.Data = append(p.Data, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *LikesListRes) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key5 = v
		}
		var _val6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val6 = v
		}
		p.Extra[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *LikesListRes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("likes_list_res"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *LikesListRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRescode() {
		if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:rescode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
			return fmt.Errorf("%T.rescode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:rescode: %s", p, err)
		}
	}
	return err
}

func (p *LikesListRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:resmsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Resmsg)); err != nil {
		return fmt.Errorf("%T.resmsg (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:resmsg: %s", p, err)
	}
	return err
}

func (p *LikesListRes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Data != nil {
		if err := oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:data: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Data {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:data: %s", p, err)
		}
	}
	return err
}

func (p *LikesListRes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:extra: %s", p, err)
		}
	}
	return err
}

func (p *LikesListRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikesListRes(%+v)", *p)
}
