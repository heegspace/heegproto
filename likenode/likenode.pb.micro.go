// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: likenode.proto

package likenode

import (
	_ "github.com/heegspace/heegproto/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	_ "github.com/heegspace/heegproto/rescode"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LikenodeService service

func NewLikenodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LikenodeService service

type LikenodeService interface {
	// 点赞数量
	LikesCount(ctx context.Context, in *LikesCountReq, opts ...client.CallOption) (*LikesCountRes, error)
	// 添加点赞
	LikesAdd(ctx context.Context, in *LikesAddReq, opts ...client.CallOption) (*LikesAddRes, error)
	// 获取点赞列表
	LikesList(ctx context.Context, in *LikesListReq, opts ...client.CallOption) (*LikesListRes, error)
}

type likenodeService struct {
	c    client.Client
	name string
}

func NewLikenodeService(name string, c client.Client) LikenodeService {
	return &likenodeService{
		c:    c,
		name: name,
	}
}

func (c *likenodeService) LikesCount(ctx context.Context, in *LikesCountReq, opts ...client.CallOption) (*LikesCountRes, error) {
	req := c.c.NewRequest(c.name, "LikenodeService.likesCount", in)
	out := new(LikesCountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likenodeService) LikesAdd(ctx context.Context, in *LikesAddReq, opts ...client.CallOption) (*LikesAddRes, error) {
	req := c.c.NewRequest(c.name, "LikenodeService.likesAdd", in)
	out := new(LikesAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likenodeService) LikesList(ctx context.Context, in *LikesListReq, opts ...client.CallOption) (*LikesListRes, error) {
	req := c.c.NewRequest(c.name, "LikenodeService.likesList", in)
	out := new(LikesListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LikenodeService service

type LikenodeServiceHandler interface {
	// 点赞数量
	LikesCount(context.Context, *LikesCountReq, *LikesCountRes) error
	// 添加点赞
	LikesAdd(context.Context, *LikesAddReq, *LikesAddRes) error
	// 获取点赞列表
	LikesList(context.Context, *LikesListReq, *LikesListRes) error
}

func RegisterLikenodeServiceHandler(s server.Server, hdlr LikenodeServiceHandler, opts ...server.HandlerOption) error {
	type likenodeService interface {
		LikesCount(ctx context.Context, in *LikesCountReq, out *LikesCountRes) error
		LikesAdd(ctx context.Context, in *LikesAddReq, out *LikesAddRes) error
		LikesList(ctx context.Context, in *LikesListReq, out *LikesListRes) error
	}
	type LikenodeService struct {
		likenodeService
	}
	h := &likenodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LikenodeService{h}, opts...))
}

type likenodeServiceHandler struct {
	LikenodeServiceHandler
}

func (h *likenodeServiceHandler) LikesCount(ctx context.Context, in *LikesCountReq, out *LikesCountRes) error {
	return h.LikenodeServiceHandler.LikesCount(ctx, in, out)
}

func (h *likenodeServiceHandler) LikesAdd(ctx context.Context, in *LikesAddReq, out *LikesAddRes) error {
	return h.LikenodeServiceHandler.LikesAdd(ctx, in, out)
}

func (h *likenodeServiceHandler) LikesList(ctx context.Context, in *LikesListReq, out *LikesListRes) error {
	return h.LikenodeServiceHandler.LikesList(ctx, in, out)
}
