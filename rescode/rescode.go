// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rescode

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"reflect"

	"github.com/heegspace/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Code int64

const (
	Code_SUCCESS    Code = 0
	Code_PARAM_ERR  Code = 99
	Code_EXISTS     Code = 100
	Code_NOT_EXISTS Code = 400
)

func (p Code) String() string {
	switch p {
	case Code_SUCCESS:
		return "SUCCESS"
	case Code_PARAM_ERR:
		return "PARAM_ERR"
	case Code_EXISTS:
		return "EXISTS"
	case Code_NOT_EXISTS:
		return "NOT_EXISTS"
	}
	return "<UNSET>"
}

func CodeFromString(s string) (Code, error) {
	switch s {
	case "SUCCESS":
		return Code_SUCCESS, nil
	case "PARAM_ERR":
		return Code_PARAM_ERR, nil
	case "EXISTS":
		return Code_EXISTS, nil
	case "NOT_EXISTS":
		return Code_NOT_EXISTS, nil
	}
	return Code(0), fmt.Errorf("not a valid Code string")
}

func CodePtr(v Code) *Code { return &v }

func (p Code) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Code) UnmarshalText(text []byte) error {
	q, err := CodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Code) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Code(v)
	return nil
}

func (p *Code) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}
