// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package common

import (
	"fmt"
	"math"

	"github.com/heegspace/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type Authorize struct {
	Key   string            `thrift:"key,1"`
	Value string            `thrift:"value,2"`
	Extra map[string]string `thrift:"extra,3"`
}

func NewAuthorize() *Authorize {
	return &Authorize{}
}

func (p *Authorize) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Authorize) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *Authorize) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *Authorize) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val1 = v
		}
		p.Extra[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *Authorize) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authorize"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Authorize) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *Authorize) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.value (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:value: %s", p, err)
	}
	return err
}

func (p *Authorize) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:extra: %s", p, err)
		}
	}
	return err
}

func (p *Authorize) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Authorize(%+v)", *p)
}

type QuestionQuery struct {
	RollId      string            `thrift:"roll_id,1"`
	RollName    string            `thrift:"roll_name,2"`
	GradeId     string            `thrift:"grade_id,3"`
	GradeName   string            `thrift:"grade_name,4"`
	SubjectId   string            `thrift:"subject_id,5"`
	SubjectName string            `thrift:"subject_name,6"`
	VersionId   string            `thrift:"version_id,7"`
	VersionName string            `thrift:"version_name,8"`
	ChapterId   string            `thrift:"chapter_id,9"`
	ChapterName string            `thrift:"chapter_name,10"`
	TiXingId    string            `thrift:"ti_xing_id,11"`
	TiXingName  string            `thrift:"ti_xing_name,12"`
	SourceId    string            `thrift:"source_id,13"`
	SourceName  string            `thrift:"source_name,14"`
	Page        int32             `thrift:"page,15"`
	Size        int32             `thrift:"size,16"`
	Extra       map[string]string `thrift:"extra,17"`
}

func NewQuestionQuery() *QuestionQuery {
	return &QuestionQuery{}
}

func (p *QuestionQuery) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QuestionQuery) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.RollId = v
	}
	return nil
}

func (p *QuestionQuery) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RollName = v
	}
	return nil
}

func (p *QuestionQuery) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.GradeId = v
	}
	return nil
}

func (p *QuestionQuery) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.GradeName = v
	}
	return nil
}

func (p *QuestionQuery) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.SubjectId = v
	}
	return nil
}

func (p *QuestionQuery) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.SubjectName = v
	}
	return nil
}

func (p *QuestionQuery) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.VersionId = v
	}
	return nil
}

func (p *QuestionQuery) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.VersionName = v
	}
	return nil
}

func (p *QuestionQuery) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.ChapterId = v
	}
	return nil
}

func (p *QuestionQuery) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.ChapterName = v
	}
	return nil
}

func (p *QuestionQuery) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.TiXingId = v
	}
	return nil
}

func (p *QuestionQuery) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.TiXingName = v
	}
	return nil
}

func (p *QuestionQuery) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *QuestionQuery) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.SourceName = v
	}
	return nil
}

func (p *QuestionQuery) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 15: %s")
	} else {
		p.Page = v
	}
	return nil
}

func (p *QuestionQuery) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.Size = v
	}
	return nil
}

func (p *QuestionQuery) readField17(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val3 = v
		}
		p.Extra[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *QuestionQuery) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("question_query"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *QuestionQuery) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roll_id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:roll_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RollId)); err != nil {
		return fmt.Errorf("%T.roll_id (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:roll_id: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roll_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:roll_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RollName)); err != nil {
		return fmt.Errorf("%T.roll_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:roll_name: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grade_id", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:grade_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GradeId)); err != nil {
		return fmt.Errorf("%T.grade_id (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:grade_id: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grade_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:grade_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GradeName)); err != nil {
		return fmt.Errorf("%T.grade_name (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:grade_name: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subject_id", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:subject_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SubjectId)); err != nil {
		return fmt.Errorf("%T.subject_id (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:subject_id: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subject_name", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:subject_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SubjectName)); err != nil {
		return fmt.Errorf("%T.subject_name (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:subject_name: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version_id", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:version_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VersionId)); err != nil {
		return fmt.Errorf("%T.version_id (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:version_id: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version_name", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:version_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VersionName)); err != nil {
		return fmt.Errorf("%T.version_name (8) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:version_name: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chapter_id", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:chapter_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChapterId)); err != nil {
		return fmt.Errorf("%T.chapter_id (9) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:chapter_id: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chapter_name", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:chapter_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChapterName)); err != nil {
		return fmt.Errorf("%T.chapter_name (10) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:chapter_name: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ti_xing_id", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:ti_xing_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TiXingId)); err != nil {
		return fmt.Errorf("%T.ti_xing_id (11) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:ti_xing_id: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ti_xing_name", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:ti_xing_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TiXingName)); err != nil {
		return fmt.Errorf("%T.ti_xing_name (12) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:ti_xing_name: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_id", thrift.STRING, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:source_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return fmt.Errorf("%T.source_id (13) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:source_id: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_name", thrift.STRING, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:source_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SourceName)); err != nil {
		return fmt.Errorf("%T.source_name (14) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:source_name: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("page", thrift.I32, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:page: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Page)); err != nil {
		return fmt.Errorf("%T.page (15) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:page: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I32, 16); err != nil {
		return fmt.Errorf("%T write field begin error 16:size: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Size)); err != nil {
		return fmt.Errorf("%T.size (16) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 16:size: %s", p, err)
	}
	return err
}

func (p *QuestionQuery) writeField17(oprot thrift.TProtocol) (err error) {
	if p.Extra != nil {
		if err := oprot.WriteFieldBegin("extra", thrift.MAP, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:extra: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:extra: %s", p, err)
		}
	}
	return err
}

func (p *QuestionQuery) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuestionQuery(%+v)", *p)
}

type VersionItem struct {
	Uid       string `thrift:"uid,1"`
	SubjectId string `thrift:"subject_id,2"`
	Name      string `thrift:"name,3"`
	Sign      string `thrift:"sign,4"`
	CreateAt  string `thrift:"create_at,5"`
}

func NewVersionItem() *VersionItem {
	return &VersionItem{}
}

func (p *VersionItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VersionItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *VersionItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.SubjectId = v
	}
	return nil
}

func (p *VersionItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *VersionItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Sign = v
	}
	return nil
}

func (p *VersionItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.CreateAt = v
	}
	return nil
}

func (p *VersionItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("version_item"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *VersionItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *VersionItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subject_id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:subject_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SubjectId)); err != nil {
		return fmt.Errorf("%T.subject_id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:subject_id: %s", p, err)
	}
	return err
}

func (p *VersionItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:name: %s", p, err)
	}
	return err
}

func (p *VersionItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sign", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:sign: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Sign)); err != nil {
		return fmt.Errorf("%T.sign (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:sign: %s", p, err)
	}
	return err
}

func (p *VersionItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_at", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:create_at: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CreateAt)); err != nil {
		return fmt.Errorf("%T.create_at (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:create_at: %s", p, err)
	}
	return err
}

func (p *VersionItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionItem(%+v)", *p)
}

type QuestionOption struct {
	Name   string   `thrift:"name,1"`
	Images []string `thrift:"images,2"`
}

func NewQuestionOption() *QuestionOption {
	return &QuestionOption{}
}

func (p *QuestionOption) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QuestionOption) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *QuestionOption) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Images = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem4 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem4 = v
		}
		p.Images = append(p.Images, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *QuestionOption) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("question_option"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *QuestionOption) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *QuestionOption) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Images != nil {
		if err := oprot.WriteFieldBegin("images", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:images: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Images)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Images {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:images: %s", p, err)
		}
	}
	return err
}

func (p *QuestionOption) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuestionOption(%+v)", *p)
}

type Question struct {
	Timu    string            `thrift:"timu,1"`
	Images  []string          `thrift:"images,2"`
	Options []*QuestionOption `thrift:"options,3"`
}

func NewQuestion() *Question {
	return &Question{}
}

func (p *Question) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Question) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Timu = v
	}
	return nil
}

func (p *Question) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Images = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem5 = v
		}
		p.Images = append(p.Images, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Question) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Options = make([]*QuestionOption, 0, size)
	for i := 0; i < size; i++ {
		_elem6 := NewQuestionOption()
		if err := _elem6.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem6)
		}
		p.Options = append(p.Options, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Question) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("question"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Question) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timu", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:timu: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Timu)); err != nil {
		return fmt.Errorf("%T.timu (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:timu: %s", p, err)
	}
	return err
}

func (p *Question) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Images != nil {
		if err := oprot.WriteFieldBegin("images", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:images: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Images)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Images {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:images: %s", p, err)
		}
	}
	return err
}

func (p *Question) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Options != nil {
		if err := oprot.WriteFieldBegin("options", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:options: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Options)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Options {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:options: %s", p, err)
		}
	}
	return err
}

func (p *Question) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Question(%+v)", *p)
}

type TimuItem struct {
	Uid         string    `thrift:"uid,1"`
	RollId      string    `thrift:"roll_id,2"`
	RollName    string    `thrift:"roll_name,3"`
	GradeId     string    `thrift:"grade_id,4"`
	GradeName   string    `thrift:"grade_name,5"`
	SubjectId   string    `thrift:"subject_id,6"`
	SubjectName string    `thrift:"subject_name,7"`
	VersionId   string    `thrift:"version_id,8"`
	VersionName string    `thrift:"version_name,9"`
	ChapterId   string    `thrift:"chapter_id,10"`
	ChapterName string    `thrift:"chapter_name,11"`
	ChapterGd   string    `thrift:"chapter_gd,12"`
	SourceId    string    `thrift:"source_id,13"`
	SourceName  string    `thrift:"source_name,14"`
	TiXingId    string    `thrift:"ti_xing_id,15"`
	TiXingName  string    `thrift:"ti_xing_name,16"`
	Sign        string    `thrift:"sign,17"`
	Data        *Question `thrift:"data,18"`
	IsCollect   bool      `thrift:"is_collect,19"`
	CreateAt    string    `thrift:"create_at,20"`
}

func NewTimuItem() *TimuItem {
	return &TimuItem{}
}

func (p *TimuItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TimuItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *TimuItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RollId = v
	}
	return nil
}

func (p *TimuItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.RollName = v
	}
	return nil
}

func (p *TimuItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.GradeId = v
	}
	return nil
}

func (p *TimuItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.GradeName = v
	}
	return nil
}

func (p *TimuItem) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.SubjectId = v
	}
	return nil
}

func (p *TimuItem) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.SubjectName = v
	}
	return nil
}

func (p *TimuItem) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.VersionId = v
	}
	return nil
}

func (p *TimuItem) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.VersionName = v
	}
	return nil
}

func (p *TimuItem) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.ChapterId = v
	}
	return nil
}

func (p *TimuItem) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.ChapterName = v
	}
	return nil
}

func (p *TimuItem) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.ChapterGd = v
	}
	return nil
}

func (p *TimuItem) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *TimuItem) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.SourceName = v
	}
	return nil
}

func (p *TimuItem) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 15: %s")
	} else {
		p.TiXingId = v
	}
	return nil
}

func (p *TimuItem) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.TiXingName = v
	}
	return nil
}

func (p *TimuItem) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 17: %s")
	} else {
		p.Sign = v
	}
	return nil
}

func (p *TimuItem) readField18(iprot thrift.TProtocol) error {
	p.Data = NewQuestion()
	if err := p.Data.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Data)
	}
	return nil
}

func (p *TimuItem) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 19: %s")
	} else {
		p.IsCollect = v
	}
	return nil
}

func (p *TimuItem) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 20: %s")
	} else {
		p.CreateAt = v
	}
	return nil
}

func (p *TimuItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("timu_item"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TimuItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roll_id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:roll_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RollId)); err != nil {
		return fmt.Errorf("%T.roll_id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:roll_id: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roll_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:roll_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RollName)); err != nil {
		return fmt.Errorf("%T.roll_name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:roll_name: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grade_id", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:grade_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GradeId)); err != nil {
		return fmt.Errorf("%T.grade_id (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:grade_id: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grade_name", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:grade_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GradeName)); err != nil {
		return fmt.Errorf("%T.grade_name (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:grade_name: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subject_id", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:subject_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SubjectId)); err != nil {
		return fmt.Errorf("%T.subject_id (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:subject_id: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subject_name", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:subject_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SubjectName)); err != nil {
		return fmt.Errorf("%T.subject_name (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:subject_name: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version_id", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:version_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VersionId)); err != nil {
		return fmt.Errorf("%T.version_id (8) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:version_id: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version_name", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:version_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VersionName)); err != nil {
		return fmt.Errorf("%T.version_name (9) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:version_name: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chapter_id", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:chapter_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChapterId)); err != nil {
		return fmt.Errorf("%T.chapter_id (10) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:chapter_id: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chapter_name", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:chapter_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChapterName)); err != nil {
		return fmt.Errorf("%T.chapter_name (11) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:chapter_name: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chapter_gd", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:chapter_gd: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChapterGd)); err != nil {
		return fmt.Errorf("%T.chapter_gd (12) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:chapter_gd: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_id", thrift.STRING, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:source_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return fmt.Errorf("%T.source_id (13) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:source_id: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_name", thrift.STRING, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:source_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SourceName)); err != nil {
		return fmt.Errorf("%T.source_name (14) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:source_name: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ti_xing_id", thrift.STRING, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:ti_xing_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TiXingId)); err != nil {
		return fmt.Errorf("%T.ti_xing_id (15) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:ti_xing_id: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ti_xing_name", thrift.STRING, 16); err != nil {
		return fmt.Errorf("%T write field begin error 16:ti_xing_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TiXingName)); err != nil {
		return fmt.Errorf("%T.ti_xing_name (16) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 16:ti_xing_name: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sign", thrift.STRING, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:sign: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Sign)); err != nil {
		return fmt.Errorf("%T.sign (17) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:sign: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField18(oprot thrift.TProtocol) (err error) {
	if p.Data != nil {
		if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 18); err != nil {
			return fmt.Errorf("%T write field begin error 18:data: %s", p, err)
		}
		if err := p.Data.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Data)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 18:data: %s", p, err)
		}
	}
	return err
}

func (p *TimuItem) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_collect", thrift.BOOL, 19); err != nil {
		return fmt.Errorf("%T write field begin error 19:is_collect: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsCollect)); err != nil {
		return fmt.Errorf("%T.is_collect (19) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 19:is_collect: %s", p, err)
	}
	return err
}

func (p *TimuItem) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_at", thrift.STRING, 20); err != nil {
		return fmt.Errorf("%T write field begin error 20:create_at: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CreateAt)); err != nil {
		return fmt.Errorf("%T.create_at (20) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 20:create_at: %s", p, err)
	}
	return err
}

func (p *TimuItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimuItem(%+v)", *p)
}

type TixingItem struct {
	Uid       string `thrift:"uid,1"`
	VersionId string `thrift:"version_id,2"`
	ChapterId string `thrift:"chapter_id,3"`
	Name      string `thrift:"name,4"`
	Sign      string `thrift:"sign,5"`
	CreateAt  string `thrift:"create_at,6"`
}

func NewTixingItem() *TixingItem {
	return &TixingItem{}
}

func (p *TixingItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TixingItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *TixingItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.VersionId = v
	}
	return nil
}

func (p *TixingItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ChapterId = v
	}
	return nil
}

func (p *TixingItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *TixingItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Sign = v
	}
	return nil
}

func (p *TixingItem) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.CreateAt = v
	}
	return nil
}

func (p *TixingItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("tixing_item"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TixingItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *TixingItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version_id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:version_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VersionId)); err != nil {
		return fmt.Errorf("%T.version_id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:version_id: %s", p, err)
	}
	return err
}

func (p *TixingItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chapter_id", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:chapter_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChapterId)); err != nil {
		return fmt.Errorf("%T.chapter_id (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:chapter_id: %s", p, err)
	}
	return err
}

func (p *TixingItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:name: %s", p, err)
	}
	return err
}

func (p *TixingItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sign", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:sign: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Sign)); err != nil {
		return fmt.Errorf("%T.sign (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:sign: %s", p, err)
	}
	return err
}

func (p *TixingItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_at", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:create_at: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CreateAt)); err != nil {
		return fmt.Errorf("%T.create_at (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:create_at: %s", p, err)
	}
	return err
}

func (p *TixingItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TixingItem(%+v)", *p)
}

type SourceItem struct {
	Uid       string `thrift:"uid,1"`
	VersionId string `thrift:"version_id,2"`
	ChapterId string `thrift:"chapter_id,3"`
	Name      string `thrift:"name,4"`
	Sign      string `thrift:"sign,5"`
	CreateAt  string `thrift:"create_at,6"`
}

func NewSourceItem() *SourceItem {
	return &SourceItem{}
}

func (p *SourceItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SourceItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *SourceItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.VersionId = v
	}
	return nil
}

func (p *SourceItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ChapterId = v
	}
	return nil
}

func (p *SourceItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *SourceItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Sign = v
	}
	return nil
}

func (p *SourceItem) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.CreateAt = v
	}
	return nil
}

func (p *SourceItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("source_item"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SourceItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *SourceItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version_id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:version_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VersionId)); err != nil {
		return fmt.Errorf("%T.version_id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:version_id: %s", p, err)
	}
	return err
}

func (p *SourceItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chapter_id", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:chapter_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChapterId)); err != nil {
		return fmt.Errorf("%T.chapter_id (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:chapter_id: %s", p, err)
	}
	return err
}

func (p *SourceItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:name: %s", p, err)
	}
	return err
}

func (p *SourceItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sign", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:sign: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Sign)); err != nil {
		return fmt.Errorf("%T.sign (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:sign: %s", p, err)
	}
	return err
}

func (p *SourceItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_at", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:create_at: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CreateAt)); err != nil {
		return fmt.Errorf("%T.create_at (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:create_at: %s", p, err)
	}
	return err
}

func (p *SourceItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SourceItem(%+v)", *p)
}

type ChapterItem struct {
	Uid       string `thrift:"uid,1"`
	VersionId string `thrift:"version_id,2"`
	Name      string `thrift:"name,3"`
	ChapterGd string `thrift:"chapter_gd,4"`
	Sign      string `thrift:"sign,5"`
	CreateAt  string `thrift:"create_at,6"`
}

func NewChapterItem() *ChapterItem {
	return &ChapterItem{}
}

func (p *ChapterItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChapterItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *ChapterItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.VersionId = v
	}
	return nil
}

func (p *ChapterItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *ChapterItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.ChapterGd = v
	}
	return nil
}

func (p *ChapterItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Sign = v
	}
	return nil
}

func (p *ChapterItem) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.CreateAt = v
	}
	return nil
}

func (p *ChapterItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("chapter_item"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ChapterItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *ChapterItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version_id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:version_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VersionId)); err != nil {
		return fmt.Errorf("%T.version_id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:version_id: %s", p, err)
	}
	return err
}

func (p *ChapterItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:name: %s", p, err)
	}
	return err
}

func (p *ChapterItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chapter_gd", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:chapter_gd: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChapterGd)); err != nil {
		return fmt.Errorf("%T.chapter_gd (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:chapter_gd: %s", p, err)
	}
	return err
}

func (p *ChapterItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sign", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:sign: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Sign)); err != nil {
		return fmt.Errorf("%T.sign (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:sign: %s", p, err)
	}
	return err
}

func (p *ChapterItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_at", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:create_at: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CreateAt)); err != nil {
		return fmt.Errorf("%T.create_at (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:create_at: %s", p, err)
	}
	return err
}

func (p *ChapterItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChapterItem(%+v)", *p)
}

type ModifyMeta struct {
	Uid         string `thrift:"uid,1"`
	RollId      string `thrift:"roll_id,2"`
	RollName    string `thrift:"roll_name,3"`
	GradeId     string `thrift:"grade_id,4"`
	GradeName   string `thrift:"grade_name,5"`
	SubjectId   string `thrift:"subject_id,6"`
	SubjectName string `thrift:"subject_name,7"`
	VersionId   string `thrift:"version_id,8"`
	VersionName string `thrift:"version_name,9"`
	ChapterId   string `thrift:"chapter_id,10"`
	ChapterName string `thrift:"chapter_name,11"`
	ChapterGd   string `thrift:"chapter_gd,12"`
	SourceId    string `thrift:"source_id,13"`
	SourceName  string `thrift:"source_name,14"`
	TiXingId    string `thrift:"ti_xing_id,15"`
	TiXingName  string `thrift:"ti_xing_name,16"`
	Sign        string `thrift:"sign,17"`
}

func NewModifyMeta() *ModifyMeta {
	return &ModifyMeta{}
}

func (p *ModifyMeta) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ModifyMeta) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *ModifyMeta) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RollId = v
	}
	return nil
}

func (p *ModifyMeta) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.RollName = v
	}
	return nil
}

func (p *ModifyMeta) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.GradeId = v
	}
	return nil
}

func (p *ModifyMeta) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.GradeName = v
	}
	return nil
}

func (p *ModifyMeta) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.SubjectId = v
	}
	return nil
}

func (p *ModifyMeta) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.SubjectName = v
	}
	return nil
}

func (p *ModifyMeta) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.VersionId = v
	}
	return nil
}

func (p *ModifyMeta) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.VersionName = v
	}
	return nil
}

func (p *ModifyMeta) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.ChapterId = v
	}
	return nil
}

func (p *ModifyMeta) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.ChapterName = v
	}
	return nil
}

func (p *ModifyMeta) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.ChapterGd = v
	}
	return nil
}

func (p *ModifyMeta) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *ModifyMeta) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.SourceName = v
	}
	return nil
}

func (p *ModifyMeta) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 15: %s")
	} else {
		p.TiXingId = v
	}
	return nil
}

func (p *ModifyMeta) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.TiXingName = v
	}
	return nil
}

func (p *ModifyMeta) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 17: %s")
	} else {
		p.Sign = v
	}
	return nil
}

func (p *ModifyMeta) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("modify_meta"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ModifyMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roll_id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:roll_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RollId)); err != nil {
		return fmt.Errorf("%T.roll_id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:roll_id: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roll_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:roll_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RollName)); err != nil {
		return fmt.Errorf("%T.roll_name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:roll_name: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grade_id", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:grade_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GradeId)); err != nil {
		return fmt.Errorf("%T.grade_id (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:grade_id: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grade_name", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:grade_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GradeName)); err != nil {
		return fmt.Errorf("%T.grade_name (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:grade_name: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subject_id", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:subject_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SubjectId)); err != nil {
		return fmt.Errorf("%T.subject_id (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:subject_id: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subject_name", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:subject_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SubjectName)); err != nil {
		return fmt.Errorf("%T.subject_name (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:subject_name: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version_id", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:version_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VersionId)); err != nil {
		return fmt.Errorf("%T.version_id (8) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:version_id: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version_name", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:version_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VersionName)); err != nil {
		return fmt.Errorf("%T.version_name (9) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:version_name: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chapter_id", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:chapter_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChapterId)); err != nil {
		return fmt.Errorf("%T.chapter_id (10) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:chapter_id: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chapter_name", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:chapter_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChapterName)); err != nil {
		return fmt.Errorf("%T.chapter_name (11) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:chapter_name: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chapter_gd", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:chapter_gd: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChapterGd)); err != nil {
		return fmt.Errorf("%T.chapter_gd (12) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:chapter_gd: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_id", thrift.STRING, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:source_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return fmt.Errorf("%T.source_id (13) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:source_id: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_name", thrift.STRING, 14); err != nil {
		return fmt.Errorf("%T write field begin error 14:source_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SourceName)); err != nil {
		return fmt.Errorf("%T.source_name (14) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 14:source_name: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ti_xing_id", thrift.STRING, 15); err != nil {
		return fmt.Errorf("%T write field begin error 15:ti_xing_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TiXingId)); err != nil {
		return fmt.Errorf("%T.ti_xing_id (15) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 15:ti_xing_id: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ti_xing_name", thrift.STRING, 16); err != nil {
		return fmt.Errorf("%T write field begin error 16:ti_xing_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TiXingName)); err != nil {
		return fmt.Errorf("%T.ti_xing_name (16) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 16:ti_xing_name: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sign", thrift.STRING, 17); err != nil {
		return fmt.Errorf("%T write field begin error 17:sign: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Sign)); err != nil {
		return fmt.Errorf("%T.sign (17) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 17:sign: %s", p, err)
	}
	return err
}

func (p *ModifyMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModifyMeta(%+v)", *p)
}

type ModifyItem struct {
	Id        int64       `thrift:"id,1"`
	Userid    int64       `thrift:"userid,2"`
	TiMuId    string      `thrift:"ti_mu_id,3"`
	Source    *Question   `thrift:"source,4"`
	Data      *Question   `thrift:"data,5"`
	Sign      string      `thrift:"sign,6"`
	Status    string      `thrift:"status,7"`
	Msg       string      `thrift:"msg,8"`
	Meta      *ModifyMeta `thrift:"meta,9"`
	Confirmer string      `thrift:"confirmer,10"`
	CreateAt  string      `thrift:"create_at,11"`
	UpdateAt  string      `thrift:"update_at,12"`
}

func NewModifyItem() *ModifyItem {
	return &ModifyItem{}
}

func (p *ModifyItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ModifyItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *ModifyItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Userid = v
	}
	return nil
}

func (p *ModifyItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.TiMuId = v
	}
	return nil
}

func (p *ModifyItem) readField4(iprot thrift.TProtocol) error {
	p.Source = NewQuestion()
	if err := p.Source.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Source)
	}
	return nil
}

func (p *ModifyItem) readField5(iprot thrift.TProtocol) error {
	p.Data = NewQuestion()
	if err := p.Data.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Data)
	}
	return nil
}

func (p *ModifyItem) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Sign = v
	}
	return nil
}

func (p *ModifyItem) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Status = v
	}
	return nil
}

func (p *ModifyItem) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Msg = v
	}
	return nil
}

func (p *ModifyItem) readField9(iprot thrift.TProtocol) error {
	p.Meta = NewModifyMeta()
	if err := p.Meta.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Meta)
	}
	return nil
}

func (p *ModifyItem) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.Confirmer = v
	}
	return nil
}

func (p *ModifyItem) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.CreateAt = v
	}
	return nil
}

func (p *ModifyItem) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.UpdateAt = v
	}
	return nil
}

func (p *ModifyItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("modify_item"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ModifyItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *ModifyItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Userid)); err != nil {
		return fmt.Errorf("%T.userid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userid: %s", p, err)
	}
	return err
}

func (p *ModifyItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ti_mu_id", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ti_mu_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TiMuId)); err != nil {
		return fmt.Errorf("%T.ti_mu_id (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ti_mu_id: %s", p, err)
	}
	return err
}

func (p *ModifyItem) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Source != nil {
		if err := oprot.WriteFieldBegin("source", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:source: %s", p, err)
		}
		if err := p.Source.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Source)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:source: %s", p, err)
		}
	}
	return err
}

func (p *ModifyItem) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Data != nil {
		if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:data: %s", p, err)
		}
		if err := p.Data.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Data)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:data: %s", p, err)
		}
	}
	return err
}

func (p *ModifyItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sign", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:sign: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Sign)); err != nil {
		return fmt.Errorf("%T.sign (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:sign: %s", p, err)
	}
	return err
}

func (p *ModifyItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:status: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return fmt.Errorf("%T.status (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:status: %s", p, err)
	}
	return err
}

func (p *ModifyItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:msg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return fmt.Errorf("%T.msg (8) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:msg: %s", p, err)
	}
	return err
}

func (p *ModifyItem) writeField9(oprot thrift.TProtocol) (err error) {
	if p.Meta != nil {
		if err := oprot.WriteFieldBegin("meta", thrift.STRUCT, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:meta: %s", p, err)
		}
		if err := p.Meta.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Meta)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:meta: %s", p, err)
		}
	}
	return err
}

func (p *ModifyItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confirmer", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:confirmer: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Confirmer)); err != nil {
		return fmt.Errorf("%T.confirmer (10) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:confirmer: %s", p, err)
	}
	return err
}

func (p *ModifyItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_at", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:create_at: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CreateAt)); err != nil {
		return fmt.Errorf("%T.create_at (11) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:create_at: %s", p, err)
	}
	return err
}

func (p *ModifyItem) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("update_at", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:update_at: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UpdateAt)); err != nil {
		return fmt.Errorf("%T.update_at (12) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:update_at: %s", p, err)
	}
	return err
}

func (p *ModifyItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModifyItem(%+v)", *p)
}

type SearchHitsTotal struct {
	Value    int64  `thrift:"value,1"`
	Relation string `thrift:"relation,2"`
}

func NewSearchHitsTotal() *SearchHitsTotal {
	return &SearchHitsTotal{}
}

func (p *SearchHitsTotal) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SearchHitsTotal) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *SearchHitsTotal) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Relation = v
	}
	return nil
}

func (p *SearchHitsTotal) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_hits_total"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SearchHitsTotal) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:value: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Value)); err != nil {
		return fmt.Errorf("%T.value (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:value: %s", p, err)
	}
	return err
}

func (p *SearchHitsTotal) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relation", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:relation: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Relation)); err != nil {
		return fmt.Errorf("%T.relation (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:relation: %s", p, err)
	}
	return err
}

func (p *SearchHitsTotal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchHitsTotal(%+v)", *p)
}

type SearchHitsItem struct {
	Index     string              `thrift:"index,1"`
	TypeA1    string              `thrift:"type,2"`
	Id        string              `thrift:"id,3"`
	Score     float64             `thrift:"score,4"`
	Source    *TimuItem           `thrift:"source,5"`
	HighLight map[string][]string `thrift:"high_light,6"`
}

func NewSearchHitsItem() *SearchHitsItem {
	return &SearchHitsItem{}
}

func (p *SearchHitsItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SearchHitsItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Index = v
	}
	return nil
}

func (p *SearchHitsItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *SearchHitsItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *SearchHitsItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Score = v
	}
	return nil
}

func (p *SearchHitsItem) readField5(iprot thrift.TProtocol) error {
	p.Source = NewTimuItem()
	if err := p.Source.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Source)
	}
	return nil
}

func (p *SearchHitsItem) readField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.HighLight = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key7 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list being: %s")
		}
		_val8 := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem9 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s")
			} else {
				_elem9 = v
			}
			_val8 = append(_val8, _elem9)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s")
		}
		p.HighLight[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *SearchHitsItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_hits_item"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SearchHitsItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:index: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Index)); err != nil {
		return fmt.Errorf("%T.index (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:index: %s", p, err)
	}
	return err
}

func (p *SearchHitsItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:type: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:type: %s", p, err)
	}
	return err
}

func (p *SearchHitsItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:id: %s", p, err)
	}
	return err
}

func (p *SearchHitsItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("score", thrift.DOUBLE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:score: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Score)); err != nil {
		return fmt.Errorf("%T.score (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:score: %s", p, err)
	}
	return err
}

func (p *SearchHitsItem) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Source != nil {
		if err := oprot.WriteFieldBegin("source", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:source: %s", p, err)
		}
		if err := p.Source.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Source)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:source: %s", p, err)
		}
	}
	return err
}

func (p *SearchHitsItem) writeField6(oprot thrift.TProtocol) (err error) {
	if p.HighLight != nil {
		if err := oprot.WriteFieldBegin("high_light", thrift.MAP, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:high_light: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.HighLight)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.HighLight {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range v {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:high_light: %s", p, err)
		}
	}
	return err
}

func (p *SearchHitsItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchHitsItem(%+v)", *p)
}

type SearchHits struct {
	Total    *SearchHitsTotal  `thrift:"total,1"`
	MaxScore float64           `thrift:"max_score,2"`
	Hits     []*SearchHitsItem `thrift:"hits,3"`
}

func NewSearchHits() *SearchHits {
	return &SearchHits{}
}

func (p *SearchHits) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SearchHits) readField1(iprot thrift.TProtocol) error {
	p.Total = NewSearchHitsTotal()
	if err := p.Total.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Total)
	}
	return nil
}

func (p *SearchHits) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.MaxScore = v
	}
	return nil
}

func (p *SearchHits) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Hits = make([]*SearchHitsItem, 0, size)
	for i := 0; i < size; i++ {
		_elem10 := NewSearchHitsItem()
		if err := _elem10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem10)
		}
		p.Hits = append(p.Hits, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SearchHits) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_hits"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SearchHits) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Total != nil {
		if err := oprot.WriteFieldBegin("total", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:total: %s", p, err)
		}
		if err := p.Total.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Total)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:total: %s", p, err)
		}
	}
	return err
}

func (p *SearchHits) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_score", thrift.DOUBLE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:max_score: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.MaxScore)); err != nil {
		return fmt.Errorf("%T.max_score (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:max_score: %s", p, err)
	}
	return err
}

func (p *SearchHits) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Hits != nil {
		if err := oprot.WriteFieldBegin("hits", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:hits: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hits)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Hits {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:hits: %s", p, err)
		}
	}
	return err
}

func (p *SearchHits) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchHits(%+v)", *p)
}

type SearchShards struct {
	Total      int64 `thrift:"total,1"`
	Successful int64 `thrift:"successful,2"`
	Skipped    int64 `thrift:"skipped,3"`
	Failed     int64 `thrift:"failed,4"`
}

func NewSearchShards() *SearchShards {
	return &SearchShards{}
}

func (p *SearchShards) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SearchShards) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Total = v
	}
	return nil
}

func (p *SearchShards) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Successful = v
	}
	return nil
}

func (p *SearchShards) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Skipped = v
	}
	return nil
}

func (p *SearchShards) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Failed = v
	}
	return nil
}

func (p *SearchShards) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_shards"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SearchShards) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:total: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Total)); err != nil {
		return fmt.Errorf("%T.total (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:total: %s", p, err)
	}
	return err
}

func (p *SearchShards) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("successful", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:successful: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Successful)); err != nil {
		return fmt.Errorf("%T.successful (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:successful: %s", p, err)
	}
	return err
}

func (p *SearchShards) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("skipped", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:skipped: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Skipped)); err != nil {
		return fmt.Errorf("%T.skipped (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:skipped: %s", p, err)
	}
	return err
}

func (p *SearchShards) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failed", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:failed: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Failed)); err != nil {
		return fmt.Errorf("%T.failed (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:failed: %s", p, err)
	}
	return err
}

func (p *SearchShards) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchShards(%+v)", *p)
}

type SearchTopic struct {
	Took    int32         `thrift:"took,1"`
	TimeOut bool          `thrift:"time_out,2"`
	Shards  *SearchShards `thrift:"shards,3"`
	Hits    *SearchHits   `thrift:"hits,4"`
}

func NewSearchTopic() *SearchTopic {
	return &SearchTopic{}
}

func (p *SearchTopic) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SearchTopic) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Took = v
	}
	return nil
}

func (p *SearchTopic) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TimeOut = v
	}
	return nil
}

func (p *SearchTopic) readField3(iprot thrift.TProtocol) error {
	p.Shards = NewSearchShards()
	if err := p.Shards.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Shards)
	}
	return nil
}

func (p *SearchTopic) readField4(iprot thrift.TProtocol) error {
	p.Hits = NewSearchHits()
	if err := p.Hits.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Hits)
	}
	return nil
}

func (p *SearchTopic) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_topic"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SearchTopic) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("took", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:took: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Took)); err != nil {
		return fmt.Errorf("%T.took (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:took: %s", p, err)
	}
	return err
}

func (p *SearchTopic) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("time_out", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:time_out: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.TimeOut)); err != nil {
		return fmt.Errorf("%T.time_out (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:time_out: %s", p, err)
	}
	return err
}

func (p *SearchTopic) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Shards != nil {
		if err := oprot.WriteFieldBegin("shards", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:shards: %s", p, err)
		}
		if err := p.Shards.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Shards)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:shards: %s", p, err)
		}
	}
	return err
}

func (p *SearchTopic) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Hits != nil {
		if err := oprot.WriteFieldBegin("hits", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:hits: %s", p, err)
		}
		if err := p.Hits.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Hits)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:hits: %s", p, err)
		}
	}
	return err
}

func (p *SearchTopic) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchTopic(%+v)", *p)
}

type GradeCate struct {
	Uid      string `thrift:"uid,1"`
	RollId   string `thrift:"roll_id,2"`
	Sort     int64  `thrift:"sort,3"`
	Name     string `thrift:"name,4"`
	CreateAt string `thrift:"create_at,5"`
}

func NewGradeCate() *GradeCate {
	return &GradeCate{}
}

func (p *GradeCate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GradeCate) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *GradeCate) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RollId = v
	}
	return nil
}

func (p *GradeCate) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Sort = v
	}
	return nil
}

func (p *GradeCate) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *GradeCate) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.CreateAt = v
	}
	return nil
}

func (p *GradeCate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grade_cate"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GradeCate) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *GradeCate) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roll_id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:roll_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RollId)); err != nil {
		return fmt.Errorf("%T.roll_id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:roll_id: %s", p, err)
	}
	return err
}

func (p *GradeCate) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sort", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:sort: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Sort)); err != nil {
		return fmt.Errorf("%T.sort (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:sort: %s", p, err)
	}
	return err
}

func (p *GradeCate) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:name: %s", p, err)
	}
	return err
}

func (p *GradeCate) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_at", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:create_at: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CreateAt)); err != nil {
		return fmt.Errorf("%T.create_at (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:create_at: %s", p, err)
	}
	return err
}

func (p *GradeCate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GradeCate(%+v)", *p)
}

type SchoolStatic struct {
	TypeA1  int64    `thrift:"type,1"`
	Title   string   `thrift:"title,2"`
	Content []string `thrift:"content,3"`
	Href    string   `thrift:"href,4"`
	Target  string   `thrift:"target,5"`
}

func NewSchoolStatic() *SchoolStatic {
	return &SchoolStatic{}
}

func (p *SchoolStatic) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SchoolStatic) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *SchoolStatic) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Title = v
	}
	return nil
}

func (p *SchoolStatic) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Content = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem11 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem11 = v
		}
		p.Content = append(p.Content, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SchoolStatic) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Href = v
	}
	return nil
}

func (p *SchoolStatic) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Target = v
	}
	return nil
}

func (p *SchoolStatic) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("school_static"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SchoolStatic) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *SchoolStatic) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:title: %s", p, err)
	}
	return err
}

func (p *SchoolStatic) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Content != nil {
		if err := oprot.WriteFieldBegin("content", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:content: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Content)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Content {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:content: %s", p, err)
		}
	}
	return err
}

func (p *SchoolStatic) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("href", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:href: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Href)); err != nil {
		return fmt.Errorf("%T.href (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:href: %s", p, err)
	}
	return err
}

func (p *SchoolStatic) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("target", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:target: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Target)); err != nil {
		return fmt.Errorf("%T.target (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:target: %s", p, err)
	}
	return err
}

func (p *SchoolStatic) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchoolStatic(%+v)", *p)
}

type GradeItem struct {
	Uid     int64  `thrift:"uid,1"`
	Name    string `thrift:"name,2"`
	Sort    int64  `thrift:"sort,3"`
	Href    string `thrift:"href,4"`
	Heritid string `thrift:"heritid,5"`
}

func NewGradeItem() *GradeItem {
	return &GradeItem{}
}

func (p *GradeItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GradeItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *GradeItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *GradeItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Sort = v
	}
	return nil
}

func (p *GradeItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Href = v
	}
	return nil
}

func (p *GradeItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Heritid = v
	}
	return nil
}

func (p *GradeItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grade_item"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GradeItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *GradeItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *GradeItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sort", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:sort: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Sort)); err != nil {
		return fmt.Errorf("%T.sort (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:sort: %s", p, err)
	}
	return err
}

func (p *GradeItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("href", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:href: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Href)); err != nil {
		return fmt.Errorf("%T.href (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:href: %s", p, err)
	}
	return err
}

func (p *GradeItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("heritid", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:heritid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Heritid)); err != nil {
		return fmt.Errorf("%T.heritid (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:heritid: %s", p, err)
	}
	return err
}

func (p *GradeItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GradeItem(%+v)", *p)
}

type GradeSubject struct {
	RollUid   string       `thrift:"roll_uid,1"`
	GradeUid  string       `thrift:"grade_uid,2"`
	GradeName string       `thrift:"grade_name,3"`
	Sort      int64        `thrift:"sort,4"`
	Subjects  []*GradeItem `thrift:"subjects,5"`
}

func NewGradeSubject() *GradeSubject {
	return &GradeSubject{}
}

func (p *GradeSubject) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GradeSubject) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.RollUid = v
	}
	return nil
}

func (p *GradeSubject) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.GradeUid = v
	}
	return nil
}

func (p *GradeSubject) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.GradeName = v
	}
	return nil
}

func (p *GradeSubject) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Sort = v
	}
	return nil
}

func (p *GradeSubject) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Subjects = make([]*GradeItem, 0, size)
	for i := 0; i < size; i++ {
		_elem12 := NewGradeItem()
		if err := _elem12.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem12)
		}
		p.Subjects = append(p.Subjects, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GradeSubject) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grade_subject"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GradeSubject) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roll_uid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:roll_uid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RollUid)); err != nil {
		return fmt.Errorf("%T.roll_uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:roll_uid: %s", p, err)
	}
	return err
}

func (p *GradeSubject) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grade_uid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:grade_uid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GradeUid)); err != nil {
		return fmt.Errorf("%T.grade_uid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:grade_uid: %s", p, err)
	}
	return err
}

func (p *GradeSubject) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grade_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:grade_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GradeName)); err != nil {
		return fmt.Errorf("%T.grade_name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:grade_name: %s", p, err)
	}
	return err
}

func (p *GradeSubject) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sort", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:sort: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Sort)); err != nil {
		return fmt.Errorf("%T.sort (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:sort: %s", p, err)
	}
	return err
}

func (p *GradeSubject) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Subjects != nil {
		if err := oprot.WriteFieldBegin("subjects", thrift.LIST, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:subjects: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Subjects)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Subjects {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:subjects: %s", p, err)
		}
	}
	return err
}

func (p *GradeSubject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GradeSubject(%+v)", *p)
}

type SchoolRoll struct {
	Uid      int64  `thrift:"uid,1"`
	Index    int64  `thrift:"index,2"`
	Name     string `thrift:"name,3"`
	CreateAt string `thrift:"create_at,4"`
}

func NewSchoolRoll() *SchoolRoll {
	return &SchoolRoll{}
}

func (p *SchoolRoll) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SchoolRoll) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *SchoolRoll) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Index = v
	}
	return nil
}

func (p *SchoolRoll) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *SchoolRoll) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.CreateAt = v
	}
	return nil
}

func (p *SchoolRoll) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("school_roll"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SchoolRoll) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *SchoolRoll) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:index: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Index)); err != nil {
		return fmt.Errorf("%T.index (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:index: %s", p, err)
	}
	return err
}

func (p *SchoolRoll) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:name: %s", p, err)
	}
	return err
}

func (p *SchoolRoll) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_at", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:create_at: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CreateAt)); err != nil {
		return fmt.Errorf("%T.create_at (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:create_at: %s", p, err)
	}
	return err
}

func (p *SchoolRoll) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchoolRoll(%+v)", *p)
}

type SubjectCate struct {
	Uid      int64  `thrift:"uid,1"`
	RollId   string `thrift:"roll_id,2"`
	GradeId  string `thrift:"grade_id,3"`
	Subject  string `thrift:"subject,4"`
	Sort     int64  `thrift:"sort,5"`
	Href     string `thrift:"href,6"`
	CreateAt string `thrift:"create_at,7"`
}

func NewSubjectCate() *SubjectCate {
	return &SubjectCate{}
}

func (p *SubjectCate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SubjectCate) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *SubjectCate) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RollId = v
	}
	return nil
}

func (p *SubjectCate) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.GradeId = v
	}
	return nil
}

func (p *SubjectCate) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Subject = v
	}
	return nil
}

func (p *SubjectCate) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Sort = v
	}
	return nil
}

func (p *SubjectCate) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Href = v
	}
	return nil
}

func (p *SubjectCate) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.CreateAt = v
	}
	return nil
}

func (p *SubjectCate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("subject_cate"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SubjectCate) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *SubjectCate) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roll_id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:roll_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RollId)); err != nil {
		return fmt.Errorf("%T.roll_id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:roll_id: %s", p, err)
	}
	return err
}

func (p *SubjectCate) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grade_id", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:grade_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GradeId)); err != nil {
		return fmt.Errorf("%T.grade_id (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:grade_id: %s", p, err)
	}
	return err
}

func (p *SubjectCate) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subject", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:subject: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Subject)); err != nil {
		return fmt.Errorf("%T.subject (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:subject: %s", p, err)
	}
	return err
}

func (p *SubjectCate) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sort", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:sort: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Sort)); err != nil {
		return fmt.Errorf("%T.sort (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:sort: %s", p, err)
	}
	return err
}

func (p *SubjectCate) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("href", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:href: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Href)); err != nil {
		return fmt.Errorf("%T.href (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:href: %s", p, err)
	}
	return err
}

func (p *SubjectCate) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("create_at", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:create_at: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CreateAt)); err != nil {
		return fmt.Errorf("%T.create_at (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:create_at: %s", p, err)
	}
	return err
}

func (p *SubjectCate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectCate(%+v)", *p)
}
