// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package s2sname

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/heegspace/thrift"
	"heegproto/rescode"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = rescode.GoUnusedProtection__
// Attributes:
//  - Host
//  - Port
//  - Prority
//  - Name
//  - Expired
type S2sname struct {
  Host string `thrift:"host,1" db:"host" json:"host"`
  Port int32 `thrift:"port,2" db:"port" json:"port"`
  Prority int32 `thrift:"prority,3" db:"prority" json:"prority"`
  Name string `thrift:"name,4" db:"name" json:"name"`
  Expired int64 `thrift:"Expired,5" db:"Expired" json:"Expired"`
}

func NewS2sname() *S2sname {
  return &S2sname{}
}


func (p *S2sname) GetHost() string {
  return p.Host
}

func (p *S2sname) GetPort() int32 {
  return p.Port
}

func (p *S2sname) GetPrority() int32 {
  return p.Prority
}

func (p *S2sname) GetName() string {
  return p.Name
}

func (p *S2sname) GetExpired() int64 {
  return p.Expired
}
func (p *S2sname) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *S2sname)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *S2sname)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *S2sname)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Prority = v
}
  return nil
}

func (p *S2sname)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *S2sname)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Expired = v
}
  return nil
}

func (p *S2sname) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("s2sname"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *S2sname) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteString(string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *S2sname) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  return err
}

func (p *S2sname) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prority", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:prority: ", p), err) }
  if err := oprot.WriteI32(int32(p.Prority)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prority (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:prority: ", p), err) }
  return err
}

func (p *S2sname) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err) }
  return err
}

func (p *S2sname) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Expired", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Expired: ", p), err) }
  if err := oprot.WriteI64(int64(p.Expired)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Expired (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Expired: ", p), err) }
  return err
}

func (p *S2sname) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("S2sname(%+v)", *p)
}

// Attributes:
//  - Name
//  - S2s
type RegisterReq struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  S2s *S2sname `thrift:"s2s,2" db:"s2s" json:"s2s"`
}

func NewRegisterReq() *RegisterReq {
  return &RegisterReq{}
}


func (p *RegisterReq) GetName() string {
  return p.Name
}
var RegisterReq_S2s_DEFAULT *S2sname
func (p *RegisterReq) GetS2s() *S2sname {
  if !p.IsSetS2s() {
    return RegisterReq_S2s_DEFAULT
  }
return p.S2s
}
func (p *RegisterReq) IsSetS2s() bool {
  return p.S2s != nil
}

func (p *RegisterReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *RegisterReq)  ReadField2(iprot thrift.TProtocol) error {
  p.S2s = &S2sname{}
  if err := p.S2s.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.S2s), err)
  }
  return nil
}

func (p *RegisterReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("register_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *RegisterReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s2s", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:s2s: ", p), err) }
  if err := p.S2s.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.S2s), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:s2s: ", p), err) }
  return err
}

func (p *RegisterReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type RegisterRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewRegisterRes() *RegisterRes {
  return &RegisterRes{}
}


func (p *RegisterRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *RegisterRes) GetResmsg() string {
  return p.Resmsg
}
func (p *RegisterRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *RegisterRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *RegisterRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("register_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *RegisterRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *RegisterRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterRes(%+v)", *p)
}

// Attributes:
//  - Name
//  - S2s
type UpdateReq struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  S2s *S2sname `thrift:"s2s,2" db:"s2s" json:"s2s"`
}

func NewUpdateReq() *UpdateReq {
  return &UpdateReq{}
}


func (p *UpdateReq) GetName() string {
  return p.Name
}
var UpdateReq_S2s_DEFAULT *S2sname
func (p *UpdateReq) GetS2s() *S2sname {
  if !p.IsSetS2s() {
    return UpdateReq_S2s_DEFAULT
  }
return p.S2s
}
func (p *UpdateReq) IsSetS2s() bool {
  return p.S2s != nil
}

func (p *UpdateReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *UpdateReq)  ReadField2(iprot thrift.TProtocol) error {
  p.S2s = &S2sname{}
  if err := p.S2s.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.S2s), err)
  }
  return nil
}

func (p *UpdateReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *UpdateReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s2s", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:s2s: ", p), err) }
  if err := p.S2s.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.S2s), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:s2s: ", p), err) }
  return err
}

func (p *UpdateReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type UpdateRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewUpdateRes() *UpdateRes {
  return &UpdateRes{}
}


func (p *UpdateRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *UpdateRes) GetResmsg() string {
  return p.Resmsg
}
func (p *UpdateRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *UpdateRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *UpdateRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *UpdateRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *UpdateRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateRes(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
//  - S2ss
type FetchRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
  S2ss []*S2sname `thrift:"s2ss,3" db:"s2ss" json:"s2ss"`
}

func NewFetchRes() *FetchRes {
  return &FetchRes{}
}


func (p *FetchRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *FetchRes) GetResmsg() string {
  return p.Resmsg
}

func (p *FetchRes) GetS2ss() []*S2sname {
  return p.S2ss
}
func (p *FetchRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FetchRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *FetchRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *FetchRes)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*S2sname, 0, size)
  p.S2ss =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &S2sname{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.S2ss = append(p.S2ss, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FetchRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetch_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *FetchRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *FetchRes) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s2ss", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:s2ss: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.S2ss)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.S2ss {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:s2ss: ", p), err) }
  return err
}

func (p *FetchRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchRes(%+v)", *p)
}

// Attributes:
//  - Name
type HeartReq struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewHeartReq() *HeartReq {
  return &HeartReq{}
}


func (p *HeartReq) GetName() string {
  return p.Name
}
func (p *HeartReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HeartReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *HeartReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("heart_req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *HeartReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartReq(%+v)", *p)
}

// Attributes:
//  - Rescode
//  - Resmsg
type HeartRes struct {
  Rescode rescode.Code `thrift:"rescode,1" db:"rescode" json:"rescode"`
  Resmsg string `thrift:"resmsg,2" db:"resmsg" json:"resmsg"`
}

func NewHeartRes() *HeartRes {
  return &HeartRes{}
}


func (p *HeartRes) GetRescode() rescode.Code {
  return p.Rescode
}

func (p *HeartRes) GetResmsg() string {
  return p.Resmsg
}
func (p *HeartRes) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HeartRes)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := rescode.Code(v)
  p.Rescode = temp
}
  return nil
}

func (p *HeartRes)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resmsg = v
}
  return nil
}

func (p *HeartRes) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("heart_res"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartRes) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rescode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rescode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Rescode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rescode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rescode: ", p), err) }
  return err
}

func (p *HeartRes) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resmsg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resmsg: ", p), err) }
  if err := oprot.WriteString(string(p.Resmsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resmsg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resmsg: ", p), err) }
  return err
}

func (p *HeartRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartRes(%+v)", *p)
}

type S2snameService interface {
  // Parameters:
  //  - Req
  RegisterS2sname(ctx context.Context, req *RegisterReq) (r *RegisterRes, err error)
  // Parameters:
  //  - Req
  UpdateS2sname(ctx context.Context, req *UpdateReq) (r *UpdateRes, err error)
  // Parameters:
  //  - Req
  FetchS2sname(ctx context.Context, req string) (r *FetchRes, err error)
  FetchS2snames(ctx context.Context) (r *FetchRes, err error)
  // Parameters:
  //  - Req
  Heart(ctx context.Context, req *HeartReq) (r *HeartRes, err error)
}

type S2snameServiceClient struct {
  c thrift.TClient
}

func NewS2snameServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *S2snameServiceClient {
  return &S2snameServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewS2snameServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *S2snameServiceClient {
  return &S2snameServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewS2snameServiceClient(c thrift.TClient) *S2snameServiceClient {
  return &S2snameServiceClient{
    c: c,
  }
}

func (p *S2snameServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Req
func (p *S2snameServiceClient) RegisterS2sname(ctx context.Context, req *RegisterReq) (r *RegisterRes, err error) {
  var _args1 S2snameServiceRegisterS2snameArgs
  _args1.Req = req
  var _result2 S2snameServiceRegisterS2snameResult
  if err = p.Client_().Call(ctx, "registerS2sname", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *S2snameServiceClient) UpdateS2sname(ctx context.Context, req *UpdateReq) (r *UpdateRes, err error) {
  var _args3 S2snameServiceUpdateS2snameArgs
  _args3.Req = req
  var _result4 S2snameServiceUpdateS2snameResult
  if err = p.Client_().Call(ctx, "updateS2sname", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *S2snameServiceClient) FetchS2sname(ctx context.Context, req string) (r *FetchRes, err error) {
  var _args5 S2snameServiceFetchS2snameArgs
  _args5.Req = req
  var _result6 S2snameServiceFetchS2snameResult
  if err = p.Client_().Call(ctx, "fetchS2sname", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

func (p *S2snameServiceClient) FetchS2snames(ctx context.Context) (r *FetchRes, err error) {
  var _args7 S2snameServiceFetchS2snamesArgs
  var _result8 S2snameServiceFetchS2snamesResult
  if err = p.Client_().Call(ctx, "fetchS2snames", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *S2snameServiceClient) Heart(ctx context.Context, req *HeartReq) (r *HeartRes, err error) {
  var _args9 S2snameServiceHeartArgs
  _args9.Req = req
  var _result10 S2snameServiceHeartResult
  if err = p.Client_().Call(ctx, "heart", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

type S2snameServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler S2snameService
}

func (p *S2snameServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *S2snameServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *S2snameServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewS2snameServiceProcessor(handler S2snameService) *S2snameServiceProcessor {

  self11 := &S2snameServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self11.processorMap["registerS2sname"] = &s2snameServiceProcessorRegisterS2sname{handler:handler}
  self11.processorMap["updateS2sname"] = &s2snameServiceProcessorUpdateS2sname{handler:handler}
  self11.processorMap["fetchS2sname"] = &s2snameServiceProcessorFetchS2sname{handler:handler}
  self11.processorMap["fetchS2snames"] = &s2snameServiceProcessorFetchS2snames{handler:handler}
  self11.processorMap["heart"] = &s2snameServiceProcessorHeart{handler:handler}
return self11
}

func (p *S2snameServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x12 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x12.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x12

}

type s2snameServiceProcessorRegisterS2sname struct {
  handler S2snameService
}

func (p *s2snameServiceProcessorRegisterS2sname) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := S2snameServiceRegisterS2snameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerS2sname", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := S2snameServiceRegisterS2snameResult{}
var retval *RegisterRes
  var err2 error
  if retval, err2 = p.handler.RegisterS2sname(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerS2sname: " + err2.Error())
    oprot.WriteMessageBegin("registerS2sname", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("registerS2sname", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type s2snameServiceProcessorUpdateS2sname struct {
  handler S2snameService
}

func (p *s2snameServiceProcessorUpdateS2sname) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := S2snameServiceUpdateS2snameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateS2sname", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := S2snameServiceUpdateS2snameResult{}
var retval *UpdateRes
  var err2 error
  if retval, err2 = p.handler.UpdateS2sname(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateS2sname: " + err2.Error())
    oprot.WriteMessageBegin("updateS2sname", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateS2sname", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type s2snameServiceProcessorFetchS2sname struct {
  handler S2snameService
}

func (p *s2snameServiceProcessorFetchS2sname) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := S2snameServiceFetchS2snameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchS2sname", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := S2snameServiceFetchS2snameResult{}
var retval *FetchRes
  var err2 error
  if retval, err2 = p.handler.FetchS2sname(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchS2sname: " + err2.Error())
    oprot.WriteMessageBegin("fetchS2sname", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchS2sname", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type s2snameServiceProcessorFetchS2snames struct {
  handler S2snameService
}

func (p *s2snameServiceProcessorFetchS2snames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := S2snameServiceFetchS2snamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchS2snames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := S2snameServiceFetchS2snamesResult{}
var retval *FetchRes
  var err2 error
  if retval, err2 = p.handler.FetchS2snames(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchS2snames: " + err2.Error())
    oprot.WriteMessageBegin("fetchS2snames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchS2snames", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type s2snameServiceProcessorHeart struct {
  handler S2snameService
}

func (p *s2snameServiceProcessorHeart) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := S2snameServiceHeartArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("heart", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := S2snameServiceHeartResult{}
var retval *HeartRes
  var err2 error
  if retval, err2 = p.handler.Heart(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heart: " + err2.Error())
    oprot.WriteMessageBegin("heart", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("heart", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type S2snameServiceRegisterS2snameArgs struct {
  Req *RegisterReq `thrift:"req,1" db:"req" json:"req"`
}

func NewS2snameServiceRegisterS2snameArgs() *S2snameServiceRegisterS2snameArgs {
  return &S2snameServiceRegisterS2snameArgs{}
}

var S2snameServiceRegisterS2snameArgs_Req_DEFAULT *RegisterReq
func (p *S2snameServiceRegisterS2snameArgs) GetReq() *RegisterReq {
  if !p.IsSetReq() {
    return S2snameServiceRegisterS2snameArgs_Req_DEFAULT
  }
return p.Req
}
func (p *S2snameServiceRegisterS2snameArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *S2snameServiceRegisterS2snameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *S2snameServiceRegisterS2snameArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &RegisterReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *S2snameServiceRegisterS2snameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerS2sname_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *S2snameServiceRegisterS2snameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *S2snameServiceRegisterS2snameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("S2snameServiceRegisterS2snameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type S2snameServiceRegisterS2snameResult struct {
  Success *RegisterRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewS2snameServiceRegisterS2snameResult() *S2snameServiceRegisterS2snameResult {
  return &S2snameServiceRegisterS2snameResult{}
}

var S2snameServiceRegisterS2snameResult_Success_DEFAULT *RegisterRes
func (p *S2snameServiceRegisterS2snameResult) GetSuccess() *RegisterRes {
  if !p.IsSetSuccess() {
    return S2snameServiceRegisterS2snameResult_Success_DEFAULT
  }
return p.Success
}
func (p *S2snameServiceRegisterS2snameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *S2snameServiceRegisterS2snameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *S2snameServiceRegisterS2snameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RegisterRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *S2snameServiceRegisterS2snameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerS2sname_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *S2snameServiceRegisterS2snameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *S2snameServiceRegisterS2snameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("S2snameServiceRegisterS2snameResult(%+v)", *p)
}

// Attributes:
//  - Req
type S2snameServiceUpdateS2snameArgs struct {
  Req *UpdateReq `thrift:"req,1" db:"req" json:"req"`
}

func NewS2snameServiceUpdateS2snameArgs() *S2snameServiceUpdateS2snameArgs {
  return &S2snameServiceUpdateS2snameArgs{}
}

var S2snameServiceUpdateS2snameArgs_Req_DEFAULT *UpdateReq
func (p *S2snameServiceUpdateS2snameArgs) GetReq() *UpdateReq {
  if !p.IsSetReq() {
    return S2snameServiceUpdateS2snameArgs_Req_DEFAULT
  }
return p.Req
}
func (p *S2snameServiceUpdateS2snameArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *S2snameServiceUpdateS2snameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *S2snameServiceUpdateS2snameArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &UpdateReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *S2snameServiceUpdateS2snameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateS2sname_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *S2snameServiceUpdateS2snameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *S2snameServiceUpdateS2snameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("S2snameServiceUpdateS2snameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type S2snameServiceUpdateS2snameResult struct {
  Success *UpdateRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewS2snameServiceUpdateS2snameResult() *S2snameServiceUpdateS2snameResult {
  return &S2snameServiceUpdateS2snameResult{}
}

var S2snameServiceUpdateS2snameResult_Success_DEFAULT *UpdateRes
func (p *S2snameServiceUpdateS2snameResult) GetSuccess() *UpdateRes {
  if !p.IsSetSuccess() {
    return S2snameServiceUpdateS2snameResult_Success_DEFAULT
  }
return p.Success
}
func (p *S2snameServiceUpdateS2snameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *S2snameServiceUpdateS2snameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *S2snameServiceUpdateS2snameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UpdateRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *S2snameServiceUpdateS2snameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateS2sname_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *S2snameServiceUpdateS2snameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *S2snameServiceUpdateS2snameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("S2snameServiceUpdateS2snameResult(%+v)", *p)
}

// Attributes:
//  - Req
type S2snameServiceFetchS2snameArgs struct {
  Req string `thrift:"req,1" db:"req" json:"req"`
}

func NewS2snameServiceFetchS2snameArgs() *S2snameServiceFetchS2snameArgs {
  return &S2snameServiceFetchS2snameArgs{}
}


func (p *S2snameServiceFetchS2snameArgs) GetReq() string {
  return p.Req
}
func (p *S2snameServiceFetchS2snameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *S2snameServiceFetchS2snameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Req = v
}
  return nil
}

func (p *S2snameServiceFetchS2snameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchS2sname_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *S2snameServiceFetchS2snameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := oprot.WriteString(string(p.Req)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *S2snameServiceFetchS2snameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("S2snameServiceFetchS2snameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type S2snameServiceFetchS2snameResult struct {
  Success *FetchRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewS2snameServiceFetchS2snameResult() *S2snameServiceFetchS2snameResult {
  return &S2snameServiceFetchS2snameResult{}
}

var S2snameServiceFetchS2snameResult_Success_DEFAULT *FetchRes
func (p *S2snameServiceFetchS2snameResult) GetSuccess() *FetchRes {
  if !p.IsSetSuccess() {
    return S2snameServiceFetchS2snameResult_Success_DEFAULT
  }
return p.Success
}
func (p *S2snameServiceFetchS2snameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *S2snameServiceFetchS2snameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *S2snameServiceFetchS2snameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FetchRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *S2snameServiceFetchS2snameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchS2sname_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *S2snameServiceFetchS2snameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *S2snameServiceFetchS2snameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("S2snameServiceFetchS2snameResult(%+v)", *p)
}

type S2snameServiceFetchS2snamesArgs struct {
}

func NewS2snameServiceFetchS2snamesArgs() *S2snameServiceFetchS2snamesArgs {
  return &S2snameServiceFetchS2snamesArgs{}
}

func (p *S2snameServiceFetchS2snamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *S2snameServiceFetchS2snamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchS2snames_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *S2snameServiceFetchS2snamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("S2snameServiceFetchS2snamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type S2snameServiceFetchS2snamesResult struct {
  Success *FetchRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewS2snameServiceFetchS2snamesResult() *S2snameServiceFetchS2snamesResult {
  return &S2snameServiceFetchS2snamesResult{}
}

var S2snameServiceFetchS2snamesResult_Success_DEFAULT *FetchRes
func (p *S2snameServiceFetchS2snamesResult) GetSuccess() *FetchRes {
  if !p.IsSetSuccess() {
    return S2snameServiceFetchS2snamesResult_Success_DEFAULT
  }
return p.Success
}
func (p *S2snameServiceFetchS2snamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *S2snameServiceFetchS2snamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *S2snameServiceFetchS2snamesResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FetchRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *S2snameServiceFetchS2snamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchS2snames_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *S2snameServiceFetchS2snamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *S2snameServiceFetchS2snamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("S2snameServiceFetchS2snamesResult(%+v)", *p)
}

// Attributes:
//  - Req
type S2snameServiceHeartArgs struct {
  Req *HeartReq `thrift:"req,1" db:"req" json:"req"`
}

func NewS2snameServiceHeartArgs() *S2snameServiceHeartArgs {
  return &S2snameServiceHeartArgs{}
}

var S2snameServiceHeartArgs_Req_DEFAULT *HeartReq
func (p *S2snameServiceHeartArgs) GetReq() *HeartReq {
  if !p.IsSetReq() {
    return S2snameServiceHeartArgs_Req_DEFAULT
  }
return p.Req
}
func (p *S2snameServiceHeartArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *S2snameServiceHeartArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *S2snameServiceHeartArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &HeartReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *S2snameServiceHeartArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("heart_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *S2snameServiceHeartArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *S2snameServiceHeartArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("S2snameServiceHeartArgs(%+v)", *p)
}

// Attributes:
//  - Success
type S2snameServiceHeartResult struct {
  Success *HeartRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewS2snameServiceHeartResult() *S2snameServiceHeartResult {
  return &S2snameServiceHeartResult{}
}

var S2snameServiceHeartResult_Success_DEFAULT *HeartRes
func (p *S2snameServiceHeartResult) GetSuccess() *HeartRes {
  if !p.IsSetSuccess() {
    return S2snameServiceHeartResult_Success_DEFAULT
  }
return p.Success
}
func (p *S2snameServiceHeartResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *S2snameServiceHeartResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *S2snameServiceHeartResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HeartRes{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *S2snameServiceHeartResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("heart_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *S2snameServiceHeartResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *S2snameServiceHeartResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("S2snameServiceHeartResult(%+v)", *p)
}


