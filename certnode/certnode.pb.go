// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: certnode.proto

package certnode

import (
	common "common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	rescode "rescode"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubmitCertReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Cert  *common.PersonCert `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Extra map[string]string  `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubmitCertReq) Reset() {
	*x = SubmitCertReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitCertReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCertReq) ProtoMessage() {}

func (x *SubmitCertReq) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCertReq.ProtoReflect.Descriptor instead.
func (*SubmitCertReq) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{0}
}

func (x *SubmitCertReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SubmitCertReq) GetCert() *common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *SubmitCertReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type SubmitCertRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubmitCertRes) Reset() {
	*x = SubmitCertRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitCertRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCertRes) ProtoMessage() {}

func (x *SubmitCertRes) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCertRes.ProtoReflect.Descriptor instead.
func (*SubmitCertRes) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitCertRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *SubmitCertRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *SubmitCertRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertApprovedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth        *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid         int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	ApproveUid  int64             `protobuf:"varint,3,opt,name=approve_uid,json=approveUid,proto3" json:"approve_uid,omitempty"`
	ApproveName string            `protobuf:"bytes,4,opt,name=approve_name,json=approveName,proto3" json:"approve_name,omitempty"`
	Info        string            `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	Extra       map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertApprovedReq) Reset() {
	*x = CertApprovedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertApprovedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertApprovedReq) ProtoMessage() {}

func (x *CertApprovedReq) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertApprovedReq.ProtoReflect.Descriptor instead.
func (*CertApprovedReq) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{2}
}

func (x *CertApprovedReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CertApprovedReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CertApprovedReq) GetApproveUid() int64 {
	if x != nil {
		return x.ApproveUid
	}
	return 0
}

func (x *CertApprovedReq) GetApproveName() string {
	if x != nil {
		return x.ApproveName
	}
	return ""
}

func (x *CertApprovedReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *CertApprovedReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertApprovedRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cert    *common.PersonCert `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertApprovedRes) Reset() {
	*x = CertApprovedRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertApprovedRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertApprovedRes) ProtoMessage() {}

func (x *CertApprovedRes) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertApprovedRes.ProtoReflect.Descriptor instead.
func (*CertApprovedRes) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{3}
}

func (x *CertApprovedRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CertApprovedRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CertApprovedRes) GetCert() *common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertApprovedRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertRefuseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth       *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid        int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	RefuseUid  int64             `protobuf:"varint,3,opt,name=refuse_uid,json=refuseUid,proto3" json:"refuse_uid,omitempty"`
	RefuseName string            `protobuf:"bytes,4,opt,name=refuse_name,json=refuseName,proto3" json:"refuse_name,omitempty"`
	Info       string            `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	Extra      map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertRefuseReq) Reset() {
	*x = CertRefuseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertRefuseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertRefuseReq) ProtoMessage() {}

func (x *CertRefuseReq) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertRefuseReq.ProtoReflect.Descriptor instead.
func (*CertRefuseReq) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{4}
}

func (x *CertRefuseReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CertRefuseReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CertRefuseReq) GetRefuseUid() int64 {
	if x != nil {
		return x.RefuseUid
	}
	return 0
}

func (x *CertRefuseReq) GetRefuseName() string {
	if x != nil {
		return x.RefuseName
	}
	return ""
}

func (x *CertRefuseReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *CertRefuseReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertRefuseRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code       `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string             `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cert    *common.PersonCert `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	Extra   map[string]string  `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertRefuseRes) Reset() {
	*x = CertRefuseRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertRefuseRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertRefuseRes) ProtoMessage() {}

func (x *CertRefuseRes) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertRefuseRes.ProtoReflect.Descriptor instead.
func (*CertRefuseRes) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{5}
}

func (x *CertRefuseRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CertRefuseRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CertRefuseRes) GetCert() *common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertRefuseRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid    int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Status string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Idname string            `protobuf:"bytes,4,opt,name=idname,proto3" json:"idname,omitempty"`
	Idnum  string            `protobuf:"bytes,5,opt,name=idnum,proto3" json:"idnum,omitempty"`
	Page   int32             `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32             `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Extra  map[string]string `protobuf:"bytes,8,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertInfoReq) Reset() {
	*x = CertInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertInfoReq) ProtoMessage() {}

func (x *CertInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertInfoReq.ProtoReflect.Descriptor instead.
func (*CertInfoReq) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{6}
}

func (x *CertInfoReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CertInfoReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CertInfoReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CertInfoReq) GetIdname() string {
	if x != nil {
		return x.Idname
	}
	return ""
}

func (x *CertInfoReq) GetIdnum() string {
	if x != nil {
		return x.Idnum
	}
	return ""
}

func (x *CertInfoReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CertInfoReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CertInfoReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cert    []*common.PersonCert `protobuf:"bytes,3,rep,name=cert,proto3" json:"cert,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertInfoRes) Reset() {
	*x = CertInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertInfoRes) ProtoMessage() {}

func (x *CertInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertInfoRes.ProtoReflect.Descriptor instead.
func (*CertInfoRes) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{7}
}

func (x *CertInfoRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CertInfoRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CertInfoRes) GetCert() []*common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertInfoRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertFlowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Page  int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size  int32             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertFlowReq) Reset() {
	*x = CertFlowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertFlowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertFlowReq) ProtoMessage() {}

func (x *CertFlowReq) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertFlowReq.ProtoReflect.Descriptor instead.
func (*CertFlowReq) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{8}
}

func (x *CertFlowReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CertFlowReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CertFlowReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CertFlowReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CertFlowReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertFlowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code         `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string               `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cert    []*common.PersonCert `protobuf:"bytes,3,rep,name=cert,proto3" json:"cert,omitempty"`
	Extra   map[string]string    `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertFlowRes) Reset() {
	*x = CertFlowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertFlowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertFlowRes) ProtoMessage() {}

func (x *CertFlowRes) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertFlowRes.ProtoReflect.Descriptor instead.
func (*CertFlowRes) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{9}
}

func (x *CertFlowRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CertFlowRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CertFlowRes) GetCert() []*common.PersonCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CertFlowRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertCancelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uid   int64             `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Info  string            `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Extra map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertCancelReq) Reset() {
	*x = CertCancelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertCancelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertCancelReq) ProtoMessage() {}

func (x *CertCancelReq) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertCancelReq.ProtoReflect.Descriptor instead.
func (*CertCancelReq) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{10}
}

func (x *CertCancelReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CertCancelReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CertCancelReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *CertCancelReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertCancelRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertCancelRes) Reset() {
	*x = CertCancelRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertCancelRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertCancelRes) ProtoMessage() {}

func (x *CertCancelRes) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertCancelRes.ProtoReflect.Descriptor instead.
func (*CertCancelRes) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{11}
}

func (x *CertCancelRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CertCancelRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CertCancelRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *common.Authorize `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Key    string            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value  string            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Expire int64             `protobuf:"varint,4,opt,name=expire,proto3" json:"expire,omitempty"`
	Extra  map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertCacheReq) Reset() {
	*x = CertCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertCacheReq) ProtoMessage() {}

func (x *CertCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertCacheReq.ProtoReflect.Descriptor instead.
func (*CertCacheReq) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{12}
}

func (x *CertCacheReq) GetAuth() *common.Authorize {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CertCacheReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CertCacheReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CertCacheReq) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *CertCacheReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CertCacheRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CertCacheRes) Reset() {
	*x = CertCacheRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certnode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertCacheRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertCacheRes) ProtoMessage() {}

func (x *CertCacheRes) ProtoReflect() protoreflect.Message {
	mi := &file_certnode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertCacheRes.ProtoReflect.Descriptor instead.
func (*CertCacheRes) Descriptor() ([]byte, []int) {
	return file_certnode_proto_rawDescGZIP(), []int{13}
}

func (x *CertCacheRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *CertCacheRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *CertCacheRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_certnode_proto protoreflect.FileDescriptor

var file_certnode_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x15, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x74,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9c, 0x02, 0x0a, 0x11,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5, 0x01, 0x0a, 0x11, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x72, 0x74,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x94, 0x02, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x27,
	0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x02,
	0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x12,
	0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x6e, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x6e, 0x75, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x0d, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a,
	0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xed, 0x01, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x38, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xec, 0x01, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xfa, 0x03, 0x0a, 0x10,
	0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x12,
	0x19, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x72,
	0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x17, 0x2e,
	0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x12, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x12, 0x19, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_certnode_proto_rawDescOnce sync.Once
	file_certnode_proto_rawDescData = file_certnode_proto_rawDesc
)

func file_certnode_proto_rawDescGZIP() []byte {
	file_certnode_proto_rawDescOnce.Do(func() {
		file_certnode_proto_rawDescData = protoimpl.X.CompressGZIP(file_certnode_proto_rawDescData)
	})
	return file_certnode_proto_rawDescData
}

var file_certnode_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_certnode_proto_goTypes = []interface{}{
	(*SubmitCertReq)(nil),     // 0: certnode.submit_cert_req
	(*SubmitCertRes)(nil),     // 1: certnode.submit_cert_res
	(*CertApprovedReq)(nil),   // 2: certnode.cert_approved_req
	(*CertApprovedRes)(nil),   // 3: certnode.cert_approved_res
	(*CertRefuseReq)(nil),     // 4: certnode.cert_refuse_req
	(*CertRefuseRes)(nil),     // 5: certnode.cert_refuse_res
	(*CertInfoReq)(nil),       // 6: certnode.cert_info_req
	(*CertInfoRes)(nil),       // 7: certnode.cert_info_res
	(*CertFlowReq)(nil),       // 8: certnode.cert_flow_req
	(*CertFlowRes)(nil),       // 9: certnode.cert_flow_res
	(*CertCancelReq)(nil),     // 10: certnode.cert_cancel_req
	(*CertCancelRes)(nil),     // 11: certnode.cert_cancel_res
	(*CertCacheReq)(nil),      // 12: certnode.cert_cache_req
	(*CertCacheRes)(nil),      // 13: certnode.cert_cache_res
	nil,                       // 14: certnode.submit_cert_req.ExtraEntry
	nil,                       // 15: certnode.submit_cert_res.ExtraEntry
	nil,                       // 16: certnode.cert_approved_req.ExtraEntry
	nil,                       // 17: certnode.cert_approved_res.ExtraEntry
	nil,                       // 18: certnode.cert_refuse_req.ExtraEntry
	nil,                       // 19: certnode.cert_refuse_res.ExtraEntry
	nil,                       // 20: certnode.cert_info_req.ExtraEntry
	nil,                       // 21: certnode.cert_info_res.ExtraEntry
	nil,                       // 22: certnode.cert_flow_req.ExtraEntry
	nil,                       // 23: certnode.cert_flow_res.ExtraEntry
	nil,                       // 24: certnode.cert_cancel_req.ExtraEntry
	nil,                       // 25: certnode.cert_cancel_res.ExtraEntry
	nil,                       // 26: certnode.cert_cache_req.ExtraEntry
	nil,                       // 27: certnode.cert_cache_res.ExtraEntry
	(*common.Authorize)(nil),  // 28: common.authorize
	(*common.PersonCert)(nil), // 29: common.person_cert
	(rescode.Code)(0),         // 30: rescode.code
}
var file_certnode_proto_depIdxs = []int32{
	28, // 0: certnode.submit_cert_req.auth:type_name -> common.authorize
	29, // 1: certnode.submit_cert_req.cert:type_name -> common.person_cert
	14, // 2: certnode.submit_cert_req.extra:type_name -> certnode.submit_cert_req.ExtraEntry
	30, // 3: certnode.submit_cert_res.rescode:type_name -> rescode.code
	15, // 4: certnode.submit_cert_res.extra:type_name -> certnode.submit_cert_res.ExtraEntry
	28, // 5: certnode.cert_approved_req.auth:type_name -> common.authorize
	16, // 6: certnode.cert_approved_req.extra:type_name -> certnode.cert_approved_req.ExtraEntry
	30, // 7: certnode.cert_approved_res.rescode:type_name -> rescode.code
	29, // 8: certnode.cert_approved_res.cert:type_name -> common.person_cert
	17, // 9: certnode.cert_approved_res.extra:type_name -> certnode.cert_approved_res.ExtraEntry
	28, // 10: certnode.cert_refuse_req.auth:type_name -> common.authorize
	18, // 11: certnode.cert_refuse_req.extra:type_name -> certnode.cert_refuse_req.ExtraEntry
	30, // 12: certnode.cert_refuse_res.rescode:type_name -> rescode.code
	29, // 13: certnode.cert_refuse_res.cert:type_name -> common.person_cert
	19, // 14: certnode.cert_refuse_res.extra:type_name -> certnode.cert_refuse_res.ExtraEntry
	28, // 15: certnode.cert_info_req.auth:type_name -> common.authorize
	20, // 16: certnode.cert_info_req.extra:type_name -> certnode.cert_info_req.ExtraEntry
	30, // 17: certnode.cert_info_res.rescode:type_name -> rescode.code
	29, // 18: certnode.cert_info_res.cert:type_name -> common.person_cert
	21, // 19: certnode.cert_info_res.extra:type_name -> certnode.cert_info_res.ExtraEntry
	28, // 20: certnode.cert_flow_req.auth:type_name -> common.authorize
	22, // 21: certnode.cert_flow_req.extra:type_name -> certnode.cert_flow_req.ExtraEntry
	30, // 22: certnode.cert_flow_res.rescode:type_name -> rescode.code
	29, // 23: certnode.cert_flow_res.cert:type_name -> common.person_cert
	23, // 24: certnode.cert_flow_res.extra:type_name -> certnode.cert_flow_res.ExtraEntry
	28, // 25: certnode.cert_cancel_req.auth:type_name -> common.authorize
	24, // 26: certnode.cert_cancel_req.extra:type_name -> certnode.cert_cancel_req.ExtraEntry
	30, // 27: certnode.cert_cancel_res.rescode:type_name -> rescode.code
	25, // 28: certnode.cert_cancel_res.extra:type_name -> certnode.cert_cancel_res.ExtraEntry
	28, // 29: certnode.cert_cache_req.auth:type_name -> common.authorize
	26, // 30: certnode.cert_cache_req.extra:type_name -> certnode.cert_cache_req.ExtraEntry
	30, // 31: certnode.cert_cache_res.rescode:type_name -> rescode.code
	27, // 32: certnode.cert_cache_res.extra:type_name -> certnode.cert_cache_res.ExtraEntry
	0,  // 33: certnode.certnode_service.submit_cert:input_type -> certnode.submit_cert_req
	6,  // 34: certnode.certnode_service.cert_info:input_type -> certnode.cert_info_req
	8,  // 35: certnode.certnode_service.cert_flow:input_type -> certnode.cert_flow_req
	10, // 36: certnode.certnode_service.cert_cancel:input_type -> certnode.cert_cancel_req
	2,  // 37: certnode.certnode_service.cert_approved:input_type -> certnode.cert_approved_req
	4,  // 38: certnode.certnode_service.cert_refuse:input_type -> certnode.cert_refuse_req
	12, // 39: certnode.certnode_service.cert_cache:input_type -> certnode.cert_cache_req
	1,  // 40: certnode.certnode_service.submit_cert:output_type -> certnode.submit_cert_res
	7,  // 41: certnode.certnode_service.cert_info:output_type -> certnode.cert_info_res
	9,  // 42: certnode.certnode_service.cert_flow:output_type -> certnode.cert_flow_res
	11, // 43: certnode.certnode_service.cert_cancel:output_type -> certnode.cert_cancel_res
	3,  // 44: certnode.certnode_service.cert_approved:output_type -> certnode.cert_approved_res
	5,  // 45: certnode.certnode_service.cert_refuse:output_type -> certnode.cert_refuse_res
	13, // 46: certnode.certnode_service.cert_cache:output_type -> certnode.cert_cache_res
	40, // [40:47] is the sub-list for method output_type
	33, // [33:40] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_certnode_proto_init() }
func file_certnode_proto_init() {
	if File_certnode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_certnode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitCertReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitCertRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertApprovedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertApprovedRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertRefuseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertRefuseRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertFlowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertFlowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertCancelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertCancelRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certnode_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertCacheRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_certnode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_certnode_proto_goTypes,
		DependencyIndexes: file_certnode_proto_depIdxs,
		MessageInfos:      file_certnode_proto_msgTypes,
	}.Build()
	File_certnode_proto = out.File
	file_certnode_proto_rawDesc = nil
	file_certnode_proto_goTypes = nil
	file_certnode_proto_depIdxs = nil
}
