// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: dartynode.proto

package dartynode

import (
	common "github.com/heegspace/heegproto/common"
	rescode "github.com/heegspace/heegproto/rescode"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoginWechatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid string            `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
	Code  string            `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	State string            `protobuf:"bytes,3,opt,name=State,proto3" json:"State,omitempty"`
	Style string            `protobuf:"bytes,4,opt,name=style,proto3" json:"style,omitempty"` // normal: 普通用户   cooper: 合作者   school: 学校
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LoginWechatReq) Reset() {
	*x = LoginWechatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWechatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWechatReq) ProtoMessage() {}

func (x *LoginWechatReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWechatReq.ProtoReflect.Descriptor instead.
func (*LoginWechatReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{0}
}

func (x *LoginWechatReq) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *LoginWechatReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *LoginWechatReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *LoginWechatReq) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *LoginWechatReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LoginWechatRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cookie  string            `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LoginWechatRes) Reset() {
	*x = LoginWechatRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWechatRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWechatRes) ProtoMessage() {}

func (x *LoginWechatRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWechatRes.ProtoReflect.Descriptor instead.
func (*LoginWechatRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{1}
}

func (x *LoginWechatRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *LoginWechatRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *LoginWechatRes) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *LoginWechatRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshWechatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Appid        string            `protobuf:"bytes,2,opt,name=appid,proto3" json:"appid,omitempty"`
	RefreshToken string            `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken  string            `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Extra        map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshWechatReq) Reset() {
	*x = RefreshWechatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshWechatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshWechatReq) ProtoMessage() {}

func (x *RefreshWechatReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshWechatReq.ProtoReflect.Descriptor instead.
func (*RefreshWechatReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{2}
}

func (x *RefreshWechatReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *RefreshWechatReq) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *RefreshWechatReq) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshWechatReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *RefreshWechatReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshWechatRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cookie  string            `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshWechatRes) Reset() {
	*x = RefreshWechatRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshWechatRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshWechatRes) ProtoMessage() {}

func (x *RefreshWechatRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshWechatRes.ProtoReflect.Descriptor instead.
func (*RefreshWechatRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{3}
}

func (x *RefreshWechatRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *RefreshWechatRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *RefreshWechatRes) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *RefreshWechatRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LogoutWechatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Appid  string            `protobuf:"bytes,2,opt,name=appid,proto3" json:"appid,omitempty"`
	Cookie string            `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LogoutWechatReq) Reset() {
	*x = LogoutWechatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutWechatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutWechatReq) ProtoMessage() {}

func (x *LogoutWechatReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutWechatReq.ProtoReflect.Descriptor instead.
func (*LogoutWechatReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{4}
}

func (x *LogoutWechatReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LogoutWechatReq) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *LogoutWechatReq) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *LogoutWechatReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LogoutWechatRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LogoutWechatRes) Reset() {
	*x = LogoutWechatRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutWechatRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutWechatRes) ProtoMessage() {}

func (x *LogoutWechatRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutWechatRes.ProtoReflect.Descriptor instead.
func (*LogoutWechatRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{5}
}

func (x *LogoutWechatRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *LogoutWechatRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *LogoutWechatRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserinfoWechatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Openid       string            `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
	Appid        string            `protobuf:"bytes,3,opt,name=appid,proto3" json:"appid,omitempty"`
	AccessToken  string            `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken string            `protobuf:"bytes,5,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"` // 用于刷新access_token
	Extra        map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserinfoWechatReq) Reset() {
	*x = UserinfoWechatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserinfoWechatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserinfoWechatReq) ProtoMessage() {}

func (x *UserinfoWechatReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserinfoWechatReq.ProtoReflect.Descriptor instead.
func (*UserinfoWechatReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{6}
}

func (x *UserinfoWechatReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserinfoWechatReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *UserinfoWechatReq) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *UserinfoWechatReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *UserinfoWechatReq) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *UserinfoWechatReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserinfoWechatRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode  rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg   string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Userinfo *common.WechatUserinfo `protobuf:"bytes,3,opt,name=userinfo,proto3" json:"userinfo,omitempty"`
	Cookie   string                 `protobuf:"bytes,4,opt,name=cookie,proto3" json:"cookie,omitempty"` // 是否更新cookie
	Extra    map[string]string      `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserinfoWechatRes) Reset() {
	*x = UserinfoWechatRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserinfoWechatRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserinfoWechatRes) ProtoMessage() {}

func (x *UserinfoWechatRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserinfoWechatRes.ProtoReflect.Descriptor instead.
func (*UserinfoWechatRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{7}
}

func (x *UserinfoWechatRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *UserinfoWechatRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UserinfoWechatRes) GetUserinfo() *common.WechatUserinfo {
	if x != nil {
		return x.Userinfo
	}
	return nil
}

func (x *UserinfoWechatRes) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *UserinfoWechatRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LoginAlipayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    string            `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Source   string            `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Scope    string            `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	AuthCode string            `protobuf:"bytes,4,opt,name=auth_code,json=authCode,proto3" json:"auth_code,omitempty"`
	Style    string            `protobuf:"bytes,5,opt,name=style,proto3" json:"style,omitempty"` // normal: 普通用户   cooper: 合作者   school: 学校
	Extra    map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LoginAlipayReq) Reset() {
	*x = LoginAlipayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginAlipayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginAlipayReq) ProtoMessage() {}

func (x *LoginAlipayReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginAlipayReq.ProtoReflect.Descriptor instead.
func (*LoginAlipayReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{8}
}

func (x *LoginAlipayReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *LoginAlipayReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LoginAlipayReq) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *LoginAlipayReq) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

func (x *LoginAlipayReq) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *LoginAlipayReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LoginAlipayRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cookie  string            `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LoginAlipayRes) Reset() {
	*x = LoginAlipayRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginAlipayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginAlipayRes) ProtoMessage() {}

func (x *LoginAlipayRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginAlipayRes.ProtoReflect.Descriptor instead.
func (*LoginAlipayRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{9}
}

func (x *LoginAlipayRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *LoginAlipayRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *LoginAlipayRes) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *LoginAlipayRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserinfoAlipayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Openid       string            `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
	Appid        string            `protobuf:"bytes,3,opt,name=appid,proto3" json:"appid,omitempty"`
	AccessToken  string            `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken string            `protobuf:"bytes,5,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"` // 用于刷新access_token
	Extra        map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserinfoAlipayReq) Reset() {
	*x = UserinfoAlipayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserinfoAlipayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserinfoAlipayReq) ProtoMessage() {}

func (x *UserinfoAlipayReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserinfoAlipayReq.ProtoReflect.Descriptor instead.
func (*UserinfoAlipayReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{10}
}

func (x *UserinfoAlipayReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserinfoAlipayReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *UserinfoAlipayReq) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *UserinfoAlipayReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *UserinfoAlipayReq) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *UserinfoAlipayReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type UserinfoAlipayRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode  rescode.Code           `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg   string                 `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Userinfo *common.AlipayUserinfo `protobuf:"bytes,3,opt,name=userinfo,proto3" json:"userinfo,omitempty"`
	Cookie   string                 `protobuf:"bytes,4,opt,name=cookie,proto3" json:"cookie,omitempty"` // 是否更新cookie
	Extra    map[string]string      `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserinfoAlipayRes) Reset() {
	*x = UserinfoAlipayRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserinfoAlipayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserinfoAlipayRes) ProtoMessage() {}

func (x *UserinfoAlipayRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserinfoAlipayRes.ProtoReflect.Descriptor instead.
func (*UserinfoAlipayRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{11}
}

func (x *UserinfoAlipayRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *UserinfoAlipayRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *UserinfoAlipayRes) GetUserinfo() *common.AlipayUserinfo {
	if x != nil {
		return x.Userinfo
	}
	return nil
}

func (x *UserinfoAlipayRes) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *UserinfoAlipayRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshAlipayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Appid        string            `protobuf:"bytes,2,opt,name=appid,proto3" json:"appid,omitempty"`
	RefreshToken string            `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken  string            `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Extra        map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshAlipayReq) Reset() {
	*x = RefreshAlipayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshAlipayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshAlipayReq) ProtoMessage() {}

func (x *RefreshAlipayReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshAlipayReq.ProtoReflect.Descriptor instead.
func (*RefreshAlipayReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{12}
}

func (x *RefreshAlipayReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *RefreshAlipayReq) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *RefreshAlipayReq) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshAlipayReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *RefreshAlipayReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RefreshAlipayRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Cookie  string            `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshAlipayRes) Reset() {
	*x = RefreshAlipayRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshAlipayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshAlipayRes) ProtoMessage() {}

func (x *RefreshAlipayRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshAlipayRes.ProtoReflect.Descriptor instead.
func (*RefreshAlipayRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{13}
}

func (x *RefreshAlipayRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *RefreshAlipayRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *RefreshAlipayRes) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *RefreshAlipayRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LogoutAlipayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Appid  string            `protobuf:"bytes,2,opt,name=appid,proto3" json:"appid,omitempty"`
	Cookie string            `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Extra  map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LogoutAlipayReq) Reset() {
	*x = LogoutAlipayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutAlipayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutAlipayReq) ProtoMessage() {}

func (x *LogoutAlipayReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutAlipayReq.ProtoReflect.Descriptor instead.
func (*LogoutAlipayReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{14}
}

func (x *LogoutAlipayReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LogoutAlipayReq) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *LogoutAlipayReq) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *LogoutAlipayReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type LogoutAlipayRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LogoutAlipayRes) Reset() {
	*x = LogoutAlipayRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutAlipayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutAlipayRes) ProtoMessage() {}

func (x *LogoutAlipayRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutAlipayRes.ProtoReflect.Descriptor instead.
func (*LogoutAlipayRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{15}
}

func (x *LogoutAlipayRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *LogoutAlipayRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *LogoutAlipayRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int32             `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size      int32             `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Statement string            `protobuf:"bytes,3,opt,name=statement,proto3" json:"statement,omitempty"`
	Extra     map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduEntityReq) Reset() {
	*x = BaiduEntityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduEntityReq) ProtoMessage() {}

func (x *BaiduEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduEntityReq.ProtoReflect.Descriptor instead.
func (*BaiduEntityReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{16}
}

func (x *BaiduEntityReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BaiduEntityReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BaiduEntityReq) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

func (x *BaiduEntityReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduEntityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code          `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Page    int32                 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32                 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Entitys []*common.BaiduEntity `protobuf:"bytes,5,rep,name=entitys,proto3" json:"entitys,omitempty"`
	Extra   map[string]string     `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduEntityRes) Reset() {
	*x = BaiduEntityRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduEntityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduEntityRes) ProtoMessage() {}

func (x *BaiduEntityRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduEntityRes.ProtoReflect.Descriptor instead.
func (*BaiduEntityRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{17}
}

func (x *BaiduEntityRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *BaiduEntityRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *BaiduEntityRes) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BaiduEntityRes) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BaiduEntityRes) GetEntitys() []*common.BaiduEntity {
	if x != nil {
		return x.Entitys
	}
	return nil
}

func (x *BaiduEntityRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduDocAnalysisReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ImageBase64 string            `protobuf:"bytes,2,opt,name=image_base64,json=imageBase64,proto3" json:"image_base64,omitempty"`
	Extra       map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduDocAnalysisReq) Reset() {
	*x = BaiduDocAnalysisReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduDocAnalysisReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduDocAnalysisReq) ProtoMessage() {}

func (x *BaiduDocAnalysisReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduDocAnalysisReq.ProtoReflect.Descriptor instead.
func (*BaiduDocAnalysisReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{18}
}

func (x *BaiduDocAnalysisReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BaiduDocAnalysisReq) GetImageBase64() string {
	if x != nil {
		return x.ImageBase64
	}
	return ""
}

func (x *BaiduDocAnalysisReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduDocAnalysisRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode  rescode.Code             `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg   string                   `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Analysis *common.BaiduDocAnalysis `protobuf:"bytes,3,opt,name=analysis,proto3" json:"analysis,omitempty"`
	Extra    map[string]string        `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduDocAnalysisRes) Reset() {
	*x = BaiduDocAnalysisRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduDocAnalysisRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduDocAnalysisRes) ProtoMessage() {}

func (x *BaiduDocAnalysisRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduDocAnalysisRes.ProtoReflect.Descriptor instead.
func (*BaiduDocAnalysisRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{19}
}

func (x *BaiduDocAnalysisRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *BaiduDocAnalysisRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *BaiduDocAnalysisRes) GetAnalysis() *common.BaiduDocAnalysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

func (x *BaiduDocAnalysisRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduIdcardIdentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	IdcardSide  string            `protobuf:"bytes,2,opt,name=idcard_side,json=idcardSide,proto3" json:"idcard_side,omitempty"`
	ImageBase64 string            `protobuf:"bytes,3,opt,name=image_base64,json=imageBase64,proto3" json:"image_base64,omitempty"`
	Extra       map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduIdcardIdentReq) Reset() {
	*x = BaiduIdcardIdentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduIdcardIdentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduIdcardIdentReq) ProtoMessage() {}

func (x *BaiduIdcardIdentReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduIdcardIdentReq.ProtoReflect.Descriptor instead.
func (*BaiduIdcardIdentReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{20}
}

func (x *BaiduIdcardIdentReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BaiduIdcardIdentReq) GetIdcardSide() string {
	if x != nil {
		return x.IdcardSide
	}
	return ""
}

func (x *BaiduIdcardIdentReq) GetImageBase64() string {
	if x != nil {
		return x.ImageBase64
	}
	return ""
}

func (x *BaiduIdcardIdentReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduIdcardIdentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code             `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string                   `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Ident   *common.BaiduIdcardIdent `protobuf:"bytes,3,opt,name=ident,proto3" json:"ident,omitempty"`
	Extra   map[string]string        `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduIdcardIdentRes) Reset() {
	*x = BaiduIdcardIdentRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduIdcardIdentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduIdcardIdentRes) ProtoMessage() {}

func (x *BaiduIdcardIdentRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduIdcardIdentRes.ProtoReflect.Descriptor instead.
func (*BaiduIdcardIdentRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{21}
}

func (x *BaiduIdcardIdentRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *BaiduIdcardIdentRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *BaiduIdcardIdentRes) GetIdent() *common.BaiduIdcardIdent {
	if x != nil {
		return x.Ident
	}
	return nil
}

func (x *BaiduIdcardIdentRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduTextCensorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Text  string            `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Extra map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduTextCensorReq) Reset() {
	*x = BaiduTextCensorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduTextCensorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduTextCensorReq) ProtoMessage() {}

func (x *BaiduTextCensorReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduTextCensorReq.ProtoReflect.Descriptor instead.
func (*BaiduTextCensorReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{22}
}

func (x *BaiduTextCensorReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BaiduTextCensorReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BaiduTextCensorReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduTextCensorRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Censor  int64             `protobuf:"varint,2,opt,name=censor,proto3" json:"censor,omitempty"`
	Resmsg  string            `protobuf:"bytes,3,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduTextCensorRes) Reset() {
	*x = BaiduTextCensorRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduTextCensorRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduTextCensorRes) ProtoMessage() {}

func (x *BaiduTextCensorRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduTextCensorRes.ProtoReflect.Descriptor instead.
func (*BaiduTextCensorRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{23}
}

func (x *BaiduTextCensorRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *BaiduTextCensorRes) GetCensor() int64 {
	if x != nil {
		return x.Censor
	}
	return 0
}

func (x *BaiduTextCensorRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *BaiduTextCensorRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduImgCensorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64             `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Base64 string            `protobuf:"bytes,2,opt,name=base64,proto3" json:"base64,omitempty"`
	Extra  map[string]string `protobuf:"bytes,3,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduImgCensorReq) Reset() {
	*x = BaiduImgCensorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduImgCensorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduImgCensorReq) ProtoMessage() {}

func (x *BaiduImgCensorReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduImgCensorReq.ProtoReflect.Descriptor instead.
func (*BaiduImgCensorReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{24}
}

func (x *BaiduImgCensorReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BaiduImgCensorReq) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

func (x *BaiduImgCensorReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type BaiduImgCensorRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Censor  int64             `protobuf:"varint,2,opt,name=censor,proto3" json:"censor,omitempty"`
	Resmsg  string            `protobuf:"bytes,3,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BaiduImgCensorRes) Reset() {
	*x = BaiduImgCensorRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaiduImgCensorRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaiduImgCensorRes) ProtoMessage() {}

func (x *BaiduImgCensorRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaiduImgCensorRes.ProtoReflect.Descriptor instead.
func (*BaiduImgCensorRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{25}
}

func (x *BaiduImgCensorRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *BaiduImgCensorRes) GetCensor() int64 {
	if x != nil {
		return x.Censor
	}
	return 0
}

func (x *BaiduImgCensorRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *BaiduImgCensorRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type PayDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsName  string            `protobuf:"bytes,1,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	GoodsId    string            `protobuf:"bytes,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Quantity   int64             `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price      int64             `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	PayGoodsId string            `protobuf:"bytes,5,opt,name=pay_goods_id,json=payGoodsId,proto3" json:"pay_goods_id,omitempty"`
	Extra      map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PayDetail) Reset() {
	*x = PayDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayDetail) ProtoMessage() {}

func (x *PayDetail) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayDetail.ProtoReflect.Descriptor instead.
func (*PayDetail) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{26}
}

func (x *PayDetail) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *PayDetail) GetGoodsId() string {
	if x != nil {
		return x.GoodsId
	}
	return ""
}

func (x *PayDetail) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PayDetail) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PayDetail) GetPayGoodsId() string {
	if x != nil {
		return x.PayGoodsId
	}
	return ""
}

func (x *PayDetail) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Province string            `protobuf:"bytes,2,opt,name=province,proto3" json:"province,omitempty"`
	City     string            `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	PostCode string            `protobuf:"bytes,4,opt,name=post_code,json=postCode,proto3" json:"post_code,omitempty"`
	Tel      string            `protobuf:"bytes,5,opt,name=tel,proto3" json:"tel,omitempty"`
	Extra    map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{27}
}

func (x *Address) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Address) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetPostCode() string {
	if x != nil {
		return x.PostCode
	}
	return ""
}

func (x *Address) GetTel() string {
	if x != nil {
		return x.Tel
	}
	return ""
}

func (x *Address) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type WechatPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeNo string            `protobuf:"bytes,1,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	Desc    string            `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Amount  int64             `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Details []*PayDetail      `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty"`
	Sender  *Address          `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
	Recver  *Address          `protobuf:"bytes,6,opt,name=recver,proto3" json:"recver,omitempty"`
	Extra   map[string]string `protobuf:"bytes,7,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WechatPayReq) Reset() {
	*x = WechatPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayReq) ProtoMessage() {}

func (x *WechatPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayReq.ProtoReflect.Descriptor instead.
func (*WechatPayReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{28}
}

func (x *WechatPayReq) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *WechatPayReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *WechatPayReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WechatPayReq) GetDetails() []*PayDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *WechatPayReq) GetSender() *Address {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *WechatPayReq) GetRecver() *Address {
	if x != nil {
		return x.Recver
	}
	return nil
}

func (x *WechatPayReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type WechatPayRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	CodeUrl string            `protobuf:"bytes,3,opt,name=code_url,json=codeUrl,proto3" json:"code_url,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WechatPayRes) Reset() {
	*x = WechatPayRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayRes) ProtoMessage() {}

func (x *WechatPayRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayRes.ProtoReflect.Descriptor instead.
func (*WechatPayRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{29}
}

func (x *WechatPayRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *WechatPayRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *WechatPayRes) GetCodeUrl() string {
	if x != nil {
		return x.CodeUrl
	}
	return ""
}

func (x *WechatPayRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AlipayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeNo string            `protobuf:"bytes,1,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	Desc    string            `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Amount  int32             `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AlipayReq) Reset() {
	*x = AlipayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayReq) ProtoMessage() {}

func (x *AlipayReq) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayReq.ProtoReflect.Descriptor instead.
func (*AlipayReq) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{30}
}

func (x *AlipayReq) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *AlipayReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *AlipayReq) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AlipayReq) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AlipayRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rescode rescode.Code      `protobuf:"varint,1,opt,name=rescode,proto3,enum=rescode.Code" json:"rescode,omitempty"`
	Resmsg  string            `protobuf:"bytes,2,opt,name=resmsg,proto3" json:"resmsg,omitempty"`
	CodeUrl string            `protobuf:"bytes,3,opt,name=code_url,json=codeUrl,proto3" json:"code_url,omitempty"`
	Extra   map[string]string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AlipayRes) Reset() {
	*x = AlipayRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dartynode_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlipayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlipayRes) ProtoMessage() {}

func (x *AlipayRes) ProtoReflect() protoreflect.Message {
	mi := &file_dartynode_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlipayRes.ProtoReflect.Descriptor instead.
func (*AlipayRes) Descriptor() ([]byte, []int) {
	return file_dartynode_proto_rawDescGZIP(), []int{31}
}

func (x *AlipayRes) GetRescode() rescode.Code {
	if x != nil {
		return x.Rescode
	}
	return rescode.Code_code_SUCCESS
}

func (x *AlipayRes) GetResmsg() string {
	if x != nil {
		return x.Resmsg
	}
	return ""
}

func (x *AlipayRes) GetCodeUrl() string {
	if x != nil {
		return x.CodeUrl
	}
	return ""
}

func (x *AlipayRes) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_dartynode_proto protoreflect.FileDescriptor

var file_dartynode_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x15, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdf, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a,
	0x0f, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3b, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61,
	0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x94, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x02, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x3d, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64,
	0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfe, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdf, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x02, 0x0a, 0x11, 0x55, 0x73,
	0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x41, 0x6c, 0x69, 0x70, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x99, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x41, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc8, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12,
	0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x69, 0x64, 0x75,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x02, 0x0a, 0x0e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x2d, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x69, 0x64,
	0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x73,
	0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64,
	0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x69, 0x64, 0x75,
	0x44, 0x6f, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42,
	0x61, 0x69, 0x64, 0x75, 0x44, 0x6f, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87,
	0x02, 0x0a, 0x13, 0x42, 0x61, 0x69, 0x64, 0x75, 0x44, 0x6f, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x44, 0x6f, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x3f, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64,
	0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x44, 0x6f,
	0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x69,
	0x64, 0x75, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x81, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x69, 0x64, 0x75, 0x49, 0x64, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x72, 0x74,
	0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x49, 0x64, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x69, 0x64, 0x75, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61,
	0x69, 0x64, 0x75, 0x54, 0x65, 0x78, 0x74, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x01, 0x0a,
	0x12, 0x42, 0x61, 0x69, 0x64, 0x75, 0x54, 0x65, 0x78, 0x74, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61,
	0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x69, 0x64, 0x75,
	0x49, 0x6d, 0x67, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x49, 0x6d, 0x67, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe5, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x69, 0x64, 0x75, 0x49, 0x6d, 0x67, 0x43, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x3d,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x49,
	0x6d, 0x67, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x02, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50,
	0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd1, 0x02, 0x0a, 0x0c, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61,
	0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x72,
	0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x76, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x63, 0x76,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x0c, 0x57, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x70,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61,
	0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01,
	0x0a, 0x09, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x6d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xfd, 0x08, 0x0a, 0x10, 0x44, 0x61, 0x72,
	0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a,
	0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x12, 0x19, 0x2e, 0x64,
	0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x12, 0x1c, 0x2e,
	0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x61,
	0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x72,
	0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x70,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x12,
	0x1a, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x61,
	0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x12, 0x1c, 0x2e, 0x64, 0x61,
	0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x61, 0x72, 0x74,
	0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x42, 0x61, 0x69,
	0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x42, 0x61, 0x69, 0x64, 0x75, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x10, 0x42, 0x61, 0x69, 0x64, 0x75, 0x44, 0x6f, 0x63, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x44, 0x6f, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x44, 0x6f, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x42, 0x61, 0x69, 0x64, 0x75, 0x49,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x72,
	0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x49, 0x64, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x61, 0x72,
	0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x49, 0x64, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0f,
	0x42, 0x61, 0x69, 0x64, 0x75, 0x54, 0x65, 0x78, 0x74, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12,
	0x1d, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64,
	0x75, 0x54, 0x65, 0x78, 0x74, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64, 0x75,
	0x54, 0x65, 0x78, 0x74, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x0e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x49, 0x6d, 0x67, 0x43, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x12, 0x1c, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61,
	0x69, 0x64, 0x75, 0x49, 0x6d, 0x67, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x61, 0x69, 0x64,
	0x75, 0x49, 0x6d, 0x67, 0x43, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x09, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x12, 0x17, 0x2e, 0x64,
	0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x06, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x12, 0x14, 0x2e, 0x64, 0x61, 0x72,
	0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x64, 0x61, 0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x64, 0x61,
	0x72, 0x74, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dartynode_proto_rawDescOnce sync.Once
	file_dartynode_proto_rawDescData = file_dartynode_proto_rawDesc
)

func file_dartynode_proto_rawDescGZIP() []byte {
	file_dartynode_proto_rawDescOnce.Do(func() {
		file_dartynode_proto_rawDescData = protoimpl.X.CompressGZIP(file_dartynode_proto_rawDescData)
	})
	return file_dartynode_proto_rawDescData
}

var file_dartynode_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_dartynode_proto_goTypes = []interface{}{
	(*LoginWechatReq)(nil),          // 0: dartynode.LoginWechatReq
	(*LoginWechatRes)(nil),          // 1: dartynode.LoginWechatRes
	(*RefreshWechatReq)(nil),        // 2: dartynode.RefreshWechatReq
	(*RefreshWechatRes)(nil),        // 3: dartynode.RefreshWechatRes
	(*LogoutWechatReq)(nil),         // 4: dartynode.LogoutWechatReq
	(*LogoutWechatRes)(nil),         // 5: dartynode.LogoutWechatRes
	(*UserinfoWechatReq)(nil),       // 6: dartynode.UserinfoWechatReq
	(*UserinfoWechatRes)(nil),       // 7: dartynode.UserinfoWechatRes
	(*LoginAlipayReq)(nil),          // 8: dartynode.LoginAlipayReq
	(*LoginAlipayRes)(nil),          // 9: dartynode.LoginAlipayRes
	(*UserinfoAlipayReq)(nil),       // 10: dartynode.UserinfoAlipayReq
	(*UserinfoAlipayRes)(nil),       // 11: dartynode.UserinfoAlipayRes
	(*RefreshAlipayReq)(nil),        // 12: dartynode.RefreshAlipayReq
	(*RefreshAlipayRes)(nil),        // 13: dartynode.RefreshAlipayRes
	(*LogoutAlipayReq)(nil),         // 14: dartynode.LogoutAlipayReq
	(*LogoutAlipayRes)(nil),         // 15: dartynode.LogoutAlipayRes
	(*BaiduEntityReq)(nil),          // 16: dartynode.BaiduEntityReq
	(*BaiduEntityRes)(nil),          // 17: dartynode.BaiduEntityRes
	(*BaiduDocAnalysisReq)(nil),     // 18: dartynode.BaiduDocAnalysisReq
	(*BaiduDocAnalysisRes)(nil),     // 19: dartynode.BaiduDocAnalysisRes
	(*BaiduIdcardIdentReq)(nil),     // 20: dartynode.BaiduIdcardIdentReq
	(*BaiduIdcardIdentRes)(nil),     // 21: dartynode.BaiduIdcardIdentRes
	(*BaiduTextCensorReq)(nil),      // 22: dartynode.BaiduTextCensorReq
	(*BaiduTextCensorRes)(nil),      // 23: dartynode.BaiduTextCensorRes
	(*BaiduImgCensorReq)(nil),       // 24: dartynode.BaiduImgCensorReq
	(*BaiduImgCensorRes)(nil),       // 25: dartynode.BaiduImgCensorRes
	(*PayDetail)(nil),               // 26: dartynode.PayDetail
	(*Address)(nil),                 // 27: dartynode.Address
	(*WechatPayReq)(nil),            // 28: dartynode.WechatPayReq
	(*WechatPayRes)(nil),            // 29: dartynode.WechatPayRes
	(*AlipayReq)(nil),               // 30: dartynode.AlipayReq
	(*AlipayRes)(nil),               // 31: dartynode.AlipayRes
	nil,                             // 32: dartynode.LoginWechatReq.ExtraEntry
	nil,                             // 33: dartynode.LoginWechatRes.ExtraEntry
	nil,                             // 34: dartynode.RefreshWechatReq.ExtraEntry
	nil,                             // 35: dartynode.RefreshWechatRes.ExtraEntry
	nil,                             // 36: dartynode.LogoutWechatReq.ExtraEntry
	nil,                             // 37: dartynode.LogoutWechatRes.ExtraEntry
	nil,                             // 38: dartynode.UserinfoWechatReq.ExtraEntry
	nil,                             // 39: dartynode.UserinfoWechatRes.ExtraEntry
	nil,                             // 40: dartynode.LoginAlipayReq.ExtraEntry
	nil,                             // 41: dartynode.LoginAlipayRes.ExtraEntry
	nil,                             // 42: dartynode.UserinfoAlipayReq.ExtraEntry
	nil,                             // 43: dartynode.UserinfoAlipayRes.ExtraEntry
	nil,                             // 44: dartynode.RefreshAlipayReq.ExtraEntry
	nil,                             // 45: dartynode.RefreshAlipayRes.ExtraEntry
	nil,                             // 46: dartynode.LogoutAlipayReq.ExtraEntry
	nil,                             // 47: dartynode.LogoutAlipayRes.ExtraEntry
	nil,                             // 48: dartynode.BaiduEntityReq.ExtraEntry
	nil,                             // 49: dartynode.BaiduEntityRes.ExtraEntry
	nil,                             // 50: dartynode.BaiduDocAnalysisReq.ExtraEntry
	nil,                             // 51: dartynode.BaiduDocAnalysisRes.ExtraEntry
	nil,                             // 52: dartynode.BaiduIdcardIdentReq.ExtraEntry
	nil,                             // 53: dartynode.BaiduIdcardIdentRes.ExtraEntry
	nil,                             // 54: dartynode.BaiduTextCensorReq.ExtraEntry
	nil,                             // 55: dartynode.BaiduTextCensorRes.ExtraEntry
	nil,                             // 56: dartynode.BaiduImgCensorReq.ExtraEntry
	nil,                             // 57: dartynode.BaiduImgCensorRes.ExtraEntry
	nil,                             // 58: dartynode.PayDetail.ExtraEntry
	nil,                             // 59: dartynode.Address.ExtraEntry
	nil,                             // 60: dartynode.WechatPayReq.ExtraEntry
	nil,                             // 61: dartynode.WechatPayRes.ExtraEntry
	nil,                             // 62: dartynode.AlipayReq.ExtraEntry
	nil,                             // 63: dartynode.AlipayRes.ExtraEntry
	(rescode.Code)(0),               // 64: rescode.Code
	(*common.WechatUserinfo)(nil),   // 65: common.WechatUserinfo
	(*common.AlipayUserinfo)(nil),   // 66: common.AlipayUserinfo
	(*common.BaiduEntity)(nil),      // 67: common.BaiduEntity
	(*common.BaiduDocAnalysis)(nil), // 68: common.BaiduDocAnalysis
	(*common.BaiduIdcardIdent)(nil), // 69: common.BaiduIdcardIdent
}
var file_dartynode_proto_depIdxs = []int32{
	32, // 0: dartynode.LoginWechatReq.extra:type_name -> dartynode.LoginWechatReq.ExtraEntry
	64, // 1: dartynode.LoginWechatRes.rescode:type_name -> rescode.Code
	33, // 2: dartynode.LoginWechatRes.extra:type_name -> dartynode.LoginWechatRes.ExtraEntry
	34, // 3: dartynode.RefreshWechatReq.extra:type_name -> dartynode.RefreshWechatReq.ExtraEntry
	64, // 4: dartynode.RefreshWechatRes.rescode:type_name -> rescode.Code
	35, // 5: dartynode.RefreshWechatRes.extra:type_name -> dartynode.RefreshWechatRes.ExtraEntry
	36, // 6: dartynode.LogoutWechatReq.extra:type_name -> dartynode.LogoutWechatReq.ExtraEntry
	64, // 7: dartynode.LogoutWechatRes.rescode:type_name -> rescode.Code
	37, // 8: dartynode.LogoutWechatRes.extra:type_name -> dartynode.LogoutWechatRes.ExtraEntry
	38, // 9: dartynode.UserinfoWechatReq.extra:type_name -> dartynode.UserinfoWechatReq.ExtraEntry
	64, // 10: dartynode.UserinfoWechatRes.rescode:type_name -> rescode.Code
	65, // 11: dartynode.UserinfoWechatRes.userinfo:type_name -> common.WechatUserinfo
	39, // 12: dartynode.UserinfoWechatRes.extra:type_name -> dartynode.UserinfoWechatRes.ExtraEntry
	40, // 13: dartynode.LoginAlipayReq.extra:type_name -> dartynode.LoginAlipayReq.ExtraEntry
	64, // 14: dartynode.LoginAlipayRes.rescode:type_name -> rescode.Code
	41, // 15: dartynode.LoginAlipayRes.extra:type_name -> dartynode.LoginAlipayRes.ExtraEntry
	42, // 16: dartynode.UserinfoAlipayReq.extra:type_name -> dartynode.UserinfoAlipayReq.ExtraEntry
	64, // 17: dartynode.UserinfoAlipayRes.rescode:type_name -> rescode.Code
	66, // 18: dartynode.UserinfoAlipayRes.userinfo:type_name -> common.AlipayUserinfo
	43, // 19: dartynode.UserinfoAlipayRes.extra:type_name -> dartynode.UserinfoAlipayRes.ExtraEntry
	44, // 20: dartynode.RefreshAlipayReq.extra:type_name -> dartynode.RefreshAlipayReq.ExtraEntry
	64, // 21: dartynode.RefreshAlipayRes.rescode:type_name -> rescode.Code
	45, // 22: dartynode.RefreshAlipayRes.extra:type_name -> dartynode.RefreshAlipayRes.ExtraEntry
	46, // 23: dartynode.LogoutAlipayReq.extra:type_name -> dartynode.LogoutAlipayReq.ExtraEntry
	64, // 24: dartynode.LogoutAlipayRes.rescode:type_name -> rescode.Code
	47, // 25: dartynode.LogoutAlipayRes.extra:type_name -> dartynode.LogoutAlipayRes.ExtraEntry
	48, // 26: dartynode.BaiduEntityReq.extra:type_name -> dartynode.BaiduEntityReq.ExtraEntry
	64, // 27: dartynode.BaiduEntityRes.rescode:type_name -> rescode.Code
	67, // 28: dartynode.BaiduEntityRes.entitys:type_name -> common.BaiduEntity
	49, // 29: dartynode.BaiduEntityRes.extra:type_name -> dartynode.BaiduEntityRes.ExtraEntry
	50, // 30: dartynode.BaiduDocAnalysisReq.extra:type_name -> dartynode.BaiduDocAnalysisReq.ExtraEntry
	64, // 31: dartynode.BaiduDocAnalysisRes.rescode:type_name -> rescode.Code
	68, // 32: dartynode.BaiduDocAnalysisRes.analysis:type_name -> common.BaiduDocAnalysis
	51, // 33: dartynode.BaiduDocAnalysisRes.extra:type_name -> dartynode.BaiduDocAnalysisRes.ExtraEntry
	52, // 34: dartynode.BaiduIdcardIdentReq.extra:type_name -> dartynode.BaiduIdcardIdentReq.ExtraEntry
	64, // 35: dartynode.BaiduIdcardIdentRes.rescode:type_name -> rescode.Code
	69, // 36: dartynode.BaiduIdcardIdentRes.ident:type_name -> common.BaiduIdcardIdent
	53, // 37: dartynode.BaiduIdcardIdentRes.extra:type_name -> dartynode.BaiduIdcardIdentRes.ExtraEntry
	54, // 38: dartynode.BaiduTextCensorReq.extra:type_name -> dartynode.BaiduTextCensorReq.ExtraEntry
	64, // 39: dartynode.BaiduTextCensorRes.rescode:type_name -> rescode.Code
	55, // 40: dartynode.BaiduTextCensorRes.extra:type_name -> dartynode.BaiduTextCensorRes.ExtraEntry
	56, // 41: dartynode.BaiduImgCensorReq.extra:type_name -> dartynode.BaiduImgCensorReq.ExtraEntry
	64, // 42: dartynode.BaiduImgCensorRes.rescode:type_name -> rescode.Code
	57, // 43: dartynode.BaiduImgCensorRes.extra:type_name -> dartynode.BaiduImgCensorRes.ExtraEntry
	58, // 44: dartynode.PayDetail.extra:type_name -> dartynode.PayDetail.ExtraEntry
	59, // 45: dartynode.Address.extra:type_name -> dartynode.Address.ExtraEntry
	26, // 46: dartynode.WechatPayReq.details:type_name -> dartynode.PayDetail
	27, // 47: dartynode.WechatPayReq.sender:type_name -> dartynode.Address
	27, // 48: dartynode.WechatPayReq.recver:type_name -> dartynode.Address
	60, // 49: dartynode.WechatPayReq.extra:type_name -> dartynode.WechatPayReq.ExtraEntry
	64, // 50: dartynode.WechatPayRes.rescode:type_name -> rescode.Code
	61, // 51: dartynode.WechatPayRes.extra:type_name -> dartynode.WechatPayRes.ExtraEntry
	62, // 52: dartynode.AlipayReq.extra:type_name -> dartynode.AlipayReq.ExtraEntry
	64, // 53: dartynode.AlipayRes.rescode:type_name -> rescode.Code
	63, // 54: dartynode.AlipayRes.extra:type_name -> dartynode.AlipayRes.ExtraEntry
	0,  // 55: dartynode.DartynodeService.LoginWechat:input_type -> dartynode.LoginWechatReq
	2,  // 56: dartynode.DartynodeService.RefreshWechat:input_type -> dartynode.RefreshWechatReq
	4,  // 57: dartynode.DartynodeService.LogoutWechat:input_type -> dartynode.LogoutWechatReq
	6,  // 58: dartynode.DartynodeService.UserinfoWechat:input_type -> dartynode.UserinfoWechatReq
	8,  // 59: dartynode.DartynodeService.LoginAlipay:input_type -> dartynode.LoginAlipayReq
	12, // 60: dartynode.DartynodeService.RefreshAlipay:input_type -> dartynode.RefreshAlipayReq
	14, // 61: dartynode.DartynodeService.LogoutAlipay:input_type -> dartynode.LogoutAlipayReq
	10, // 62: dartynode.DartynodeService.UserinfoAlipay:input_type -> dartynode.UserinfoAlipayReq
	16, // 63: dartynode.DartynodeService.BaiduEntity:input_type -> dartynode.BaiduEntityReq
	18, // 64: dartynode.DartynodeService.BaiduDocAnalysis:input_type -> dartynode.BaiduDocAnalysisReq
	20, // 65: dartynode.DartynodeService.BaiduIdcardIdent:input_type -> dartynode.BaiduIdcardIdentReq
	22, // 66: dartynode.DartynodeService.BaiduTextCensor:input_type -> dartynode.BaiduTextCensorReq
	24, // 67: dartynode.DartynodeService.BaiduImgCensor:input_type -> dartynode.BaiduImgCensorReq
	28, // 68: dartynode.DartynodeService.WechatPay:input_type -> dartynode.WechatPayReq
	30, // 69: dartynode.DartynodeService.Alipay:input_type -> dartynode.AlipayReq
	1,  // 70: dartynode.DartynodeService.LoginWechat:output_type -> dartynode.LoginWechatRes
	3,  // 71: dartynode.DartynodeService.RefreshWechat:output_type -> dartynode.RefreshWechatRes
	5,  // 72: dartynode.DartynodeService.LogoutWechat:output_type -> dartynode.LogoutWechatRes
	7,  // 73: dartynode.DartynodeService.UserinfoWechat:output_type -> dartynode.UserinfoWechatRes
	9,  // 74: dartynode.DartynodeService.LoginAlipay:output_type -> dartynode.LoginAlipayRes
	13, // 75: dartynode.DartynodeService.RefreshAlipay:output_type -> dartynode.RefreshAlipayRes
	15, // 76: dartynode.DartynodeService.LogoutAlipay:output_type -> dartynode.LogoutAlipayRes
	11, // 77: dartynode.DartynodeService.UserinfoAlipay:output_type -> dartynode.UserinfoAlipayRes
	17, // 78: dartynode.DartynodeService.BaiduEntity:output_type -> dartynode.BaiduEntityRes
	19, // 79: dartynode.DartynodeService.BaiduDocAnalysis:output_type -> dartynode.BaiduDocAnalysisRes
	21, // 80: dartynode.DartynodeService.BaiduIdcardIdent:output_type -> dartynode.BaiduIdcardIdentRes
	23, // 81: dartynode.DartynodeService.BaiduTextCensor:output_type -> dartynode.BaiduTextCensorRes
	25, // 82: dartynode.DartynodeService.BaiduImgCensor:output_type -> dartynode.BaiduImgCensorRes
	29, // 83: dartynode.DartynodeService.WechatPay:output_type -> dartynode.WechatPayRes
	31, // 84: dartynode.DartynodeService.Alipay:output_type -> dartynode.AlipayRes
	70, // [70:85] is the sub-list for method output_type
	55, // [55:70] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_dartynode_proto_init() }
func file_dartynode_proto_init() {
	if File_dartynode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dartynode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWechatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWechatRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshWechatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshWechatRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutWechatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutWechatRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserinfoWechatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserinfoWechatRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginAlipayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginAlipayRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserinfoAlipayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserinfoAlipayRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshAlipayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshAlipayRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutAlipayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutAlipayRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduEntityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduEntityRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduDocAnalysisReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduDocAnalysisRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduIdcardIdentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduIdcardIdentRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduTextCensorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduTextCensorRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduImgCensorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaiduImgCensorRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dartynode_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlipayRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dartynode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dartynode_proto_goTypes,
		DependencyIndexes: file_dartynode_proto_depIdxs,
		MessageInfos:      file_dartynode_proto_msgTypes,
	}.Build()
	File_dartynode_proto = out.File
	file_dartynode_proto_rawDesc = nil
	file_dartynode_proto_goTypes = nil
	file_dartynode_proto_depIdxs = nil
}
